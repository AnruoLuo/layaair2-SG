var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
const ScaleAnimScript_1 = require("./module/common/component/ScaleAnimScript");
const DaySignItem_1 = require("./module/daySign/view/DaySignItem");
const GuideSpeakView_1 = require("./module/guide/view/GuideSpeakView");
const HallScene_1 = require("./module/hall/view/HallScene");
const CurrencyView_1 = require("./module/hall/view/CurrencyView");
const HeadItem_1 = require("./module/hall/view/item/HeadItem");
const SystemBtn_1 = require("./module/hall/view/item/SystemBtn");
const LoginScene_1 = require("./module/login/view/LoginScene");
const RollNameItem_1 = require("./module/luckPrize/view/item/RollNameItem");
const RankItem_1 = require("./module/rank/view/RankItem");
const ShopItem_1 = require("./module/shop/view/ShopItem");
const TaskItem_1 = require("./module/task/view/TaskItem");
/*
* 游戏初始化配置;
*/
class GameConfig {
    constructor() { }
    static init() {
        var reg = Laya.ClassUtils.regClass;
        reg("module/common/component/ScaleAnimScript.ts", ScaleAnimScript_1.default);
        reg("module/daySign/view/DaySignItem.ts", DaySignItem_1.default);
        reg("module/guide/view/GuideSpeakView.ts", GuideSpeakView_1.default);
        reg("module/hall/view/HallScene.ts", HallScene_1.default);
        reg("module/hall/view/CurrencyView.ts", CurrencyView_1.default);
        reg("module/hall/view/item/HeadItem.ts", HeadItem_1.default);
        reg("module/hall/view/item/SystemBtn.ts", SystemBtn_1.default);
        reg("module/login/view/LoginScene.ts", LoginScene_1.default);
        reg("module/luckPrize/view/item/RollNameItem.ts", RollNameItem_1.default);
        reg("module/rank/view/RankItem.ts", RankItem_1.default);
        reg("module/shop/view/ShopItem.ts", ShopItem_1.default);
        reg("module/task/view/TaskItem.ts", TaskItem_1.default);
    }
}
GameConfig.width = 750;
GameConfig.height = 1334;
GameConfig.scaleMode = "fixedwidth";
GameConfig.screenMode = "none";
GameConfig.alignV = "middle";
GameConfig.alignH = "center";
GameConfig.startScene = "moduleView/login/LoginScene.scene";
GameConfig.sceneRoot = "";
GameConfig.debug = false;
GameConfig.stat = true;
GameConfig.physicsDebug = false;
GameConfig.exportSceneToJson = true;
exports.default = GameConfig;
GameConfig.init();
},{"./module/common/component/ScaleAnimScript":54,"./module/daySign/view/DaySignItem":60,"./module/guide/view/GuideSpeakView":63,"./module/hall/view/CurrencyView":69,"./module/hall/view/HallScene":70,"./module/hall/view/item/HeadItem":74,"./module/hall/view/item/SystemBtn":75,"./module/login/view/LoginScene":77,"./module/luckPrize/view/item/RollNameItem":81,"./module/rank/view/RankItem":82,"./module/shop/view/ShopItem":84,"./module/task/view/TaskItem":86}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GameConfig_1 = require("./GameConfig");
const PathConfig_1 = require("./core_wq/config/PathConfig");
const AppConfig_1 = require("./core_wq/config/AppConfig");
class Main {
    constructor() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = Laya.Stage.SCALE_EXACTFIT;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        if (!AppConfig_1.default.isDebug || Laya.Browser.onMiniGame) { //是否读取外部地址的资源
            Laya.URL.basePath = PathConfig_1.default.AppResUrl;
        }
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    onVersionLoaded() {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    }
    onConfigLoaded() {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    }
}
//激活启动类
new Main();
},{"./GameConfig":1,"./core_wq/config/AppConfig":4,"./core_wq/config/PathConfig":5}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PathConfig_1 = require("../config/PathConfig");
/** 龙骨动画 */
class BoneAnim extends Laya.Sprite {
    constructor(boneName, isLoop = false, isHeroBone = false) {
        super();
        this._currIndex = 0;
        this._isLoop = false;
        this._isLoop = isLoop;
        if (isHeroBone) {
            this._aniPath = PathConfig_1.default.BONE_PATH.replace("{0}", boneName);
        }
        else {
            this._aniPath = "images/boneAnim/common/" + boneName + ".sk";
        }
        this._factory = new Laya.Templet();
        this.addEvents();
        this._factory.loadAni(this._aniPath);
    }
    addEvents() {
        this._factory.on(Laya.Event.COMPLETE, this, this.parseComplete);
        this._factory.on(Laya.Event.ERROR, this, this.onError);
    }
    removeEvents() {
        this._factory.off(Laya.Event.COMPLETE, this, this.parseComplete);
        this._factory.off(Laya.Event.ERROR, this, this.onError);
        this._armature.off(Laya.Event.STOPPED, this, this.completeHandler);
    }
    onError() {
        console.log("@David 龙骨动画路径：" + this._aniPath + " - 创建失败！");
    }
    parseComplete() {
        if (Laya.loader.getRes(this._aniPath)) {
            this._armature = this._factory.buildArmature(0);
            this.addChild(this._armature);
            this._armature.on(Laya.Event.STOPPED, this, this.completeHandler);
            this._armature.play(0, this._isLoop);
        }
        else {
            this.destroy();
        }
    }
    completeHandler() {
        if (this._armature && !this._isLoop) {
            this.completeBack && this.completeBack();
        }
    }
    play(playName = 0, isLoop = false) {
        if (this._armature) {
            this._armature.play(playName, this._isLoop);
        }
    }
    destroy() {
        if (this._armature) {
            this.removeEvents();
            this._armature.stop(); //停止龙骨动画播放
            this._armature.removeSelf(); //从显示列表移除龙骨动画本身
            this._armature.removeChildren(); //从显示列表移除龙骨动画子对象
            this._armature.destroy(true); //从显存销毁龙骨动画及其子对象
            this._armature = null;
            this._factory.destroy(); //释放动画模板类下的纹理数据
            this.removeChildren();
            this.removeSelf();
        }
    }
    get armature() {
        return this._armature;
    }
    set armature(value) {
        this._armature = value;
    }
}
exports.default = BoneAnim;
},{"../config/PathConfig":5}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class AppConfig {
}
AppConfig.isDebug = true;
AppConfig.HallScene = "moduleView/hall/HallScene.scene";
exports.default = AppConfig;
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class PathConfig extends Laya.Script {
}
PathConfig.AppUrl = "https://sanguo.xiaoduogame.cn/api/"; //正式服地址
PathConfig.AppResUrl = "https://miniapp.vuggame.com/sanguo_xiaoduogame_cn/v1/";
PathConfig.RES_URL = PathConfig.AppResUrl + "images/";
PathConfig.HEAD_PATH = PathConfig.RES_URL + "headImg/";
PathConfig.BONE_PATH = PathConfig.RES_URL + "boneAnim/{0}.sk";
PathConfig.BONE_MONSTER_PATH = PathConfig.RES_URL + "boneAnim/enemy/{0}.sk";
/** 声音路径 */
PathConfig.SOUND_PATH = Laya.Browser.onPC ? "musics/mp3/{0}.mp3" : "musics/ogg/{0}.ogg";
/** 排行榜排名图片路径 */
PathConfig.RANK_PATH = "images/rank/cell_top{0}.png";
/** 功能按钮图片路径 */
PathConfig.SYSTEM_BTN_PATH = "images/hall/{0}.png";
exports.default = PathConfig;
},{}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class TimeConfig {
}
/**
 * 以秒为单位时，表示1秒的值，即1
 */
TimeConfig.SEC = 1;
/**
 * 以秒为单位时，表示1分钟的值，即60
 */
TimeConfig.MIN = 60;
/**
 * 以秒为单位时，表示1小时的值，即60 x 60
 */
TimeConfig.HOUR = 60 * 60;
/**
 * 以毫秒为单位时，表示1秒的值，即1000
 */
TimeConfig.SEC_IN_MILI = 1000;
/**
 * 以毫秒为单位时，表示1分钟的值，即1000 x 60
 */
TimeConfig.MIN_IN_MILI = 1000 * 60;
/**
 * 以毫秒为单位时，表示1小时的值，即1000 x 60 x 60
 */
TimeConfig.HOUR_IN_MILI = 1000 * 60 * 60;
exports.default = TimeConfig;
},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const HeroVO_1 = require("./vo/HeroVO");
const TSDictionary_1 = require("../utils/TSDictionary");
const CSVParser_1 = require("./base/CSVParser");
const HeroConfigVO_1 = require("./vo/HeroConfigVO");
const LevelVO_1 = require("./vo/LevelVO");
const SoundVO_1 = require("./vo/SoundVO");
const GuideVO_1 = require("./vo/GuideVO");
const MapVO_1 = require("./vo/MapVO");
const SystemVO_1 = require("./vo/SystemVO");
const DropVO_1 = require("./vo/DropVO");
const LotteryRosterVO_1 = require("./vo/LotteryRosterVO");
class GlobalData extends Laya.Script {
    constructor() {
        super();
        /** json数据是否全部解析完毕 */
        this._hasParasComplete = false;
        this._needParseCount = 0;
        this._currParseCount = 0;
        this._jsonCount = 0;
    }
    setup(callback) {
        this._callBack = callback;
        this._totalStepCsvList = new TSDictionary_1.default();
        GlobalData.AllCacheData = new TSDictionary_1.default();
        this.initModel();
        this.initStep();
    }
    initModel() {
        this._totalStepCsvList.Add(GlobalData.HeroVO, HeroVO_1.default);
        this._totalStepCsvList.Add(GlobalData.HeroConfigVO, HeroConfigVO_1.default);
        this._totalStepCsvList.Add(GlobalData.LevelVO, LevelVO_1.default);
        this._totalStepCsvList.Add(GlobalData.SoundVO, SoundVO_1.default);
        this._totalStepCsvList.Add(GlobalData.GuideVO, GuideVO_1.default);
        this._totalStepCsvList.Add(GlobalData.MapVO, MapVO_1.default);
        this._totalStepCsvList.Add(GlobalData.SystemVO, SystemVO_1.default);
        this._totalStepCsvList.Add(GlobalData.DropVO, DropVO_1.default);
        this._totalStepCsvList.Add(GlobalData.LotteryRosterVO, LotteryRosterVO_1.default);
    }
    // 解析初始数据表
    initStep() {
        this._needParseCount = this._totalStepCsvList.GetLenght();
        this.onEnterFrameLoader();
    }
    onEnterFrameLoader() {
        if (this._currParseCount >= this._needParseCount) {
            this._hasParasComplete = true;
            this._callBack && this._callBack();
        }
        else {
            //一次解析两个文件
            this.getCsvFile();
            // this.getCsvFile();
        }
    }
    /** 开始逐个逐个解析JSON文件 */
    getCsvFile() {
        if (this._jsonCount < this._needParseCount) {
            let key = this._totalStepCsvList.getKeyByIndex(this._jsonCount);
            key = "config/csvJson/" + key;
            key = key.replace('_', '.');
            Laya.loader.load(key, Laya.Handler.create(this, this.onLoaded, [key]), null, Laya.Loader.TEXT, 0, true);
            this._jsonCount++;
        }
    }
    onLoaded(key) {
        let data = Laya.loader.getRes(key);
        try {
            if (data) {
                let data_json = JSON.parse(data);
                let csvStr = JSON.stringify(data_json);
                this.starSingleParse(csvStr);
            }
        }
        catch (error) {
            this._jsonCount--;
        }
        finally {
            this.onEnterFrameLoader();
        }
    }
    starSingleParse(csvStr) {
        let key = this._totalStepCsvList.getKeyByIndex(this._currParseCount);
        let DataClass = this._totalStepCsvList.getValueByIndex(this._currParseCount);
        let dic = CSVParser_1.default.ParseJsonData(DataClass, csvStr);
        GlobalData.AllCacheData.Add(key, dic);
        // console.log("@David 表数据：key:", key, " --- data:", dic);
        this._currParseCount++;
    }
    /** 获取对应表的指定某条数据 */
    static getData(type, key) {
        let dic = GlobalData.AllCacheData.TryGetValue(type);
        return dic.TryGetValue(key);
    }
    /**
     * 获取对应表的某条数据中指定名字下的数据
     * @param type 那张表
     * @param filterType 某一项名字
     * @param filterValue 值
     * 例如：parseInt(GlobleVOData.getDataByFilter(GlobleVOData.ServerConfigVO, "id", "MAX_MAP_COUNT")[0].value)
     */
    static getDataByFilter(type, filterType, filterValue) {
        let dic = GlobalData.AllCacheData.TryGetValue(type);
        if (dic == null)
            return [];
        let filterd = dic.TryGetListByCondition((bean) => bean[filterType] == filterValue);
        return filterd;
    }
    /** 获取对应表的所有数据 */
    static getAllValue(type) {
        let dic = GlobalData.AllCacheData.TryGetValue(type);
        return dic == null ? [] : dic.getValues();
    }
    /**
     * 查找对应条件的数据
     */
    static getDataByCondition(type, value) {
        let dic = GlobalData.AllCacheData.TryGetValue(type);
        if (dic == null)
            return [];
        let arr = dic.TryGetListByCondition(value);
        return arr;
    }
    static get Ins() {
        if (!GlobalData._instance) {
            GlobalData._instance = new GlobalData();
        }
        return GlobalData._instance;
    }
}
/** 英雄基础表 */
GlobalData.HeroVO = "Hero_json";
/** 英雄配置表 */
GlobalData.HeroConfigVO = "HeroConfig_json";
/** 等级配置表 */
GlobalData.LevelVO = "Level_json";
/** 声音表 */
GlobalData.SoundVO = "Sound_json";
/** 新手引导表 */
GlobalData.GuideVO = "Guide_json";
/** 地图表 */
GlobalData.MapVO = "Map_json";
/** 功能开放表 */
GlobalData.SystemVO = "System_json";
/** 掉落表 */
GlobalData.DropVO = "Drop_json";
/** 转盘中奖表 */
GlobalData.LotteryRosterVO = "LotteryRoster_json";
exports.default = GlobalData;
},{"../utils/TSDictionary":48,"./base/CSVParser":8,"./vo/DropVO":9,"./vo/GuideVO":10,"./vo/HeroConfigVO":11,"./vo/HeroVO":12,"./vo/LevelVO":13,"./vo/LotteryRosterVO":14,"./vo/MapVO":15,"./vo/SoundVO":16,"./vo/SystemVO":17}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TSDictionary_1 = require("../../utils/TSDictionary");
/**
 * CSV解析类
 */
class CSVParser {
    //用json替换csv,json解析文件
    static ParseJsonData(infoClass, sourceText) {
        let self = this;
        var result = new TSDictionary_1.default();
        sourceText = sourceText.trim();
        let obj = JSON.parse(sourceText);
        var keyList = null;
        var typeList = null;
        var dataList = null;
        var itemList = null;
        keyList = obj.titles;
        if (obj.data == null)
            return result; //空表不做处理
        dataList = obj.data; //数据是从0开始
        typeList = dataList[0];
        var i = 0;
        var dataLen = dataList.length;
        for (i = 0; i < dataLen; i++) {
            var record = new infoClass();
            itemList = dataList[i];
            self.ParseRecord(keyList, itemList, record);
            result.Add(parseInt(itemList[0]), record);
        }
        sourceText = null;
        return result;
    }
    static ParseRecord(keyList, itemList, record) {
        let self = this;
        var n = itemList.length;
        for (var i = 0; i < n; i++) {
            record[keyList[i]] = itemList[i];
        }
    }
}
exports.default = CSVParser;
},{"../../utils/TSDictionary":48}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class DropVO {
    constructor() {
        /** 解锁英雄ID */
        this.unlockNeedId = 0;
        /** 掉落ID */
        this.dropHeroLevel = 0;
    }
}
exports.default = DropVO;
},{}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MathUtil_1 = require("../../utils/MathUtil");
class GuideVO {
    set isForce(value) {
        this._isForce = Number(value) == 0 ? false : true;
    }
    /** 是否强制引导 */
    get isForce() {
        return this._isForce;
    }
    set clickAreaParam(value) {
        this._clickAreaParam = MathUtil_1.default.splitToNumber(value);
    }
    /** 可点击区域参数  x#y#w#h */
    get clickAreaParam() {
        return this._clickAreaParam;
    }
    set fingerParam(value) {
        this._fingerParam = MathUtil_1.default.splitToNumber(value);
    }
    /** 手指指引位置参数 x#y */
    get fingerParam() {
        return this._fingerParam;
    }
    set speakParam(value) {
        this._speakParam = MathUtil_1.default.splitToNumber(value);
    }
    /** 对话框位置参数  x#y */
    get speakParam() {
        return this._speakParam;
    }
}
exports.default = GuideVO;
},{"../../utils/MathUtil":44}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class HeroConfigVO {
}
exports.default = HeroConfigVO;
},{}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class HeroVO {
    constructor() {
        this.id = 0;
        this.type = 0;
        this.name = "";
        /** 头像图片 */
        this.imgUrl = "";
        /** 对白 */
        this.dialogue = "";
        /** 龙骨动画 */
        this.modelImgUrl = "";
        /** 坐骑 */
        this.horse = "";
        /** 攻击动作 */
        this.atkAnimKey = "";
    }
}
exports.default = HeroVO;
},{}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class LevelVO {
}
exports.default = LevelVO;
},{}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class LotteryRosterVO {
}
exports.default = LotteryRosterVO;
},{}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class MapVO {
}
exports.default = MapVO;
},{}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class SoundVO {
}
exports.default = SoundVO;
},{}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 功能开放表
 */
class SystemVO {
    constructor() {
        this.id = 0;
        /** 名字 */
        this.name = "";
        /** 描述 */
        this.des = "";
        /** 开放等级 */
        this.openLevel = 0;
        /** 排序位置 */
        this.sort = 0;
        /** 图片 */
        this.icon = "";
    }
}
exports.default = SystemVO;
},{}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MathUtil_1 = require("../utils/MathUtil");
const TimeConfig_1 = require("../config/TimeConfig");
const PoolMgr_1 = require("../msg/PoolMgr");
class ItemExplode extends Laya.Sprite {
    constructor(animationName = "rollingCoin") {
        super();
        this._animationName = animationName;
    }
    play(fromX, fromY) {
        const timestamp = new Date().getTime();
        if (timestamp - ItemExplode.lastTimestamp > ItemExplode.COOL_DOWN) {
            ItemExplode.lastTimestamp = timestamp;
            this._animNum = 0;
            this._animLen = 7;
            this.pos(fromX, fromY);
            this.createAnim();
        }
        else {
            Laya.timer.frameOnce(5, this, this.onAnimComplete);
        }
        return this;
    }
    createAnim() {
        this._animNum++;
        const anim = PoolMgr_1.default.Ins.get(Laya.Animation, this._animationName);
        // @ts-ignore
        if (!anim.url_loaded) {
            // @ts-ignore
            anim.url_loaded = true;
            anim.loadAtlas("images/boneAnim/effect/" + this._animationName + ".json");
            anim.interval = 25;
        }
        const scale = MathUtil_1.default.range(0.6, 0.8);
        anim
            .pivot(30, 30)
            .pos(MathUtil_1.default.rangeInt(-5, 5), MathUtil_1.default.rangeInt(-5, 5))
            .scale(scale, scale);
        anim.play(0, true);
        anim.alpha = 1;
        const tx = (Math.abs(anim.x) / anim.x) * MathUtil_1.default.rangeInt(30, 220);
        // @ts-ignore
        anim.speedY = MathUtil_1.default.range(-7.5, -5);
        // @ts-ignore
        anim.g = 0.3;
        // @ts-ignore
        anim.updateHandler = Laya.Handler.create(this, this.onAnimUpdate, [anim], false);
        const duration = TimeConfig_1.default.SEC_IN_MILI * MathUtil_1.default.range(0.6, 0.8);
        // prettier-ignore
        // @ts-ignore
        Laya.Tween.to(anim, { x: tx, update: anim.updateHandler }, duration * 1.5, Laya.Ease.quadOut);
        // prettier-ignore
        Laya.Tween.to(anim, { alpha: 0, complete: Laya.Handler.create(this, this.onAnimComplete, [anim]) }, duration * 0.4, Laya.Ease.quadOut, null, duration * 0.6);
        Laya.timer.frameOnce(1, this, () => {
            this.addChild(anim);
        });
        if (this._animNum < this._animLen) {
            // prettier-ignore
            this.createAnim();
        }
    }
    onAnimUpdate(anim) {
        // @ts-ignore
        anim.y += anim.speedY;
        // @ts-ignore
        anim.speedY += anim.g;
    }
    onAnimComplete(anim) {
        if (anim) {
            anim.stop();
            anim.removeSelf();
            // @ts-ignore
            anim.updateHandler.clear();
            PoolMgr_1.default.Ins.return(anim, this._animationName);
        }
        try {
            if (this && this.numChildren <= 0) {
                this.destroy(true);
            }
        }
        catch (e) {
            console.log('@FREEMAN: ItemExplode.ts => ', e);
        }
    }
}
ItemExplode.lastTimestamp = 0;
ItemExplode.COOL_DOWN = 500;
exports.default = ItemExplode;
},{"../config/TimeConfig":6,"../msg/PoolMgr":28,"../utils/MathUtil":44}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class EventType {
}
/** 更新货币 */
EventType.UPDATE_CURRENCY = "UPDATE_CURRENCY";
/** 更新用户等级 */
EventType.UPDATE_USER_LEVEL = "UPDATE_USER_LEVEL";
/** 更新用户经验 */
EventType.UPDATE_USER_EXP = "UPDATE_USER_EXP";
/** 更新每秒收益 */
EventType.UPDATE_INCOME = "UPDATE_INCOME";
/** 回到游戏中 */
EventType.COME_BACK_GAME = "COME_BACK_GAME";
/** 英雄储存箱 */
EventType.HERO_BOX = "HERO_BOX";
/** 加速 */
EventType.GAME_ACCE_START = "GAME_ACCE_START";
/** 每日签到奖励领取完毕 */
EventType.DAYSIGN_REWARD_COMPLETE = "DAYSIGN_REWARD_COMPLETE";
/** 显示离线奖励 */
EventType.SHOW_OFFLINE_REWARD = "SHOW_OFFLINE_REWARD";
/** 新手下一步 */
EventType.GUIDE_NEXT_STEP = "GUIDE_NEXT_STEP";
/** 打开功能界面 */
EventType.OPEN_VIEW = "OPEN_VIEW";
/** 移除商店红点 */
EventType.REMOVE_SHOP_REN_POINT = "REMOVE_SHOP_REN_POINT";
/** 移除任务红点 */
EventType.REMOVE_TASK_REN_POINT = "REMOVE_TASK_REN_POINT";
/** 移除转盘红点 */
EventType.REMOVE_LUCK_PRIZE_REN_POINT = "REMOVE_LUCK_PRIZE_REN_POINT";
/** 移除签到红点 */
EventType.REMOVE_SIGN_REN_POINT = "REMOVE_SIGN_REN_POINT";
/** 移除关注红点 */
EventType.REMOVE_FOLLOW_REN_POINT = "REMOVE_FOLLOW_REN_POINT";
/** 更新系统功能红点 */
EventType.UPDATE_SYSTEM_RED_POINT = "UPDATE_SYSTEM_RED_POINT";
/** 更新系统功能按钮 */
EventType.UPDATE_SYSTEM_BTN = "UPDATE_SYSTEM_BTN";
exports.default = EventType;
},{}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class EventsMgr extends Laya.Sprite {
    constructor() {
        super();
        this.type = 1;
        this.dict = {};
        this.eVec = new Array();
        this.lastRunTime = 0;
        if (this.type == 0) {
            this.frameLoop(1, this, this.onRun);
        }
    }
    /**
     * 添加消息监听
     * @param type 消息唯一标识
     * @param listener 侦听函数
     * @param listenerObj 侦听函数所属对象
     *
     */
    addListener(type, listener, listenerObj) {
        let arr = this.dict[type];
        if (arr == null) {
            arr = new Array();
            this.dict[type] = arr;
        }
        //检测是否已经存在
        let i = 0;
        let len = arr.length;
        for (i; i < len; i++) {
            if (arr[i][0] == listener && arr[i][1] == listenerObj) {
                return;
            }
        }
        arr.push([listener, listenerObj]);
    }
    /**
     * 移除消息监听
     * @param type 消息唯一标识
     * @param listener 侦听函数
     * @param listenerObj 侦听函数所属对象
     */
    removeListener(type, listener, listenerObj) {
        let arr = this.dict[type];
        if (arr == null)
            return;
        let i = 0;
        let len = arr.length;
        for (i; i < len; i++) {
            if (arr[i][0] == listener && arr[i][1] == listenerObj) {
                arr.splice(i, 1);
                break;
            }
        }
        if (arr.length == 0) {
            this.dict[type] = null;
            delete this.dict[type];
        }
    }
    /**
     * 移除某一对象的所有监听
     * @param listenerObj 侦听函数所属对象
     */
    removeAll(listenerObj) {
        let keys = Object.keys(this.dict);
        for (let i = 0, len = keys.length; i < len; i++) {
            let type = keys[i];
            let arr = this.dict[type];
            for (let j = 0; j < arr.length; j++) {
                if (arr[j][1] == listenerObj) {
                    arr.splice(j, 1);
                    j--;
                }
            }
            if (arr.length == 0) {
                this.dict[type] = null;
                delete this.dict[type];
            }
        }
    }
    /**
     * 触发消息
     * @param type 消息唯一标识
     * @param param 消息参数
     */
    dispatch(type, ...param) {
        if (this.dict[type] == null) {
            return;
        }
        let vo = Laya.Pool.getItemByClass("MessageVo", MessageVo);
        vo.type = type;
        vo.param = param;
        if (this.type == 0) {
            this.eVec.push(vo);
        }
        else if (this.type == 1) {
            this.dealMsg(vo);
        }
        else {
            // Log.trace("MessageCenter未实现的类型");
        }
    }
    /** 运行 */
    onRun() {
        let currTime = Laya.Browser.now();
        let inSleep = currTime - this.lastRunTime > 100;
        this.lastRunTime = currTime;
        if (inSleep) {
            while (this.eVec.length > 0) {
                this.dealMsg(this.eVec.shift());
            }
        }
        else {
            while (this.eVec.length > 0) {
                this.dealMsg(this.eVec.shift());
                if ((Laya.Browser.now() - currTime) > 5) {
                    break;
                }
            }
        }
    }
    /** 处理一条消息 */
    dealMsg(msgVo) {
        let listeners = this.dict[msgVo.type];
        let i = 0;
        let len = listeners.length;
        let listener = null;
        while (i < len) {
            listener = listeners[i];
            listener[0].apply(listener[1], msgVo.param);
            if (listeners.length != len) {
                len = listeners.length;
                i--;
            }
            i++;
        }
        msgVo.dispose();
        Laya.Pool.recover("MessageVo", msgVo);
    }
    /** 清空处理 */
    clear() {
        this.dict = {};
        this.eVec.splice(0);
    }
    static get Ins() {
        if (EventsMgr._ins == null) {
            EventsMgr._ins = new EventsMgr();
        }
        return EventsMgr._ins;
    }
}
exports.default = EventsMgr;
class MessageVo {
    constructor() {
    }
    dispose() {
        this.type = null;
        this.param = null;
    }
}
},{}],21:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventsMgr_1 = require("../event/EventsMgr");
const EventType_1 = require("../event/EventType");
const LayerMgr_1 = require("../layer/LayerMgr");
const GuideSpeakView_1 = require("../../module/guide/view/GuideSpeakView");
class GuideMask extends Laya.Sprite {
    constructor() {
        super();
        /** 是否点击空白区域进入下一步引导 */
        this.isClickMaskNextStep = false;
        this.init();
    }
    init() {
        //绘制一个蓝色方块，不被抠图
        var gameContainer = new Laya.Sprite();
        gameContainer.alpha = 0;
        gameContainer.loadImage("images/component/tip_bg.png");
        this.addChild(gameContainer);
        // 引导所在容器
        this.guideContainer = new Laya.Sprite();
        // 设置容器为画布缓存
        this.guideContainer.cacheAs = "bitmap";
        this.addChild(this.guideContainer);
        gameContainer.on(Laya.Event.CLICK, this, this.onNextStep);
        //绘制遮罩区，含透明度，可见游戏背景
        var maskArea = new Laya.Sprite();
        maskArea.alpha = 0.5;
        maskArea.graphics.drawRect(0, 0, LayerMgr_1.default.stageDesignWidth, LayerMgr_1.default.stageDesignHeight, "#000000");
        this.guideContainer.addChild(maskArea);
        //绘制一个圆形区域，利用叠加模式，从遮罩区域抠出可交互区
        this.interactionArea = new Laya.Sprite();
        //设置叠加模式
        this.interactionArea.blendMode = "destination-out";
        this.guideContainer.addChild(this.interactionArea);
        this.hitArea = new Laya.HitArea();
        this.hitArea.hit.drawRect(0, 0, LayerMgr_1.default.stageDesignWidth, LayerMgr_1.default.stageDesignHeight, "#000000");
        this.guideContainer.hitArea = this.hitArea;
        this.guideContainer.mouseEnabled = true;
    }
    onNextStep() {
        if (this.isClickMaskNextStep) {
            this.reset();
            EventsMgr_1.default.Ins.dispatch(EventType_1.default.GUIDE_NEXT_STEP);
        }
    }
    /** 可点击区域的大小 */
    drawCliclAreaSize(data) {
        this.hitArea.unHit.clear();
        this.hitArea.unHit.drawRect(data.x, data.y, data.w, data.h, "#000000");
        this.interactionArea.graphics.clear();
        this.interactionArea.graphics.drawRect(data.x, data.y, data.w, data.h, "#000000");
    }
    /** 显示对话框 */
    showSpeakView(content, pos, speakComplete = null) {
        if (this._speakView == null) {
            this._speakView = new GuideSpeakView_1.default();
            this._speakView.zOrder = 1000;
            this.addChild(this._speakView);
        }
        this._speakView.visible = true;
        this._speakView.pos(pos.x, pos.y);
        this._speakView.setSpeakContent(content, speakComplete);
    }
    /** 显示手指指引 */
    showFigner(pos, rotation = -40, effectType = 1) {
        if (this._finger == null) {
            this._finger = new Laya.Image("images/guide/guide_jiantou2.png");
            this._finger.zOrder = 1000;
            this._finger.anchorX = this._finger.anchorY = 0.5;
            this.addChild(this._finger);
        }
        this._finger.visible = true;
        this._finger.rotation = rotation;
        this._finger.pos(pos.x, pos.y);
        if (effectType == 1) {
            this._timeLine = new Laya.TimeLine();
            this._timeLine.addLabel("tl1", 0).to(this._finger, { x: this._finger.x - 20, y: this._finger.y + 20 }, 500)
                .addLabel("tl2", 0).to(this._finger, { x: this._finger.x, y: this._finger.y }, 500, Laya.Ease.backInOut);
            this._timeLine.play(0, true);
        }
        else if (effectType == 2) {
            this._timeLine = new Laya.TimeLine();
            this._timeLine.addLabel("tl1", 0).to(this._finger, { x: this._finger.x - 100, y: this._finger.y }, 500)
                .addLabel("tl2", 0).to(this._finger, { x: this._finger.x, y: this._finger.y }, 500, Laya.Ease.backInOut);
            this._timeLine.play(0, true);
        }
    }
    reset() {
        if (this._speakView) {
            this._speakView.visible = false;
        }
        if (this._finger) {
            this._finger.visible = false;
        }
        if (this._timeLine) {
            this._timeLine.destroy();
            this._timeLine = null;
        }
        this.visible = false;
    }
}
exports.default = GuideMask;
},{"../../module/guide/view/GuideSpeakView":63,"../event/EventType":19,"../event/EventsMgr":20,"../layer/LayerMgr":23}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GuideMask_1 = require("./GuideMask");
const LayerMgr_1 = require("../layer/LayerMgr");
const EventsMgr_1 = require("../event/EventsMgr");
const EventType_1 = require("../event/EventType");
const GlobalData_1 = require("../db/GlobalData");
const HallControl_1 = require("../../module/hall/HallControl");
/**
 * 新手引导
 */
class GuideMgr {
    constructor() {
        this._guideStep = 1;
        /** 是否在进行新手流程 */
        this.isGuide = false;
    }
    setup() {
        this._guideLen = GlobalData_1.default.getAllValue(GlobalData_1.default.GuideVO).length;
        if (this._guideStep < 0 || this._guideStep >= this._guideLen)
            return;
        this._maskView = new GuideMask_1.default();
        this._maskView.visible = false;
        LayerMgr_1.default.Ins.guideLayer.addChild(this._maskView);
        EventsMgr_1.default.Ins.addListener(EventType_1.default.GUIDE_NEXT_STEP, this.onNextStep, this);
        this.onNextStep();
    }
    onNextStep() {
        if (this._maskView == null || this._guideStep < 0 || this._guideStep > this._guideLen) {
            this.isGuide = false;
            if (this._maskView)
                this._maskView.reset();
            return;
        }
        this._maskView.visible = true;
        this._guideVO = GlobalData_1.default.getData(GlobalData_1.default.GuideVO, this._guideStep);
        if (this._guideVO) {
            if (this.isNextStep()) {
                this.isGuide = true;
                this._maskView.visible = true;
                if (this._guideVO.isForce) {
                    this._maskView.drawCliclAreaSize({ x: this._guideVO.clickAreaParam[0], y: this._guideVO.clickAreaParam[1], w: this._guideVO.clickAreaParam[2], h: this._guideVO.clickAreaParam[3] });
                }
                if (this._guideVO.speakParam.length > 0) {
                    this._maskView.showSpeakView(this._guideVO.speakContent, { x: this._guideVO.speakParam[0], y: this._guideVO.speakParam[1] });
                }
                if (this._guideVO.fingerParam.length > 0) {
                    this._maskView.showFigner({ x: this._guideVO.fingerParam[0], y: this._guideVO.fingerParam[1] }, this._guideVO.fingerRotation, this._guideVO.fingerEffectType);
                }
                //特殊要求
                switch (this._guideStep) {
                    case 1: //第一次购买英雄
                        break;
                    case 2: //第一次合成英雄
                        break;
                }
            }
            else {
                return;
            }
        }
        else {
            this.isGuide = false;
            this._maskView.reset();
            console.log("@David 步骤ID无法找到表中对应数据  step：", this._guideStep);
            return;
        }
        this._guideStep++;
    }
    /** 是否可以进入下一步骤 */
    isNextStep() {
        switch (this._guideVO.type) {
            case GUIDE_TYPE.PASS:
                return true;
            case GUIDE_TYPE.USER_LEVEL:
                break;
            case GUIDE_TYPE.HERO_LEVEL:
                break;
            case GUIDE_TYPE.HERO_COUNT:
                if (HallControl_1.default.Ins.Model.heroCount >= this._guideVO.condition) {
                    this._maskView.reset();
                    return true;
                }
                break;
            default:
                return false;
        }
        return false;
    }
    get guideStep() {
        return this._guideStep;
    }
    set guideStep(value) {
        this._guideStep = value;
    }
    static get Ins() {
        if (!this._instance) {
            this._instance = new GuideMgr();
        }
        return this._instance;
    }
}
exports.default = GuideMgr;
var GUIDE_TYPE;
(function (GUIDE_TYPE) {
    GUIDE_TYPE[GUIDE_TYPE["PASS"] = 0] = "PASS";
    /** 用户等级 */
    GUIDE_TYPE[GUIDE_TYPE["USER_LEVEL"] = 1] = "USER_LEVEL";
    /** 英雄等级 */
    GUIDE_TYPE[GUIDE_TYPE["HERO_LEVEL"] = 2] = "HERO_LEVEL";
    /** 英雄数量 */
    GUIDE_TYPE[GUIDE_TYPE["HERO_COUNT"] = 3] = "HERO_COUNT";
})(GUIDE_TYPE || (GUIDE_TYPE = {}));
},{"../../module/hall/HallControl":64,"../db/GlobalData":7,"../event/EventType":19,"../event/EventsMgr":20,"../layer/LayerMgr":23,"./GuideMask":21}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Layer_1 = require("./base/Layer");
const MaskLayer_1 = require("./base/MaskLayer");
const PointUtils_1 = require("../utils/PointUtils");
const EffectUtil_1 = require("../utils/EffectUtil");
class LayerMgr {
    constructor() {
        this._layers = [];
    }
    get layers() {
        return this._layers;
    }
    /** 当前的鼠标位置 X */
    static get mouseX() {
        return Laya.stage.mouseX / LayerMgr.adaptScaleX;
    }
    /** 当前的鼠标位置 Y */
    static get mouseY() {
        return Laya.stage.mouseY / LayerMgr.adaptScaleY;
    }
    /** 获取对象的实际舞台变形数据 */
    static getRealStageRect(target) {
        let loc = PointUtils_1.default.localToGlobal(target);
        let rect = new Laya.Rectangle(loc.x * LayerMgr.adaptScale + this.left, loc.y * LayerMgr.adaptScale + this.top, target.width * LayerMgr.adaptScale, target.height * LayerMgr.adaptScale);
        let scaleFactor = Laya.stage.designWidth / Laya.Browser.clientWidth;
        rect.x = Math.round(rect.x / scaleFactor);
        rect.y = Math.round(rect.y / scaleFactor);
        rect.width = Math.round(rect.width / scaleFactor);
        rect.height = Math.round(rect.height / scaleFactor);
        return rect;
    }
    // prettier-ignore
    initLayer(container, designWidth, designHeight) {
        let pixelRatio = Laya.Browser.pixelRatio;
        let clientWidth = Laya.Browser.clientWidth * pixelRatio;
        let clientHeight = Laya.Browser.clientHeight * pixelRatio;
        let adaptScaleX = clientWidth / designWidth;
        let adaptScaleY = clientHeight / designHeight;
        let adaptScale = Math.min(adaptScaleX, adaptScaleY);
        let stageWidth = designWidth * adaptScaleX;
        let stageHeight = designHeight * adaptScaleY;
        let top = 0;
        let left = 0;
        if (adaptScale === adaptScaleX) {
            top = (stageHeight - designHeight * adaptScale) * 0.5;
        }
        else {
            left = (stageWidth - designWidth * adaptScale) * 0.5;
        }
        container.width = stageWidth;
        container.height = stageHeight;
        container.on(Laya.Event.CLICK, this, (e) => {
            EffectUtil_1.default.playBoneEffect("ui_hit_03", { x: e.stageX, y: e.stageY }, container);
        });
        LayerMgr.stageDesignWidth = designWidth;
        LayerMgr.stageDesignHeight = designHeight;
        LayerMgr.clientWidth = Laya.Browser.clientWidth;
        LayerMgr.clientHeight = Laya.Browser.clientHeight;
        LayerMgr.adaptScaleX = adaptScaleX;
        LayerMgr.adaptScaleY = adaptScaleY;
        LayerMgr.adaptScale = adaptScale;
        LayerMgr.pixelRatio = pixelRatio;
        LayerMgr.top = top;
        LayerMgr.left = left;
        LayerMgr.clientTop = (top / pixelRatio);
        LayerMgr.clientLeft = (left / pixelRatio);
        // console.log(StringTools.wrapValueObjects(["designWidth", "designHeight"],[designWidth, designHeight]));
        // console.log(StringTools.wrapValueObjects(["clientWidth", "clientHeight"],[clientWidth, clientHeight]));
        // console.log(StringTools.wrapValueObjects(["adaptScaleX", "adaptScaleY", "pixelRatio"],[adaptScaleX, adaptScaleY, pixelRatio]));
        // console.log(StringTools.wrapValueObjects(["top", "left"], [top, left]));
        let idx = 0;
        this.renderLayer = this.createLayer(idx++, "renderLayer", container);
        this.navLayer = this.createLayer(idx++, "navLayer", container);
        this.flyLayer = this.createLayer(idx++, "flyLayer", container);
        this.frameLayer = this.createMaskLayer(idx++, "frameLayer", container);
        this.subFrameLayer = this.createMaskLayer(idx++, "subFrameLayer", container);
        this.alertLayer = this.createMaskLayer(idx++, "alertLayer", container);
        this.screenEffectLayer = this.createLayer(idx++, "screenEffectLayer", container);
        this.rollMessageLayer = this.createLayer(idx++, "rollMessageLayer", container);
        this.guideLayer = this.createLayer(idx++, "guideLayer", container);
        this.smallLoadingLayer = this.createMaskLayer(idx++, "smallLoadingLayer", container);
        this.noteLayer = this.createLayer(idx++, "noteLayer", container);
        this.debugLayer = this.createLayer(idx++, "debugLayer", container);
        for (let layer of this._layers) {
            layer.pos(left, 0);
            layer.scale(adaptScaleX, adaptScaleY);
        }
    }
    createLayer(index, name, container) {
        this._layers.push(container.addChild(new Layer_1.default(index, name)));
        return this._layers[this._layers.length - 1];
    }
    createMaskLayer(index, name, container) {
        this._layers.push(container.addChild(new MaskLayer_1.default(index, name)));
        return this._layers[this._layers.length - 1];
    }
    static get Ins() {
        if (!this._instance) {
            this._instance = new LayerMgr();
        }
        return this._instance;
    }
}
/** Laya.stage 的设计宽度，一般为人为设定 */
LayerMgr.stageDesignWidth = 0;
/** Laya.stage 的设计高度，一般为人为设定 */
LayerMgr.stageDesignHeight = 0;
/** Laya.stage 的设备宽度，一般根据机器自动设定 */
LayerMgr.clientWidth = 0;
/** Laya.stage 的设备高度，一般根据机器自动设定 */
LayerMgr.clientHeight = 0;
/** Laya.stage.width 针对设备的适应倍数 */
LayerMgr.adaptScaleX = 0;
/** Laya.stage.height 针对设备的适应倍数 */
LayerMgr.adaptScaleY = 0;
/** LayerMgr._layers 针对设备的适应倍数 */
LayerMgr.adaptScale = 0;
/** 设备像素倍率 */
LayerMgr.pixelRatio = 1;
/** 对设备适应后，LayerMgr._layers 距离屏幕顶部的距离 */
LayerMgr.top = 0;
/** 对设备适应后，LayerMgr._layers 距离屏幕左侧的距离 */
LayerMgr.left = 0;
/** 设备Top，距离屏幕顶部的真实屏幕距离 */
LayerMgr.clientTop = 0;
/** 设备Left，距离屏幕左侧的真实屏幕距离 */
LayerMgr.clientLeft = 0;
exports.default = LayerMgr;
},{"../utils/EffectUtil":43,"../utils/PointUtils":45,"./base/Layer":24,"./base/MaskLayer":25}],24:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Layer extends Laya.Sprite {
    get layerId() {
        return this._layerId;
    }
    constructor(layerId, $name = null) {
        super();
        this._layerId = layerId;
        this.mouseEnabled = true;
        this.mouseThrough = true;
        this.name = $name;
    }
    getLayerId() {
        return 0;
    }
}
exports.default = Layer;
},{}],25:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Layer_1 = require("./Layer");
const LayerEvent_1 = require("../event/LayerEvent");
const LayerMgr_1 = require("../LayerMgr");
class MaskLayer extends Layer_1.default {
    constructor(layerId, $name = null) {
        super(layerId, $name);
        this.initMask();
        this._handlers = [];
        this._maskEnabled = true;
        this._useAnimation = true;
    }
    set maskEnabled(value) {
        this._maskEnabled = value;
        if (value) {
            if (this.numChildren > 0) {
                super.addChildAt(this._mask, 0);
            }
        }
        else {
            this._mask.removeSelf();
        }
    }
    set maskAlpha(value) {
        this._mask.alpha = value;
    }
    set useAnimation(value) {
        this._useAnimation = value;
    }
    get animationComplete() {
        return this._animationComplete;
    }
    /**
     * 添加的回调只会触发，一般用来关闭已打开的视图窗口
     * @param caller
     * @param listener
     * @param args
     * @param maskAlpha
     */
    addChildWithMaskCall(caller, listener, args = null, maskAlpha = MaskLayer.DEFAULT_MASK_ALPHA) {
        this.maskEnabled = true;
        if (maskAlpha !== MaskLayer.DEFAULT_MASK_ALPHA) {
            this._mask.alpha = maskAlpha;
        }
        this.addChild(caller);
        this._handlers.push(Laya.Handler.create(caller, listener, args));
    }
    addChildWithCustomMask(customMask, caller, listener, args = null) {
        if (!customMask) {
            return;
        }
        this.maskEnabled = true;
        this._usingCustomMask = true;
        this._customMask = customMask;
        if (this._customMask.parent) {
            this._customMaskParent = this._customMask.parent;
            this._customMaskIndex = this._customMask.parent.getChildIndex(this._customMask);
        }
        this._mask.alpha = 0;
        this.addChild(caller);
        this._handlers.push(Laya.Handler.create(caller, listener, args));
    }
    addChild(node) {
        this.superAddChild(node);
        if (this._usingCustomMask && this._customMask) {
            super.addChildAt(this._customMask, 0);
        }
        if (this._maskEnabled) {
            super.addChildAt(this._mask, 0);
        }
        this.event(LayerEvent_1.default.CHILD_ADDED, this.numChildren);
        return node;
    }
    removeChild(node) {
        super.removeChild(node);
        let sp = node;
        if (sp) {
            if (sp.layer_tween) {
                sp.layer_tween.complete();
                sp.scale(sp.layer_origin_scale.x, sp.layer_origin_scale.y);
                delete sp.layer_tween;
            }
        }
        if (this.numChildren === 2 && this._usingCustomMask) {
            if (this._customMask) {
                if (this._customMaskParent) {
                    this._customMaskParent.addChildAt(this._customMask, this._customMaskIndex);
                }
                this._usingCustomMask = false;
                this._customMask = null;
                this._customMaskParent = null;
                this._customMaskIndex = 0;
            }
        }
        if (this.numChildren === 1 && this.getChildAt(0) === this._mask) {
            super.removeChild(this._mask);
            this._animationComplete = false;
            this._mask.alpha = MaskLayer.DEFAULT_MASK_ALPHA;
        }
        this.event(LayerEvent_1.default.CHILD_REMOVED, this.numChildren);
        return node;
    }
    initMask() {
        this._mask = new Laya.Sprite();
        this._mask.graphics.clear();
        this._mask.graphics.drawRect(0, 0, LayerMgr_1.default.stageDesignWidth, LayerMgr_1.default.stageDesignHeight, "#000000");
        this._mask.alpha = MaskLayer.DEFAULT_MASK_ALPHA;
        this._mask.size(LayerMgr_1.default.stageDesignWidth, LayerMgr_1.default.stageDesignHeight);
        this._mask.on(Laya.Event.CLICK, this, this.applyClick);
    }
    superAddChild(node, index) {
        if (this._useAnimation && !this._animationComplete) {
            let sp = node;
            if (sp && !sp.layer_tween) {
                if (!sp.layer_origin_scale) {
                    sp.layer_origin_scale = new Laya.Point(sp.scaleX, sp.scaleY);
                }
                let comp = node;
                let size = new Laya.Point();
                if (comp) {
                    size.setTo(sp.displayWidth, sp.displayHeight);
                }
                else {
                    let rect = sp.getBounds();
                    size.setTo(rect.width, rect.height);
                }
                sp.layer_tween = Laya.Tween.from(node, { x: sp.x + (size.x >> 1), y: sp.y + (size.y >> 1), scaleX: 0, scaleY: 0 }, 300, Laya.Ease.backInOut, Laya.Handler.create(this, () => {
                    this._animationComplete = true;
                    this.event(LayerEvent_1.default.LAYER_ANIMATION_COMPLETE, this._animationComplete);
                }));
            }
        }
        this._mask.off(Laya.Event.CLICK, this, this.applyClick);
        Laya.timer.once(1000 * 2, this, () => {
            this._mask.on(Laya.Event.CLICK, this, this.applyClick);
        });
        if (index) {
            super.addChildAt(node, index);
        }
        else {
            super.addChild(node);
        }
        return node;
    }
    applyClick() {
        if (this._handlers.length) {
            this._handlers.pop().run();
        }
    }
}
MaskLayer.DEFAULT_MASK_ALPHA = 0.7;
exports.default = MaskLayer;
},{"../LayerMgr":23,"../event/LayerEvent":26,"./Layer":24}],26:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class LayerEvent {
}
LayerEvent.CHILD_ADDED = "CHILD_ADDED";
LayerEvent.CHILD_REMOVED = "CHILD_REMOVED";
LayerEvent.LAYER_ANIMATION_COMPLETE = "LAYER_ANIMATION_COMPLETE";
exports.default = LayerEvent;
},{}],27:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const LayerMgr_1 = require("../layer/LayerMgr");
const AlignUtils_1 = require("../utils/AlignUtils");
const MsgTipsView_1 = require("../../module/common/view/MsgTipsView");
class MsgMgr extends Laya.Script {
    constructor() { super(); }
    /** 显示提示消息 */
    showMsg(content) {
        let tipView = Laya.Pool.getItemByClass("MsgTipsView", MsgTipsView_1.default);
        tipView.dataSource = content;
        tipView.visible = content == "测试测试测试测试测试" ? false : true;
        AlignUtils_1.default.setToScreenGoldenPos(tipView);
        LayerMgr_1.default.Ins.rollMessageLayer.addChild(tipView);
        Laya.Tween.to(tipView, { x: tipView.x, y: (tipView.y - 100), alpha: 0 }, 3000, Laya.Ease.cubicInOut, Laya.Handler.create(this, ($tipView) => {
            Laya.Tween.clearTween($tipView);
            $tipView.removeSelf();
            $tipView.alpha = 1;
            Laya.Pool.recover("MsgTipsView", $tipView);
        }, [tipView]));
    }
    /** 显示提示消息 */
    showMsg1(content) {
        var tipBarSp = new Laya.Image("images/component/tip_bg.png");
        AlignUtils_1.default.setToScreenGoldenPos(tipBarSp);
        LayerMgr_1.default.Ins.rollMessageLayer.addChild(tipBarSp);
        tipBarSp.zOrder = 1001;
        tipBarSp.width = 500;
        tipBarSp.height = 80;
        tipBarSp.pivot(tipBarSp.width / 2, tipBarSp.height / 2);
        tipBarSp.sizeGrid = "10,10,10,10";
        var coinLabel = new Laya.Label();
        coinLabel.text = content;
        coinLabel.fontSize = 40;
        coinLabel.color = "#ffffff";
        coinLabel.width = tipBarSp.width * 0.98;
        //设置文本水平居中
        coinLabel.align = "center";
        //设置文本垂直居中
        coinLabel.valign = "middle";
        //设置自动换行
        coinLabel.wordWrap = true;
        //重置背景高度
        tipBarSp.height = coinLabel.height + 20;
        tipBarSp.addChild(coinLabel);
        coinLabel.pos(tipBarSp.width / 2, tipBarSp.height / 2);
        coinLabel.pivot(coinLabel.width / 2, coinLabel.height / 2);
        Laya.Tween.to(tipBarSp, { x: tipBarSp.x, y: (tipBarSp.y - 100), alpha: 0 }, 3000, Laya.Ease.cubicInOut, Laya.Handler.create(this, (tipBarSp) => {
            tipBarSp.removeSelf();
        }, [coinLabel]));
    }
    static get Ins() {
        if (MsgMgr._instance == null) {
            MsgMgr._instance = new MsgMgr();
        }
        return MsgMgr._instance;
    }
}
exports.default = MsgMgr;
},{"../../module/common/view/MsgTipsView":58,"../layer/LayerMgr":23,"../utils/AlignUtils":40}],28:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class PoolMgr {
    constructor() {
        this._instances = {};
    }
    get(classDefinition, name) {
        if (!name) {
            name = classDefinition.__className;
        }
        let instances = this._instances[name];
        if (!instances) {
            instances = [];
            this._instances[name] = instances;
        }
        if (instances.length > 0) {
            return instances.pop();
        }
        return new classDefinition();
    }
    return(instance, name) {
        if (!name) {
            name = instance.__proto__.__className;
        }
        let instances = this._instances[name];
        if (!instances) {
            instances = [];
            this._instances[name] = instances;
        }
        instances.push(instance);
        return instance;
    }
    static get Ins() {
        if (PoolMgr._instance == null) {
            PoolMgr._instance = new PoolMgr();
        }
        return PoolMgr._instance;
    }
}
exports.default = PoolMgr;
},{}],29:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ShareMgr_1 = require("./ShareMgr");
const HallControl_1 = require("../../module/hall/HallControl");
const EventsMgr_1 = require("../event/EventsMgr");
const EventType_1 = require("../event/EventType");
const SystemConfig_1 = require("../../module/hall/config/SystemConfig");
/**
 * 红点管理类
 */
class RedPointMgr {
    updateRedPoint() {
        EventsMgr_1.default.Ins.dispatch(EventType_1.default.UPDATE_SYSTEM_RED_POINT, SystemConfig_1.default.SIGN, this.isShowSignRedPoint);
        EventsMgr_1.default.Ins.dispatch(EventType_1.default.UPDATE_SYSTEM_RED_POINT, SystemConfig_1.default.TASK, this.isShowTaskRedPoint);
        EventsMgr_1.default.Ins.dispatch(EventType_1.default.UPDATE_SYSTEM_RED_POINT, SystemConfig_1.default.LUCK_PRIZE, this.isShowLuckPrizeRedPoint);
        EventsMgr_1.default.Ins.dispatch(EventType_1.default.UPDATE_SYSTEM_RED_POINT, SystemConfig_1.default.FOLLOW, this.isShowFollowRedPoint);
    }
    /** 是否显示商店红点 */
    get isShowShopRedPoint() {
        return ((ShareMgr_1.default.Ins.getAdTimes(11) + ShareMgr_1.default.Ins.getShareTimes(11)) > 0) && (HallControl_1.default.Ins.Model.heroLevel >= 6 && HallControl_1.default.Ins.Model.heroLevel < HallControl_1.default.Ins.Model.heroMaxLevel);
    }
    /** 移除商店红点 */
    removeCarShopRedPoin() {
        EventsMgr_1.default.Ins.dispatch(EventType_1.default.REMOVE_SHOP_REN_POINT, true);
    }
    /** 是否显示任务红点 */
    get isShowTaskRedPoint() {
        return HallControl_1.default.Ins.Model.showTaskRedPoint;
    }
    /** 移除任务红点 */
    removeTaskRedPoint() {
        HallControl_1.default.Ins.Model.showTaskRedPoint = false;
        EventsMgr_1.default.Ins.dispatch(EventType_1.default.UPDATE_SYSTEM_RED_POINT, SystemConfig_1.default.TASK, false);
    }
    /** 是否显示转盘红点 */
    get isShowLuckPrizeRedPoint() {
        return HallControl_1.default.Ins.Model.showLuckPrizeRedPoint;
    }
    /** 移除转盘红点 */
    removeLuckPrizeRedPoint() {
        HallControl_1.default.Ins.Model.showLuckPrizeRedPoint = false;
        EventsMgr_1.default.Ins.dispatch(EventType_1.default.UPDATE_SYSTEM_RED_POINT, SystemConfig_1.default.LUCK_PRIZE, false);
    }
    /** 是否显示每日签到红点 */
    get isShowSignRedPoint() {
        return HallControl_1.default.Ins.Model.showDailySignRedPoint;
    }
    /** 移除签到红点 */
    removeSignRedPoint() {
        HallControl_1.default.Ins.Model.showDailySignRedPoint = false;
        EventsMgr_1.default.Ins.dispatch(EventType_1.default.UPDATE_SYSTEM_RED_POINT, SystemConfig_1.default.SIGN, false);
    }
    /** 是否显示关注红点 */
    get isShowFollowRedPoint() {
        return HallControl_1.default.Ins.Model.showFollowRedPoint;
    }
    /** 移除关注红点 */
    removeFollowRedPoint() {
        HallControl_1.default.Ins.Model.showFollowRedPoint = false;
        EventsMgr_1.default.Ins.dispatch(EventType_1.default.UPDATE_SYSTEM_RED_POINT, SystemConfig_1.default.FOLLOW, false);
    }
    static get Ins() {
        if (RedPointMgr._instance == null) {
            RedPointMgr._instance = new RedPointMgr();
        }
        return RedPointMgr._instance;
    }
}
exports.default = RedPointMgr;
},{"../../module/hall/HallControl":64,"../../module/hall/config/SystemConfig":65,"../event/EventType":19,"../event/EventsMgr":20,"./ShareMgr":30}],30:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const HallControl_1 = require("../../module/hall/HallControl");
const MathUtil_1 = require("../utils/MathUtil");
const HttpMgr_1 = require("../net/HttpMgr");
const MsgMgr_1 = require("./MsgMgr");
const PlayerMgr_1 = require("../player/PlayerMgr");
const EventsMgr_1 = require("../event/EventsMgr");
const EventType_1 = require("../event/EventType");
const AppConfig_1 = require("../config/AppConfig");
class ShareMgr extends Laya.Script {
    constructor() {
        super();
        this._shareFailedTimes = 0; //分享失败保底
        this._isOpenShareAd = false; //打开视频分享
        this.shareSwitchOpen = false; //分享开关打开
        this._model = HallControl_1.default.Ins.Model;
    }
    /** 请求分享/视频 */
    showShareOrAdv(callback = null, type = 0, isTask = false, isGroupShare = false) {
        if (AppConfig_1.default.isDebug) {
            callback && callback();
            return;
        }
        if (this._isOpenShareAd) {
            return 0;
        }
        this._isOpenShareAd = true;
        Laya.stage.timerOnce(1000, this, () => {
            this._isOpenShareAd = false;
        });
        //是否优先视频广告
        if (this.getAdTimes(type) > 0) {
            // SDKMgr.Ins.showVideoAd((_res: any) => {
            //     if (_res && _res.isEnded || _res === undefined) {
            //         this.decreAdTimes(type);
            //         let adKey: string = "ad";
            //         if (type == 10) {
            //             adKey = "ad_acce";
            //         } else if (type == 11) {
            //             adKey = "ad_free_car";
            //         } else if (type == 12) {
            //             adKey = "ad_no_money";
            //         }
            //         HttpMgr.Ins.requestShareAdFinish(adKey);
            //         callback && callback();
            //     }
            // }, () => {
            //无视频回调
            this._model.hasVideoAd = false;
            this._isOpenShareAd = false;
            this.showShareOrAdv(callback, type, isTask, isGroupShare);
            // }, this.isShareEnable);
            return 0;
        }
        switch (type) {
            case 1: //广告无限次数
                // SDKMgr.Ins.showVideoAd((_res: any) => {
                //     if (_res && _res.isEnded || _res === undefined) {
                //         callback && callback();
                //         HttpMgr.Ins.requestShareAdFinish("ad_other", _res);
                //     }
                // }, () => {
                //无视频回调
                this._model.hasVideoAd = false;
                this._isOpenShareAd = false;
                this.showShareOrAdv(callback, 0, isTask, isGroupShare);
                // });
                break;
            case 10: //加速
                if (this.getShareTimes(type) < 1) {
                    MsgMgr_1.default.Ins.showMsg("今日分享次数已用完");
                    return 1;
                }
                this.toShare((_res) => {
                    this.decreShareTimes(type);
                    HttpMgr_1.default.Ins.requestShareAdFinish("share_acce", _res);
                    callback && callback();
                }, isTask, isGroupShare);
                break;
            case 11: //免费的车
                if (this.getShareTimes(type) < 1) {
                    MsgMgr_1.default.Ins.showMsg("今日分享次数已用完");
                    return 1;
                }
                this.toShare((_res) => {
                    this.decreShareTimes(type);
                    HttpMgr_1.default.Ins.requestShareAdFinish("share_free_car", _res);
                    callback && callback();
                }, isTask, isGroupShare);
                break;
            case 12: //无金币
                if (this.getShareTimes(type) < 1) {
                    MsgMgr_1.default.Ins.showMsg("今日分享次数已用完");
                    return 1;
                }
                this.toShare((_res) => {
                    MsgMgr_1.default.Ins.showMsg("求助已发出");
                    Laya.timer.once(30000, this, () => {
                        callback && callback();
                    });
                    this.decreShareTimes(type);
                    HttpMgr_1.default.Ins.requestShareAdFinish("share_no_money", _res);
                }, isTask, isGroupShare);
                break;
            default: //分享无限次数
                this.toShare((_res) => {
                    callback && callback();
                    HttpMgr_1.default.Ins.requestShareAdFinish("share_other", _res);
                }, isTask, isGroupShare);
                break;
        }
        return 0;
    }
    /** 分享广告可点击次数 */
    getAdTimes(type) {
        if (this._model && this._model.shareAdTimes && this._model.hasVideoAd) {
            if (type == 10) {
                return MathUtil_1.default.parseInt(this._model.shareAdTimes.ad_acce_num);
            }
            else if (type == 11) {
                return MathUtil_1.default.parseInt(this._model.shareAdTimes.ad_free_car_num);
            }
            else if (type == 12) {
                return MathUtil_1.default.parseInt(this._model.shareAdTimes.ad_no_money_num);
            }
        }
        return 0;
    }
    /** 分享剩余次数 */
    getShareTimes(type) {
        if (this._model && this._model.shareAdTimes) {
            if (type == 10) {
                return MathUtil_1.default.parseInt(this._model.shareAdTimes.share_acce_num);
            }
            else if (type == 11) {
                return MathUtil_1.default.parseInt(this._model.shareAdTimes.share_free_car_num);
            }
            else if (type == 12) {
                return MathUtil_1.default.parseInt(this._model.shareAdTimes.share_no_money_num);
            }
        }
        return 0;
    }
    /** 减少分享广告可点击次数 */
    decreAdTimes(type) {
        if (this._model && this._model.shareAdTimes) {
            if (type == 10) {
                this._model.shareAdTimes.ad_acce_num--;
            }
            else if (type == 11) {
                this._model.shareAdTimes.ad_free_car_num--;
            }
            else if (type == 12) {
                this._model.shareAdTimes.ad_no_money_num--;
            }
            else {
                this._model.shareAdTimes.ad_num--;
            }
        }
        console.log("@David 减少分享广告可点击次数:", this._model.shareAdTimes);
    }
    /** 减少分享可点击次数 */
    decreShareTimes(type) {
        if (this._model.shareAdTimes) {
            if (type == 10) {
                this._model.shareAdTimes.share_acce_num--;
            }
            else if (type == 11) {
                this._model.shareAdTimes.share_free_car_num--;
            }
            else if (type == 12) {
                this._model.shareAdTimes.share_no_money_num--;
            }
        }
        console.log("@David 减少分享可点击次数:", this._model.shareAdTimes);
    }
    /** 分享或广告开关 */
    isAdStage(type) {
        return (this.getAdTimes(type) > 0);
    }
    //请求分享
    toShare(callback = null, isTask = false, isGroupShare = false) {
        HttpMgr_1.default.Ins.requestShareSubject((_res) => {
            if (!_res) {
                MsgMgr_1.default.Ins.showMsg("今日分享次数已用完");
                return;
            }
            let shareCfg = { imageUrl: _res.image, content: _res.describe, id: _res.id };
            let queryData = null;
            if (isTask) {
                queryData = "userId=" + PlayerMgr_1.default.Ins.Info.userId + "&shareId=" + shareCfg.id + "&shareType=task";
            }
            else {
                queryData = "userId=" + PlayerMgr_1.default.Ins.Info.userId + "&shareId=" + shareCfg.id + "&shareType=share";
            }
            //重返游戏
            let curTime = (new Date()).getTime() / 1000;
            let isAutoShare = true;
            EventsMgr_1.default.Ins.addListener(EventType_1.default.COME_BACK_GAME, (data) => {
                let backTime = (new Date()).getTime() / 1000;
                let leaveTime = backTime - curTime;
                if (isAutoShare && leaveTime > 2.3) {
                    if (this._shareFailedTimes > 1 || Math.random() > 0.5) {
                        this._shareFailedTimes = 0;
                        callback && callback(shareCfg.id);
                        HttpMgr_1.default.Ins.requestShareFinish(shareCfg.id);
                    }
                    else {
                        this._shareFailedTimes++;
                        MsgMgr_1.default.Ins.showMsg("分享失败，请尝试重新分享");
                    }
                }
            }, this);
            // SDKMgr.Ins.wxOnShare({
            //     title: shareCfg.content,
            //     imageUrl: shareCfg.imageUrl,
            //     query: queryData,
            //     isGroupShare: isGroupShare,
            //     success: function (_res) {
            //     },
            //     fail: function () {
            //         console.log("转发失败!!!");
            //     }
            // })
        });
    }
    get isShareEnable() {
        return this.shareSwitchOpen;
    }
    static get Ins() {
        if (ShareMgr._instance == null) {
            ShareMgr._instance = new ShareMgr();
        }
        return ShareMgr._instance;
    }
}
exports.default = ShareMgr;
},{"../../module/hall/HallControl":64,"../config/AppConfig":4,"../event/EventType":19,"../event/EventsMgr":20,"../net/HttpMgr":31,"../player/PlayerMgr":33,"../utils/MathUtil":44,"./MsgMgr":27}],31:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PathConfig_1 = require("../config/PathConfig");
const HttpRequestHelper_1 = require("./HttpRequestHelper");
const MsgMgr_1 = require("../msg/MsgMgr");
const EventsMgr_1 = require("../event/EventsMgr");
const EventType_1 = require("../event/EventType");
const PlayerInfo_1 = require("../player/data/PlayerInfo");
const StorageUtil_1 = require("../utils/StorageUtil");
class HttpMgr extends Laya.Script {
    /** 元宝购车订单 */
    requestDiamondBuyOrder(diamond, callback, type = 0) {
        let strKind = 'buy_car';
        if (type == 1)
            strKind = 'diamond_acce';
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v1/diamond/order/' + diamond + '&kind=' + strKind,
            success: function (res) {
                console.log("@David 元宝购车订单", res);
                callback && callback(res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 元宝购车 */
    requestDiamondBuy(orderId, callback) {
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v1/diamond/buy_car/' + orderId,
            success: function (res) {
                console.log("@David 元宝购车", res);
                callback && callback(res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 请求等级奖励元宝 */
    requestLevelPrizeDiamond(level, diamond, callback) {
        let dataString = 'level=' + level + '&diamond=' + diamond;
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v2/userinfo/upgrade_reward_diamond',
            method: 'Post',
            data: dataString,
            success: function (res) {
                console.log("@David 请求等级奖励元宝:", res);
                callback && callback(res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 拉取分享信息 */
    requestTaskInfo(callback) {
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v1/task/info',
            success: function (res) {
                console.log("@David 拉取分享信息:", res);
                callback && callback(res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 拉取任务奖励 */
    requestTaskPrize(itemId, callback) {
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v1/task/rewards/' + itemId,
            success: function (res) {
                console.log("@David 拉取任务奖励:", res);
                callback && callback(res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 拉取分享信息 */
    requestShareInfo(callback) {
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v1/share/friend_num',
            success: function (res) {
                console.log("@David 拉取分享信息:", res);
                callback && callback(res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 拉取任务奖励 */
    requestTaskRewardPrize(itemId, callback) {
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v1/share/friend_rewards/' + itemId,
            success: function (res) {
                console.log("@David 拉取任务奖励", res);
                callback && callback(res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 拉取每日签到奖励 */
    requestDaySignPrize(itemId, callback) {
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v1/sign/commit/' + itemId,
            success: function (res) {
                callback && callback(res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 拉取签到信息 */
    requestSignInfo(callback) {
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v1/sign/info',
            success: function (res) {
                console.log("@David 拉取签到信息", res);
                callback && callback(res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 拉取公众二维码 */
    requestOfficialAccData(callback) {
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v1/subscription/get_info',
            success: function (res) {
                console.log("requestOfficialAccData", res);
                callback && callback(res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 拉取公众奖励 */
    requestAccountRewardPrize() {
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v1/subscription/rewards',
            success: function (res) {
                console.log("requestPrize", res);
                if (res.code == 1) {
                    MsgMgr_1.default.Ins.showMsg("奖励领取成功");
                    this.requestDiamondData();
                    //移除红点
                    // if (userData) {
                    //     userData.removeFollowRedPoint();
                    // }
                }
                else if (res.code == 2) {
                    MsgMgr_1.default.Ins.showMsg("未关注公众号");
                }
                else if (res.code == 3) {
                    MsgMgr_1.default.Ins.showMsg("奖励已领取");
                }
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /**刷新用户元宝数量 */
    requestDiamondData() {
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v3/userinfo/get_diamond',
            success: function (res) {
                console.log("@David 刷新用户元宝数量:", res);
                if (res) {
                    EventsMgr_1.default.Ins.dispatch(EventType_1.default.UPDATE_CURRENCY, PlayerInfo_1.default.DIAMOND, res.diamond);
                }
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 英雄数据 */
    requestCarparkData(callback) {
        let that = this;
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v3/seat/get',
            success: function (res) {
                console.log("@David 英雄数据:", res);
                callback && callback(res);
            },
            fail: function (res) {
                console.log(res);
                // CommonFun.stopWaitEffect();
                MsgMgr_1.default.Ins.showMsg("网络异常");
            }
        });
    }
    /** 每日任务统计 */
    requestDailyTaskData(taskId) {
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v1/task/progress/' + taskId,
            success: function (res) {
                console.log("requestDailyTaskData:", res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 分享广告完成 */
    requestShareAdFinish(type, shareId = 0) {
        let dataString = 'type=' + type + '&share_id=' + shareId;
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v1/operational/post_info',
            method: 'Post',
            data: dataString,
            success: function (res) {
                console.log(res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 商店数据 */
    requestCarshopData(callback) {
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v3/shop/get',
            success: function (res) {
                console.log("@David 商店数据:", res);
                callback && callback(res);
            },
            fail: function (res) {
                console.log(res);
                // CommonFun.stopWaitEffect();
                MsgMgr_1.default.Ins.showMsg("网络异常");
            }
        });
    }
    /** 分享完成 */
    requestShareFinish(shareId, encryptedData = '', iv = '', callback = null) {
        let dataString = 'share_id=' + shareId + '&encryptedData=' + encryptedData + '&iv=' + iv;
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v1/share/finish',
            method: 'Post',
            data: dataString,
            success: function (res) {
                console.log(res);
                callback && callback(res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 获取分享主题 */
    requestShareSubject(callback) {
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v1/share/to',
            success: function (res) {
                console.log(res);
                callback && callback(res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 通知服务器已领取离线收益 */
    requestNotifyServerPrize() {
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v3/userinfo/reward',
            success: function (res) {
                console.log("requestNotifyServerPrize:", res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 新老版本更新检测（防止老数据覆盖） */
    requestVersionCheck(callback) {
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v1/check/version',
            success: function (res) {
                console.log("requestVersionCheck", res);
                if (res && res.clear_flag) {
                    //清理老数据
                    StorageUtil_1.default.clearLocalData();
                }
                callback && callback(res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 新老版本清理回调 */
    requestVersionClear(callback) {
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v1/clear/user_data',
            success: function (res) {
                console.log("requestVersionClear", res);
                callback && callback(res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 用户基础数据 */
    requestUserInfoData(callback) {
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v3/userinfo/get',
            success: function (res) {
                console.log("@David 用户基础数据:", res);
                callback && callback(res);
            },
            fail: function (res) {
                console.log(res);
                MsgMgr_1.default.Ins.showMsg("网络异常");
            }
        });
    }
    /** 请求分享开关 */
    requestShareFlag(callback) {
        let that = this;
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v1/share/flag',
            success: function (res) {
                if (res) {
                    callback && callback();
                }
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 用户基础数据赋值 */
    requestUserBaseData(callback = null) {
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v2/user/info',
            success: function (res) {
                console.log("@David 用户基础数据赋值:", res);
                if (res) {
                    callback && callback(res);
                }
            },
            fail: function (res) {
                console.log("@David 用户基础数据赋值失败:", res);
            }
        });
    }
    //获取抽奖信息
    requestPrizeInfo(callback) {
        let that = this;
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v3/activity/get/roulette',
            success: function (res) {
                console.log("@David 获取抽奖信息:", res);
                callback && callback(res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 转盘抽奖 */
    requestDrawPrize(type, callback) {
        let that = this;
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v3/activity/roulette/' + type,
            success: function (res) {
                console.log("requestDrawPrize", res);
                callback && callback(res);
            },
            fail: function (res) {
                console.log(res);
                callback && callback(false);
            }
        });
    }
    /** 转盘统计 */
    requestPrizeCensus(itemId, num) {
        let dataString = 'prizeId=' + itemId + '&prizeNum=' + num;
        console.log("requestPrizeCensus:", dataString);
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v1/activity/roulette/log',
            method: 'Post',
            data: dataString,
            success: function (res) {
                console.log("requestPrizeCensus:", res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 请求世界排行数据 */
    requestWorldRankingData(callback) {
        var that = this;
        var HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v1/rank/world',
            success: function (res) {
                console.log("@David 请求世界排行数据:", res);
                callback && callback(res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 请求我的世界排行数据 */
    requestMyWorldRankData(callback) {
        var that = this;
        var HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v1/rank/my',
            success: function (res) {
                console.log("@David 请求我的世界排行数据:", res);
                callback && callback(res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 请求收益周排行数据 */
    requestIncomeRankingData(callback) {
        var that = this;
        var HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v1/rank/week',
            success: function (res) {
                console.log("@David 请求收益周排行数据:", res);
                callback && callback(res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 请求我的收益周排行数据 */
    requestMyIncomeRankData(callback) {
        var that = this;
        var HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v1/rank/my',
            success: function (res) {
                console.log("@David 请求我的收益周排行数据:", res);
                callback && callback(res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 发送保存新手步骤 */
    requestGuideStep(step) {
        var that = this;
        var HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v3/novice/' + step,
            success: function (res) {
                console.log("@David 发送保存新手步骤成功");
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    //提交用户名称位置等信息
    requestSaveWxUserinfoData(_nickName, _avatarUrl, _city, _gender) {
        let that = this;
        let dataString = 'nickName=' + _nickName + '&avatarUrl=' + _avatarUrl + '&city=' + _city + '&gender=' + _gender;
        console.log("requestSaveWxUserinfoData:", dataString);
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v1/userinfo/update',
            method: 'Post',
            data: dataString,
            success: function (res) {
                console.log("requestSaveWxUserinfoData2", res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    static get Ins() {
        if (HttpMgr._instance == null) {
            HttpMgr._instance = new HttpMgr();
        }
        return HttpMgr._instance;
    }
}
exports.default = HttpMgr;
},{"../config/PathConfig":5,"../event/EventType":19,"../event/EventsMgr":20,"../msg/MsgMgr":27,"../player/data/PlayerInfo":34,"../utils/StorageUtil":47,"./HttpRequestHelper":32}],32:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//数据缓存
var requestCache = {};
class HttpRequestHelper {
    constructor(_url) {
        this.baseUrl = null;
        this.baseUrl = _url;
    }
    /** http请求 */
    request(params, noToken = false) {
        console.log("@David http request==>>", params.url);
        let self = this;
        if (!params.method) {
            params.method = 'Get';
        }
        ;
        //仅缓存Get数据
        if (params.cache && params.method == 'Get') {
            var res = requestCache[params.url];
            if (res && params.success) {
                console.log("cache:" + params.url);
                params.success(res);
                return;
            }
            ;
        }
        ;
        var hr = new Laya.HttpRequest();
        hr.http.timeout = 10000;
        hr.on(Laya.Event.PROGRESS, self, (e) => {
            console.log(e);
        });
        hr.once(Laya.Event.ERROR, self, (e) => {
            console.log("@David Laya.Event.ERROR:", e);
            if (e.indexOf('401') > 0) {
                if (!noToken) {
                    // SDKMgr.Ins.wxHttpToken(self.baseUrl, (token) => {
                    // 	self.request(params, true)
                    // }, true);
                }
                ;
            }
            else {
                var res = hr.data;
                if (params && params.fail) {
                    params.fail(res);
                }
            }
        });
        hr.once(Laya.Event.COMPLETE, self, (e) => {
            var res = hr.data;
            if (res == '401') {
                if (!noToken) {
                    // SDKMgr.Ins.wxHttpToken(self.baseUrl, (token) => {
                    // 	self.request(params)
                    // }, true);
                }
                ;
            }
            else if (res == '404') {
                console.log("@David request-err: ", params.url);
            }
            else if (res == '500') {
                console.log("@David request-err: ", params.url);
            }
            else if (params.success) {
                var dataJson = res;
                var jsonObj = dataJson;
                if (dataJson) {
                    jsonObj = JSON.parse(dataJson);
                }
                requestCache[params.url] = jsonObj;
                params.success(jsonObj);
            }
            ;
        });
        // var token = SDKMgr.Ins.wxHttpToken(self.baseUrl);
        // var header = ["Content-Type", "application/x-www-form-urlencoded;charset=utf-8", "token", token];
        // if (params.method == 'Post') {
        // 	hr.send(self.baseUrl + params.url, params.data, 'POST', 'jsonp', header);
        // } else {
        // 	hr.send(self.baseUrl + params.url, null, 'GET', 'jsonp', header);
        // }
    }
}
exports.default = HttpRequestHelper;
},{}],33:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PlayerInfo_1 = require("./data/PlayerInfo");
class PlayerMgr extends Laya.Script {
    constructor() {
        super();
        this.init();
    }
    init() {
        this._info = new PlayerInfo_1.default();
    }
    set Info(value) { this._info = value; }
    get Info() { return this._info; }
    static get Ins() {
        if (PlayerMgr._instance == null) {
            PlayerMgr._instance = new PlayerMgr();
        }
        return PlayerMgr._instance;
    }
}
exports.default = PlayerMgr;
},{"./data/PlayerInfo":34}],34:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class PlayerInfo {
    constructor() {
        /** 微信用户信息 */
        this.wxUserInfo = null;
        this.wxLaunch = null;
        /** 拥有金币 */
        this.userGold = 100000;
        /** 拥有钻石 */
        this.userDiamond = 0;
        /** 用户ID */
        this.userId = 0;
        /** 用户等级 */
        this.userLevel = 1;
        /** 用户经验 */
        this.userExp = 0;
        /** 等级增长的收益 */
        this.userLevelExtraIncome = 1;
        /** 本地缓存数据 */
        this.store_key = "store_key";
        /** 每秒收益 */
        this.userIncomeSec = 0;
        /** 额外收益-战斗人数满后+10% */
        this.userExtraIncome = 1;
        /** 启动加速x2 */
        this.userAcceValue = 1;
        /** 加速时间 */
        this.userAcceTime = 0;
        /** 跑道车数量 */
        this.userRuncarCount = 0;
        /** 跑道车数量最大值 */
        this.userRuncarCountMax = 0;
    }
}
PlayerInfo.GOLD = 0;
PlayerInfo.DIAMOND = 1;
exports.default = PlayerInfo;
},{}],35:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PathConfig_1 = require("../config/PathConfig");
const GlobalData_1 = require("../db/GlobalData");
const SoundMgr_1 = require("./SoundMgr");
class BaseSound {
    constructor() {
        this.soundPath = "";
        let self = this;
        self._cache = {};
        self._loadingCache = new Array();
        Laya.timer.loop(1 * 60 * 1000, self, self.dealSoundTimer);
    }
    /**
     * 处理音乐文件的清理
     */
    dealSoundTimer() {
        let self = this;
        let currTime = Laya.Browser.now();
        let keys = Object.keys(self._cache);
        for (let i = 0, len = keys.length; i < len; i++) {
            let key = keys[i];
            if (!self.checkCanClear(key))
                continue;
            if (currTime - self._cache[key] >= SoundMgr_1.default.CLEAR_TIME) {
                delete self._cache[key];
                Laya.loader.clearRes(key);
            }
        }
    }
    /**
     * 获取Sound
     * @param key
     * @returns {egret.Sound}
     */
    getSound(key) {
        let self = this;
        self._key = key;
        let vo = GlobalData_1.default.getData(GlobalData_1.default.SoundVO, Number(key));
        if (vo == null)
            return null;
        self.soundPath = PathConfig_1.default.SOUND_PATH.replace("{0}", vo.file);
        let sound = Laya.loader.getRes(self.soundPath);
        if (sound) {
            if (self._cache[self.soundPath]) {
                self._cache[self.soundPath] = Laya.Browser.now();
            }
        }
        else {
            if (self._loadingCache.indexOf(self.soundPath) != -1) {
                return sound;
            }
            self._loadingCache.push(self.soundPath);
            Laya.loader.load([{ url: self.soundPath, type: Laya.Loader.SOUND }], Laya.Handler.create(self, () => {
                let index = self._loadingCache.indexOf(self.soundPath);
                if (index != -1) {
                    self._loadingCache.splice(index, 1);
                    self._cache[self.soundPath] = Laya.Browser.now();
                    self.loadedPlay(self._key, self.soundPath);
                }
            }, null, false));
        }
        return sound;
    }
    /**
     * 资源加载完成后处理播放，子类重写
     * @param key
     */
    loadedPlay(key, soundPath) {
    }
    /**
     * 检测一个文件是否要清除，子类重写
     * @param key
     * @returns {boolean}
     */
    checkCanClear(key) {
        return true;
    }
}
exports.default = BaseSound;
},{"../config/PathConfig":5,"../db/GlobalData":7,"./SoundMgr":38}],36:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseSound_1 = require("./BaseSound");
class SoundBG extends BaseSound_1.default {
    constructor() {
        super();
        this._currBg = "";
    }
    /**
     * 停止当前音乐
     */
    stop() {
        let self = this;
        if (self._currSoundChannel) {
            self._currSoundChannel.stop();
        }
        self._currSoundChannel = null;
        self._currSound = null;
        self._currBg = "";
    }
    /**
     * 播放某个音乐
     * @param effectName
     */
    play(effectName) {
        let self = this;
        if (self._currBg == effectName)
            return;
        self.stop();
        self._currBg = effectName;
        var sound = self.getSound(effectName);
        if (sound) {
            self.playSound(self.soundPath);
        }
    }
    /**
     * 播放
     * @param sound
     */
    playSound(soundPath) {
        let self = this;
        self._currSoundChannel = Laya.SoundManager.playMusic(soundPath, 0);
        if (self._currSoundChannel)
            self._currSoundChannel.volume = this._volume;
    }
    /**
     * 设置音量
     * @param volume
     */
    setVolume(volume) {
        let self = this;
        self._volume = volume;
        if (self._currSoundChannel) {
            self._currSoundChannel.volume = self._volume;
        }
    }
    /**
     * 资源加载完成后处理播放
     * @param key
     */
    loadedPlay(key, soundPath) {
        let self = this;
        if (self._currBg == key) {
            var sound = Laya.loader.getRes(soundPath);
            if (sound) {
                self.playSound(soundPath);
            }
        }
    }
    /**
     * 检测一个文件是否要清除
     * @param key
     * @returns {boolean}
     */
    checkCanClear(key) {
        let self = this;
        return self._currBg != key;
    }
}
exports.default = SoundBG;
},{"./BaseSound":35}],37:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseSound_1 = require("./BaseSound");
class SoundEffects extends BaseSound_1.default {
    constructor() { super(); }
    /**
     * 播放一个音效
     * @param effectName
     */
    play(effectId) {
        let sound = this.getSound(effectId);
        if (sound) {
            this.playSound(this.soundPath);
        }
    }
    /**
     * 播放
     * @param sound
     */
    playSound(soundPath) {
        let channel = Laya.SoundManager.playSound(soundPath, 1);
        if (channel)
            channel.volume = this._volume;
    }
    /**
     * 设置音量
     * @param volume
     */
    setVolume(volume) {
        this._volume = volume;
    }
    /**
     * 资源加载完成后处理播放
     * @param key
     */
    loadedPlay(key, soundPath) {
        let sound = Laya.loader.getRes(soundPath);
        if (sound) {
            this.playSound(this.soundPath);
        }
    }
}
exports.default = SoundEffects;
},{"./BaseSound":35}],38:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SoundEffects_1 = require("./SoundEffects");
const SoundBG_1 = require("./SoundBG");
class SoundMgr {
    constructor() {
        this._bgOn = true;
        this._effectOn = true;
        this._bgVolume = 0.5;
        this._effectVolume = 0.5;
        this._bg = new SoundBG_1.default();
        this._bg.setVolume(this._bgVolume);
        this._effect = new SoundEffects_1.default();
        this._effect.setVolume(this._effectVolume);
    }
    /**
     * 播放音效
     * @param effectName
     */
    playEffect(effectId) {
        if (!this._effectOn)
            return;
        this._effect.play(effectId);
    }
    /**
     * 播放背景音乐
     * @param key
     */
    playBg(bgName) {
        this._currBg = bgName;
        if (!this._bgOn)
            return;
        this._bg.play(bgName);
    }
    /**
     * 停止背景音乐
     */
    stopBg() {
        this._bg.stop();
    }
    /**
     * 设置音效是否开启
     * @param $isOn
     */
    setEffectOn($isOn) {
        this._effectOn = $isOn;
    }
    /**
     * 设置背景音乐是否开启
     * @param $isOn
     */
    setBgOn($isOn) {
        this._bgOn = $isOn;
        if (!this._bgOn) {
            this.stopBg();
        }
        else {
            if (this._currBg) {
                this.playBg(this._currBg);
            }
        }
    }
    /**
     * 设置背景音乐音量
     * @param volume
     */
    setBgVolume(volume) {
        volume = Math.min(volume, 1);
        volume = Math.max(volume, 0);
        this._bgVolume = volume;
        this._bg.setVolume(this._bgVolume);
    }
    /**
     * 获取背景音乐音量
     * @returns {number}
     */
    getBgVolume() {
        return this._bgVolume;
    }
    /**
     * 设置音效音量
     * @param volume
     */
    setEffectVolume(volume) {
        volume = Math.min(volume, 1);
        volume = Math.max(volume, 0);
        this._effectVolume = volume;
        this._effect.setVolume(this._effectVolume);
    }
    /**
     * 获取音效音量
     * @returns {number}
     */
    getEffectVolume() {
        return this._effectVolume;
    }
    get bgOn() {
        return this._bgOn;
    }
    get effectOn() {
        return this._effectOn;
    }
    static get Ins() {
        if (SoundMgr._instance == null) {
            SoundMgr._instance = new SoundMgr();
        }
        return SoundMgr._instance;
    }
}
/** 音乐文件清理时间 */
SoundMgr.CLEAR_TIME = 3 * 60 * 1000;
exports.default = SoundMgr;
},{"./SoundBG":36,"./SoundEffects":37}],39:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class SoundType {
}
/** 加速 */
SoundType.GAME_ACCE = "10001";
/** 背景 */
SoundType.BG_MUSIC = "10002";
/** 英雄进入战斗 */
SoundType.ENTER_GAME = "10003";
/** 金币 */
SoundType.COIN = "10004";
/** 换位 */
SoundType.DRAW_HERO = "10005";
/** 招募英雄 */
SoundType.SUMMON_HERO = "10006";
/** 解锁格子 */
SoundType.UNLOCK = "10007";
/** 英雄升级 */
SoundType.UPGRADE_HERO = "10008";
/** 合成 */
SoundType.MAKE_HERO = "10009";
exports.default = SoundType;
},{}],40:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const LayerMgr_1 = require("../layer/LayerMgr");
class AlignUtils {
    /**
     * 把现实对象设置到屏幕水平居中，垂直居中的位置上，使用前请确认<code>sprite</code>宽高不为0
     * @param sprite
     * @param delayFrames
     * @param useRegisterPoint
     *
     */
    static setToScreenCenter(sprite, delayFrames, useRegisterPoint) {
        if (delayFrames) {
            Laya.timer.frameOnce(delayFrames, AlignUtils, AlignUtils.setToScreenCenter, [sprite], false);
        }
        if (useRegisterPoint) {
            sprite.x = LayerMgr_1.default.stageDesignWidth * 0.5;
            sprite.y = LayerMgr_1.default.stageDesignHeight * 0.5;
        }
        else {
            sprite.x = (LayerMgr_1.default.stageDesignWidth - sprite.width) * 0.5;
            sprite.y = (LayerMgr_1.default.stageDesignHeight - sprite.height) * 0.5;
        }
    }
    /**
     * 把现实对象设置到屏幕水平居中，垂直在0.618的黄金分割点位置上，使用前请确认<code>sprite</code>宽高不为0
     * @param sprite
     * @param delayFrames
     * @param useRegisterPoint
     *
     */
    static setToScreenGoldenPos(sprite, delayFrames, useRegisterPoint) {
        if (delayFrames) {
            Laya.timer.frameOnce(delayFrames, AlignUtils, AlignUtils.setToScreenGoldenPos, [sprite], false);
        }
        if (useRegisterPoint) {
            sprite.x = LayerMgr_1.default.stageDesignWidth * 0.5;
            sprite.y = LayerMgr_1.default.stageDesignHeight * 0.382;
        }
        else {
            sprite.x = (LayerMgr_1.default.stageDesignWidth - sprite.width) * 0.5;
            sprite.y = (LayerMgr_1.default.stageDesignHeight - sprite.height) * 0.382;
        }
    }
    /**
     * 仅将目标对象target的x坐标和y坐标设置为到ref的中心。（注意，如果ref没有宽高可能会导致意外的问题）
     * @param target
     * @param ref
     *
     */
    static setToSpriteCenter(target, ref) {
        if (!target || !ref) {
            throw new Error("Either target or ref is null.");
        }
        else {
            target.pos(ref.width * 0.5, ref.height * 0.5);
        }
    }
    /**
     * 仅将目标对象target根据对齐方式设置坐标。仅设置x坐标和y坐标，忽略目标对象target的宽高。（注意，如果ref没有宽高可能会导致意外的问题）
     * @param target
     * @param ref
     *
     */
    static setTo(align, target, ref) {
        if (align === "center") {
            AlignUtils.setToSpriteCenter(target, ref);
        }
    }
}
exports.default = AlignUtils;
},{"../layer/LayerMgr":23}],41:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 平均数工具类
 */
class AverageUtils {
    /**
     * 构造函数
     * @param $maxNum 参与计算的最大值
     */
    constructor($maxNum = 10) {
        this.nums = [];
        this.numsLen = 0;
        this.numSum = 0;
        this.maxNum = $maxNum;
    }
    /**
     * 加入一个值
     * @param value
     */
    push(value) {
        if (this.numsLen > this.maxNum) {
            this.numsLen--;
            this.numSum -= this.nums.shift();
        }
        this.nums.push(value);
        this.numSum += value;
        this.numsLen++;
    }
    /**
     * 获取平均值
     * @returns {number}
     */
    getValue() {
        return this.numSum / this.numsLen;
    }
    /**
     * 清空
     */
    clear() {
        this.nums.splice(0);
        this.numsLen = 0;
        this.numSum = 0;
    }
}
exports.default = AverageUtils;
},{}],42:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class ColorUtil {
    /**
     * 滤镜
     * @param type  1：变暗 2：变黑
     */
    static createColorFilter(type = 0) {
        if (type == 1) { //变暗
            var colorV = 0.6;
            var colorMat = [
                colorV, 0, 0, 0, 0,
                0, colorV, 0, 0, 0,
                0, 0, colorV, 0, 0,
                0, 0, 0, 1, 0,
            ];
            //创建一个颜色滤镜对象
            var colorFilter = new Laya.ColorFilter(colorMat);
            return [colorFilter];
        }
        else if (type == 2) { //变黑
            var colorV = 0.6;
            var colorMat = [
                0, 0, 0, 0, 0,
                0, 0, 0, 0, 0,
                0, 0, 0, 0, 0,
                0, 0, 0, 1, 0,
            ];
            //创建一个颜色滤镜对象
            var colorFilter = new Laya.ColorFilter(colorMat);
            return [colorFilter];
        }
        return [];
    }
}
exports.default = ColorUtil;
},{}],43:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const HeadItem_1 = require("../../module/hall/view/item/HeadItem");
const AlignUtils_1 = require("./AlignUtils");
const LayerMgr_1 = require("../layer/LayerMgr");
const BoneAnim_1 = require("../bone/BoneAnim");
class EffectUtil extends Laya.Script {
    /** 飘文字 */
    static playTextEffect(parentNode, content, pos = null) {
        var coinLabel = new Laya.Label();
        coinLabel.text = content;
        coinLabel.fontSize = 30;
        coinLabel.color = "#fff1ba";
        coinLabel.anchorX = 0.5;
        coinLabel.anchorY = 0.5;
        parentNode.addChild(coinLabel);
        if (pos) {
            coinLabel.pos(pos.x, pos.y);
        }
        else {
            coinLabel.pos(parentNode.width / 2, -parentNode.height / 2);
        }
        Laya.Tween.to(coinLabel, { x: coinLabel.x, y: (coinLabel.y - 70), alpha: 0 }, 2000, Laya.Ease.cubicInOut, Laya.Handler.create(this, (_coinLabel) => {
            _coinLabel.removeSelf();
        }, [coinLabel]));
    }
    /** 两英雄合并效果 */
    static playHeroMergeEffect(parentNode, heroId, newHeroObj) {
        //基础节点
        let effectNode = new Laya.Sprite();
        parentNode.addChild(effectNode);
        let pos = newHeroObj.localToGlobal(new Laya.Point(0, 0));
        pos = parentNode.globalToLocal(pos);
        effectNode.pos(pos.x, pos.y);
        newHeroObj.visible = false;
        let offsetX = 70;
        let leftHeadItem = Laya.Pool.getItemByClass("p_HeadItem", HeadItem_1.default); //new HeadItem();
        effectNode.addChild(leftHeadItem);
        leftHeadItem.updateHeadSkin(heroId);
        Laya.Tween.to(leftHeadItem, { x: -offsetX }, 300, Laya.Ease.elasticOut, Laya.Handler.create(this, () => {
            Laya.Tween.to(leftHeadItem, { x: 0 }, 100, Laya.Ease.linearIn, Laya.Handler.create(this, () => {
                effectNode.removeChildren();
                this.playCoinEffect(effectNode, 'images/common/star2.png', { x: 52, y: 80 }, () => {
                    effectNode.removeSelf();
                    Laya.Tween.clearTween(leftHeadItem);
                    leftHeadItem.reset();
                    Laya.Pool.recover("p_HeadItem", leftHeadItem);
                });
                if (newHeroObj && newHeroObj.Info.heroId > 0) {
                    newHeroObj.visible = true;
                }
            }));
        }));
        //复制品
        let copyHeadItem = Laya.Pool.getItemByClass("p_HeadItem", HeadItem_1.default); //new HeadItem();
        leftHeadItem.addChild(copyHeadItem);
        copyHeadItem.updateHeadSkin(heroId);
        copyHeadItem.pos(0, 0);
        Laya.Tween.to(copyHeadItem, { x: offsetX * 2 }, 300, Laya.Ease.elasticOut, Laya.Handler.create(this, () => {
            Laya.Tween.to(copyHeadItem, { x: 0 }, 100, Laya.Ease.linearIn, Laya.Handler.create(this, () => {
                Laya.Tween.clearTween(copyHeadItem);
                copyHeadItem.reset();
                Laya.Pool.recover("p_HeadItem", copyHeadItem);
            }));
        }));
    }
    /** 飘金币 */
    static playCoinEffect(parentNode, imgUrl, offset = { x: 0, y: 0 }, callback = null) {
        for (var index = 0; index < 15; index++) {
            let imgCoin = Laya.Pool.getItemByClass("p_Image_star", Laya.Image);
            imgCoin.graphics.clear();
            imgCoin.loadImage(imgUrl);
            imgCoin.scale(1, 1);
            imgCoin.alpha = 1;
            imgCoin.pivot(imgCoin.width / 2, imgCoin.height / 2);
            parentNode.addChild(imgCoin);
            var randX = Math.random() - 0.5;
            var randY = Math.random() - 0.5;
            var cicleX = 10 * Math.cos(index * Math.PI / 7) + 10 * randX;
            var cicleY = 10 * Math.sin(index * Math.PI / 7) + 10 * randY;
            imgCoin.pos(parentNode.width / 2 + cicleX + offset.x, parentNode.height / 2 + cicleY + offset.y);
            var coinPos = { x: (imgCoin.x + cicleX * 5), y: (imgCoin.y + cicleY * 5) };
            Laya.Tween.to(imgCoin, { x: coinPos.x, y: coinPos.y, scaleX: 0.8, scaleY: 0.8, rotation: (randX + randY) * 360 }, 500, Laya.Ease.expoOut);
            imgCoin.frameOnce(10, this, (_coinSp, _coinPos) => {
                Laya.Tween.to(_coinSp, { scaleX: 0, scaleY: 0, alpha: 0.2, rotation: (randX + randY) * 360 }, 1000, Laya.Ease.linearNone, Laya.Handler.create(this, (_coinSp) => {
                    _coinSp.removeSelf();
                    callback && callback();
                    imgCoin.removeChildren();
                    imgCoin.removeSelf();
                    imgCoin.scale(1, 1);
                    imgCoin.alpha = 1;
                    imgCoin.rotation = 0;
                    Laya.Pool.recover("p_Image_star", imgCoin);
                }, [_coinSp]));
            }, [imgCoin, coinPos]);
        }
    }
    /** 人物自白弹框效果 */
    static playDialogueEffect(parentNode, imgUrl, content, pos = null, zOrder = 0, isFlipX = false) {
        let imgTips = Laya.Pool.getItemByClass("p_Image", Laya.Image);
        imgTips.skin = imgUrl;
        imgTips.anchorX = 0;
        imgTips.anchorY = 1;
        parentNode.addChild(imgTips);
        if (pos) {
            imgTips.pos(pos.x, pos.y);
        }
        else {
            imgTips.pos(parentNode.width / 2, -parentNode.height / 2);
        }
        if (zOrder > 0) {
            imgTips.zOrder = zOrder;
        }
        //飘文字
        var coinLabel = Laya.Pool.getItemByClass("p_Label", Laya.Label);
        coinLabel.text = content;
        coinLabel.fontSize = 22;
        coinLabel.color = "#000000";
        coinLabel.anchorX = 0.5;
        coinLabel.anchorY = 0.5;
        coinLabel.width = 220;
        coinLabel.height = 100;
        coinLabel.wordWrap = true;
        coinLabel.valign = "middle";
        imgTips.addChild(coinLabel);
        coinLabel.pos(imgTips.width * 0.5, imgTips.height * 0.46);
        //镜像
        if (isFlipX) {
            imgTips.scaleX = -1;
            coinLabel.scaleX = -1;
        }
        //动画
        let timeLine = new Laya.TimeLine();
        timeLine.addLabel("tl1", 0).from(imgTips, { scaleX: 0, scaleY: 0 }, 300, Laya.Ease.linearNone)
            .addLabel("tl2", 300).to(imgTips, { alpha: 1 }, 1200, Laya.Ease.linearNone)
            .addLabel("tl3", 1500).to(imgTips, { alpha: 0 }, 1000, Laya.Ease.cubicInOut);
        timeLine.on(Laya.Event.COMPLETE, imgTips, () => {
            Laya.Pool.recover("p_Label", coinLabel);
            imgTips.removeChildren();
            imgTips.removeSelf();
            imgTips.scale(1, 1);
            imgTips.alpha = 1;
            Laya.Pool.recover("p_Image", imgTips);
        });
        timeLine.play(0, false);
    }
    static playAccEffect(parentNode) {
        let img = Laya.Pool.getItemByClass("p_Image", Laya.Image);
        img.skin = "images/hall/acce_effect.png";
        img.anchorX = img.anchorY = 0.5;
        img.scale(0, -1);
        AlignUtils_1.default.setToScreenGoldenPos(img, 0, true);
        LayerMgr_1.default.Ins.screenEffectLayer.addChild(img);
        let timeLine = new Laya.TimeLine();
        timeLine.addLabel("tl1", 0).from(img, { scaleX: 0.4, scaleY: 1 }, 100)
            .addLabel("tl2", 0).to(img, { scaleX: 0.65, scaleY: -1 }, 200)
            .addLabel("tl3", 0).to(img, { scaleX: 1, scaleY: 1 }, 300)
            .addLabel("tl4", 0).to(img, { scaleX: 1, scaleY: 1 }, 500);
        timeLine.on(Laya.Event.COMPLETE, img, () => {
            img.removeSelf();
            img.scale(1, 1);
            Laya.Pool.recover("p_Image", img);
        });
        timeLine.play(0, false);
    }
    /** 金币雨 */
    static playCoinRainEffect(imgUrl) {
        let coinCount = 8;
        for (var index = 0; index < coinCount; index++) {
            let imgCoin = Laya.Pool.getItemByClass("p_Image", Laya.Image);
            imgCoin.mouseEnabled = false;
            imgCoin.graphics.clear();
            imgCoin.loadImage(imgUrl);
            imgCoin.pivot(imgCoin.width / 2, imgCoin.height / 2);
            LayerMgr_1.default.Ins.screenEffectLayer.addChild(imgCoin);
            imgCoin.pos(index * (LayerMgr_1.default.stageDesignWidth / coinCount) + Math.random() * 100, Math.random() * 500 - 300);
            Laya.Tween.to(imgCoin, { x: imgCoin.x, y: LayerMgr_1.default.stageDesignHeight }, 3000, Laya.Ease.linearNone, Laya.Handler.create(this, (_coinSp) => {
                _coinSp.removeSelf();
                Laya.Pool.recover("p_Image", _coinSp);
            }, [imgCoin]));
        }
    }
    static playImageTextEffect(_parentNode, _imgUrl, _content, _pos = null, _zOrder = 0) {
        let coinImg = Laya.Pool.getItemByClass("p_Image", Laya.Image);
        coinImg.skin = _imgUrl;
        coinImg.anchorX = 0.5;
        coinImg.anchorY = 0.5;
        _parentNode.addChild(coinImg);
        if (_pos) {
            coinImg.pos(_pos.x, _pos.y);
        }
        else {
            coinImg.pos(_parentNode.width / 2, -_parentNode.height / 2);
        }
        if (_zOrder > 0) {
            coinImg.zOrder = _zOrder;
        }
        //飘文字
        var coinLabel = new Laya.Label();
        coinLabel.text = _content;
        coinLabel.fontSize = 30;
        coinLabel.color = "#fff1ba";
        coinLabel.anchorY = 0.5;
        coinImg.addChild(coinLabel);
        coinLabel.pos(coinImg.width, coinImg.height * 0.5);
        //动画
        let timeLine = new Laya.TimeLine();
        timeLine.addLabel("tl1", 0).from(coinImg, { scaleX: 0, scaleY: 0, y: (coinImg.y + 30) }, 300, Laya.Ease.linearNone)
            .addLabel("tl2", 500).to(coinImg, { x: coinImg.x, y: (coinImg.y - 50), alpha: 0 }, 1200, Laya.Ease.cubicInOut);
        timeLine.on(Laya.Event.COMPLETE, coinImg, () => {
            coinImg.removeChildren();
            coinImg.removeSelf();
            coinImg.alpha = 1;
            coinImg.scale(1, 1);
            Laya.Pool.recover("p_Image", coinImg);
        });
        timeLine.play(0, false);
    }
    /**
     * 文字打字机效果
     * obj           文本对象
     * content       文字
     * interval      打字间隔 毫秒
     */
    static playTypewriterEffect(label, content = "", interval = 50, callBack = null) {
        let self = this;
        label.text = "";
        let strArr = content.split("");
        let len = strArr.length;
        for (let i = 0; i < len; i++) {
            Laya.timer.once(interval * i, this, () => {
                label.text = label.text.concat(strArr[i]);
                if ((i >= len - 1) && (callBack != null)) {
                    callBack();
                }
            });
        }
    }
    /** 龙骨特效 */
    static playBoneEffect(boneName, pos, layer) {
        let bone = new BoneAnim_1.default(boneName);
        bone.completeBack = () => {
            bone.destroy();
        };
        bone.x = pos.x;
        bone.y = pos.y;
        if (layer) {
            layer.addChild(bone);
        }
        else {
            LayerMgr_1.default.Ins.flyLayer.addChild(bone);
        }
    }
}
exports.default = EffectUtil;
},{"../../module/hall/view/item/HeadItem":74,"../bone/BoneAnim":3,"../layer/LayerMgr":23,"./AlignUtils":40}],44:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class MathUtil extends Laya.Script {
    /** 生成随机浮点数，随机数范围包含min值，但不包含max值 */
    static range(min, max) {
        return Math.random() * (max - min) + min;
    }
    /** 生成随机整数，随机整数范围包含min值和max值 */
    static rangeInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1) + min);
    }
    /** 单位转换 */
    static unitConversion(value) {
        if (value < 1000000) {
            return Math.floor(value).toString();
        }
        if (value === 0)
            return '0';
        let k = 1000, // or 1024
        sizes = ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'], i = Math.floor(Math.log(value) / Math.log(k));
        let unit = '';
        if (i < sizes.length) {
            unit = sizes[i];
        }
        else {
            let numLenght = i - sizes.length;
            unit = String.fromCharCode(97 + numLenght % 26);
            for (let index = 0, len = 1 + Math.floor(numLenght / 65); index < len; index++) {
                unit = unit + unit;
            }
        }
        return (value / Math.pow(k, i)).toPrecision(3) + ' ' + unit;
    }
    /** 字符串转数字 */
    static parseStringNum(_strNum) {
        let intNum = parseFloat(_strNum);
        if (intNum) {
            return intNum;
        }
        return 0;
    }
    /** 字符串转整形 */
    static parseInt(_strNum) {
        let intNum = parseFloat(_strNum);
        if (intNum) {
            return Math.floor(intNum);
        }
        return 0;
    }
    static splitToNumber(value, sprelator = "#") {
        if (value == "0")
            return [];
        let result = [];
        let sArray = value.split(sprelator);
        for (let i = 0; i < sArray.length; i++) {
            result.push(parseInt(sArray[i]));
        }
        return result;
    }
    static splitToString(value, sprelator = "#") {
        if (value == "0")
            return [];
        let result = [];
        let sArray = value.split(sprelator);
        for (let i = 0; i < sArray.length; i++) {
            result.push(sArray[i]);
        }
        return result;
    }
    static removeFromArray(target, array) {
        let index = array.indexOf(target);
        if (index >= 0)
            array.splice(index, 1);
        return array;
    }
    /** 替换数组中的数据 */
    static replaceItemToArray(array, inde, item) {
        array.splice(inde, 1, item);
    }
}
exports.default = MathUtil;
},{}],45:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Layer_1 = require("../layer/base/Layer");
class PointUtils {
    /**
     * 按位置取得两个点之间连线上某个点的位置
     * @param startPt 起始点
     * @param endPt 结束点
     * @param position 要取点的位置，<code>position</code>的值越接近0，取出的点越靠近<code>startPt</code>；<code>position</code>的值越接近1，取出的点越靠近<code>endPt</code>；
     * @return
     *
     */
    static interpolate(startPt, endPt, position) {
        return new Laya.Point(startPt.x + (endPt.x - startPt.x) * position, startPt.y + (endPt.y - startPt.y) * position);
    }
    /**
     * 计算两个点之间的距离
     * @param p1 第一个点
     * @param p2 第二个点
     * @return 距离
     *
     */
    static distance(p1, p2) {
        return Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));
    }
    /**
     * 计算两组坐标之间的距离
     * @param x1 第一个点的x坐标
     * @param y1 第一个点的y坐标
     * @param x2 第二个点的y坐标
     * @param y2 第二个点的y坐标
     * @return 距离
     *
     */
    static distanceByAxis(x1, y1, x2, y2) {
        return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
    }
    /**
     * 获得从p1至p2的朝向，当p1在左侧时返回1，当p1在右侧时返回-1
     * @param p1
     * @param p2
     * @return
     *
     */
    static getDirection(p1, p2) {
        if (p1.x <= p2.x) {
            return 1;
        }
        if (p1.x > p2.x) {
            return -1;
        }
        return 1;
    }
    /**
     * 获得target在LayerManager的全局坐标
     * @param target
     * @param moveRightNow 是否同时把target的位置移到新的位置
     * @return
     *
     */
    static localToGlobal(target, moveRightNow) {
        let pt = new Laya.Point(target.x, target.y);
        let parent = target.parent;
        while (parent && !(parent instanceof Layer_1.default)) {
            pt.x += parent.x - parent.pivotX - (parent.scrollRect ? parent.scrollRect.x : 0);
            pt.y += parent.y - parent.pivotY - (parent.scrollRect ? parent.scrollRect.y : 0);
            parent = parent.parent;
        }
        if (moveRightNow) {
            target.pos(pt.x, pt.y);
        }
        return pt;
    }
    /**
     * 保持target对象的全局位置不变的情况下，计算target显示对象在新的显示对象容器中的本地坐标位置
     * @param target
     * @param newParent
     * @param moveRightNow
     * @return
     *
     */
    static parentToParent(target, newParent, moveRightNow) {
        let pt = PointUtils.localToGlobal(target);
        let zeroPt = new Laya.Point();
        let parent = newParent;
        while (parent && !(parent instanceof Layer_1.default)) {
            zeroPt.x += parent.x;
            zeroPt.y += parent.y;
            parent = parent.parent;
        }
        pt.x = pt.x - zeroPt.x;
        pt.y = pt.y - zeroPt.y;
        if (moveRightNow) {
            target.pos(pt.x, pt.y);
        }
        return pt;
    }
}
exports.default = PointUtils;
},{"../layer/base/Layer":24}],46:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class ResUtils {
    static loadGroup(group, onComplete, thisObject) {
        Laya.loader.load(this.combGroupList(group), Laya.Handler.create(thisObject, onComplete));
    }
    /** 组合资源组名 */
    static combGroupList(group) {
        let newGroup = [];
        for (let i = 0, len = group.length; i < len; i++) {
            newGroup.push({ url: "res/atlas/images/" + group[i] + ".atlas", type: Laya.Loader.ATLAS });
        }
        return newGroup;
    }
}
exports.default = ResUtils;
},{}],47:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const HttpMgr_1 = require("../net/HttpMgr");
const HttpRequestHelper_1 = require("../net/HttpRequestHelper");
const PathConfig_1 = require("../config/PathConfig");
const PlayerMgr_1 = require("../player/PlayerMgr");
const HallControl_1 = require("../../module/hall/HallControl");
const MathUtil_1 = require("./MathUtil");
const ShareMgr_1 = require("../msg/ShareMgr");
const EventsMgr_1 = require("../event/EventsMgr");
const EventType_1 = require("../event/EventType");
const TimeUtil_1 = require("./TimeUtil");
const GuideMgr_1 = require("../guide/GuideMgr");
const AppConfig_1 = require("../config/AppConfig");
/**
 * 缓存工具
 */
class StorageUtil extends Laya.Script {
    constructor() { super(); }
    /** 新老版本更新检测（防止老数据覆盖） */
    static versionCheck(callback) {
        let that = this;
        if (AppConfig_1.default.isDebug) {
            callback && callback();
            return;
        }
        let storage = window.localStorage;
        HttpMgr_1.default.Ins.requestVersionCheck((_res) => {
            if (_res && _res.clear_flag) {
                //清理老数据
                storage.setItem(that.s_version_clear, 'true');
            }
        });
        //上一次记录清理
        let dataJson = storage.getItem(that.s_version_clear);
        if (dataJson) {
            //需要清理数据
            HttpMgr_1.default.Ins.requestVersionClear((_res) => {
                storage.removeItem(that.s_version_clear);
                that.clearLocalData();
                callback && callback();
            });
        }
        else {
            callback && callback();
        }
    }
    static saveStorageToLocal(upload = false) {
        if (StorageUtil._isLoadStorage == false) {
            console.log("@David 未同步本地/服务器数据");
            return;
        }
        else if (HallControl_1.default.Ins.IsGuide) {
            return;
        }
        let localData = {};
        localData["userGold"] = PlayerMgr_1.default.Ins.Info.userGold;
        localData["userLevel"] = PlayerMgr_1.default.Ins.Info.userLevel;
        localData["userId"] = PlayerMgr_1.default.Ins.Info.userId;
        localData["userExp"] = PlayerMgr_1.default.Ins.Info.userExp;
        localData["AllHeros"] = HallControl_1.default.Ins.Model.AllHeros;
        localData["BuyHerosRecord"] = HallControl_1.default.Ins.Model.BuyHerosRecord;
        localData["AllHeros"] = HallControl_1.default.Ins.Model.AllHeros;
        localData["heroLevel"] = HallControl_1.default.Ins.Model.heroLevel;
        localData["heroCount"] = HallControl_1.default.Ins.Model.heroCount;
        localData["guideStep"] = GuideMgr_1.default.Ins.guideStep;
        let dataJson = JSON.stringify(localData);
        if (dataJson) {
            if (StorageUtil.guideStep != GuideMgr_1.default.Ins.guideStep) {
                HttpMgr_1.default.Ins.requestGuideStep(GuideMgr_1.default.Ins.guideStep);
                StorageUtil.guideStep = GuideMgr_1.default.Ins.guideStep;
            }
            let storage = window.localStorage;
            storage.setItem(StorageUtil.storage_user, dataJson);
        }
        if (upload) {
            StorageUtil.requestSaveHerosData();
            StorageUtil.requestSaveHeroShopData();
            StorageUtil.requestSaveUserInfoData();
        }
    }
    /** 取出本地数据 */
    static loadStorage(callback) {
        StorageUtil._isLoadStorage = true;
        let storage = window.localStorage;
        let dataJson = storage.getItem(StorageUtil.storage_user);
        if (dataJson) {
            let jsonObj = JSON.parse(dataJson);
            if (jsonObj) {
                PlayerMgr_1.default.Ins.Info.userGold = jsonObj["userGold"];
                PlayerMgr_1.default.Ins.Info.userLevel = jsonObj["userLevel"];
                PlayerMgr_1.default.Ins.Info.userId = jsonObj["userId"];
                PlayerMgr_1.default.Ins.Info.userExp = jsonObj["userExp"];
                HallControl_1.default.Ins.Model.AllHeros = jsonObj["AllHeros"];
                HallControl_1.default.Ins.Model.BuyHerosRecord = jsonObj["BuyHerosRecord"];
                HallControl_1.default.Ins.Model.heroLevel = jsonObj["heroLevel"];
                HallControl_1.default.Ins.Model.heroCount = jsonObj["heroCount"];
                GuideMgr_1.default.Ins.guideStep = jsonObj["guideStep"];
            }
            callback && callback(true);
        }
        else {
            // if (Laya.Browser.onPC) {  //测试用
            callback && callback(true);
            return;
            // }
            //从服务器同步数据
            let serverDataProgress = 3;
            HttpMgr_1.default.Ins.requestCarparkData((res) => {
                if (res.length > 0) {
                    HallControl_1.default.Ins.Model.AllHeros = res;
                }
                serverDataProgress--;
                if (serverDataProgress < 1) {
                    callback && callback(true);
                }
            });
            HttpMgr_1.default.Ins.requestCarshopData((res) => {
                serverDataProgress--;
                HallControl_1.default.Ins.Model.BuyHerosRecord = res;
                if (serverDataProgress < 1) {
                    callback && callback(true);
                }
            });
            HttpMgr_1.default.Ins.requestUserInfoData((res) => {
                if (res) {
                    console.log("@David 用户基础信息：", res);
                    PlayerMgr_1.default.Ins.Info.userId = res.id;
                    PlayerMgr_1.default.Ins.Info.userGold = MathUtil_1.default.parseStringNum(res.money);
                    PlayerMgr_1.default.Ins.Info.userDiamond = MathUtil_1.default.parseStringNum(res.diamond);
                    PlayerMgr_1.default.Ins.Info.userLevel = MathUtil_1.default.parseInt(res.level);
                    PlayerMgr_1.default.Ins.Info.userExp = MathUtil_1.default.parseStringNum(res.exp);
                    HallControl_1.default.Ins.Model.heroLevel = MathUtil_1.default.parseInt(res.car_level);
                    GuideMgr_1.default.Ins.guideStep = MathUtil_1.default.parseInt(res.tutorial);
                }
                serverDataProgress--;
                if (serverDataProgress < 1) {
                    callback && callback(true);
                }
            });
            //超时尝试重新请求
            Laya.stage.timerOnce(12000, this, () => {
                console.log("@David 超时尝试重新请求:", serverDataProgress);
                if (serverDataProgress > 0) {
                    StorageUtil.loadStorage(callback);
                }
            });
        }
        //请求分享开关
        HttpMgr_1.default.Ins.requestShareFlag((res) => {
            ShareMgr_1.default.Ins.shareSwitchOpen = res;
        });
        HttpMgr_1.default.Ins.requestUserBaseData((res) => {
            let model = HallControl_1.default.Ins.Model;
            if (model) {
                model.shareAdTimes = res.operation;
                model.showShareGiftRedPoint = res.share_reward_flag;
                model.showDailySignRedPoint = res.sign_flag;
                model.showTaskRedPoint = res.task_flag;
                model.showLuckPrizeRedPoint = res.roulette_flag;
                model.showFollowRedPoint = res.follow_flag;
                model.advert = res.advert;
                model.diamond_acce_num = res.diamond_acce_num;
            }
        });
    }
    static isLoadStorage() {
        return this._isLoadStorage;
    }
    /** 英雄数据 */
    static requestSaveHerosData() {
        let self = this;
        let dataJson = JSON.stringify(HallControl_1.default.Ins.Model.AllHeros);
        //非法数据过滤
        if (dataJson == null || dataJson.length < 1 || HallControl_1.default.Ins.Model.AllHeros.length < 1) {
            return;
        }
        else if (self.carparkJsonRecord == dataJson) {
            console.log("@David requestSaveHerosData数据未刷新");
            return;
        }
        self.carparkJsonRecord = dataJson;
        let dataString = 'info=' + dataJson;
        console.log("@David requestSaveHerosData:", dataString);
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v3/seat/post',
            method: 'Post',
            data: dataString,
            success: function (res) {
                console.log("@David requestSaveHerosData:", res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 英雄商店数据 */
    static requestSaveHeroShopData() {
        let dataJson = JSON.stringify(HallControl_1.default.Ins.Model.BuyHerosRecord);
        //非法数据过滤
        if (dataJson == null || dataJson.length < 1 || HallControl_1.default.Ins.Model.BuyHerosRecord.length < 1) {
            return;
        }
        else if (this.carshopJsonRecord == dataJson) {
            console.log("@David requestSaveHeroShopData数据未刷新");
            return;
        }
        this.carshopJsonRecord = dataJson;
        let dataString = 'info=' + dataJson;
        console.log("@David requestSaveHeroShopData:", dataString);
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v3/shop/post',
            method: 'Post',
            data: dataString,
            success: function (res) {
                console.log("@David requestSaveHeroShopData:", res);
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    /** 保存用户信息金币 */
    static requestSaveUserInfoData() {
        let dataString = 'money=' + PlayerMgr_1.default.Ins.Info.userGold +
            '&car_level=' + HallControl_1.default.Ins.Model.heroLevel +
            '&level=' + PlayerMgr_1.default.Ins.Info.userLevel +
            '&exp=' + PlayerMgr_1.default.Ins.Info.userExp +
            '&asset=' + Math.floor(PlayerMgr_1.default.Ins.Info.userGold + HallControl_1.default.Ins.Model.heroAllAsset());
        console.log("@David 保存用户信息金币:", dataString);
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v3/userinfo/post',
            method: 'Post',
            data: dataString,
            success: function (res) {
                console.log("@David 保存用户信息金币:", res);
            },
            fail: function (res) {
                console.log("@David 保存用户信息金币错误:", res);
            }
        });
    }
    /** 保存加速剩余时间 */
    static saveAcceLeftTime(_acceLeftTime) {
        let storage = window.localStorage;
        if (_acceLeftTime > 0) {
            storage.setItem(HallControl_1.default.Ins.Model.s_acceLeft_time, _acceLeftTime.toString());
        }
        else {
            storage.removeItem(HallControl_1.default.Ins.Model.s_acceLeft_time);
        }
    }
    /** 获取加速剩余时间 */
    static getAcceLeftTime() {
        let storage = window.localStorage;
        let dataJson = storage.getItem(HallControl_1.default.Ins.Model.s_acceLeft_time);
        if (dataJson) {
            let acceLeftTime = MathUtil_1.default.parseInt(dataJson);
            storage.removeItem(HallControl_1.default.Ins.Model.s_acceLeft_time);
            return acceLeftTime;
        }
        return 0;
    }
    /** 缓存单个英雄 */
    static saveHeroStore(heroId) {
        if (heroId < 1)
            return;
        let heroAry = [];
        let storage = window.localStorage;
        let dataJson = storage.getItem(this.hero_store_key);
        if (dataJson) {
            let jsonObj = JSON.parse(dataJson);
            if (jsonObj) {
                heroAry = jsonObj;
            }
        }
        if (heroAry) {
            heroAry.push(heroId);
            let dataJson = JSON.stringify(heroAry);
            if (dataJson) {
                storage.setItem(this.hero_store_key, dataJson);
            }
        }
        EventsMgr_1.default.Ins.dispatch(EventType_1.default.HERO_BOX);
    }
    /** 取出缓存英雄 */
    static popHeroStore(isRemove = false) {
        let storage = window.localStorage;
        let dataJson = storage.getItem(this.hero_store_key);
        if (dataJson) {
            let jsonObj = JSON.parse(dataJson);
            if (jsonObj) {
                let carId = jsonObj.shift();
                //保存移除
                if (isRemove) {
                    let dataJson = JSON.stringify(jsonObj);
                    if (dataJson) {
                        storage.setItem(this.hero_store_key, dataJson);
                    }
                }
                if (carId) {
                    return carId;
                }
            }
        }
        return 0;
    }
    /** 离线奖励 */
    static offlinePrize() {
        let that = this;
        let storage = window.localStorage;
        let dataJson = storage.getItem(that.s_offlinePrize_time);
        let offlineTime = MathUtil_1.default.parseInt(dataJson);
        if (offlineTime > 0) {
            storage.removeItem(that.s_offlinePrize_time);
        }
        return offlineTime;
    }
    /** 查询离线奖励 */
    static requestOfflinePrizeData() {
        let that = this;
        let HttpReqHelper = new HttpRequestHelper_1.default(PathConfig_1.default.AppUrl);
        HttpReqHelper.request({
            url: 'v3/login',
            success: function (res) {
                console.log("@David 查询离线奖励:", res);
                let offlineTime = MathUtil_1.default.parseInt(res.time); //离线时长
                let login_time = MathUtil_1.default.parseInt(res.login_time); //登录当前服务器时间
                let cur_time = (new Date()).getTime() / 1000;
                TimeUtil_1.default.cs_time_diff = login_time - cur_time;
                let storage = window.localStorage;
                let dataJson = storage.getItem(that.s_offline_time);
                console.log("读取本地离线:", dataJson);
                if (dataJson) {
                    offlineTime = 0;
                    let last_logout_time = MathUtil_1.default.parseInt(dataJson); //上次离线时间
                    console.log(login_time, cur_time, last_logout_time, (login_time - last_logout_time), TimeUtil_1.default.cs_time_diff);
                    if (!isNaN(last_logout_time) && login_time > last_logout_time) {
                        offlineTime = login_time - last_logout_time;
                    }
                    storage.removeItem(that.s_offline_time);
                }
                console.log("离线奖励:", offlineTime);
                if (offlineTime > 0) {
                    storage.setItem(that.s_offlinePrize_time, offlineTime.toString());
                    EventsMgr_1.default.Ins.dispatch(EventType_1.default.SHOW_OFFLINE_REWARD);
                }
                HttpMgr_1.default.Ins.requestNotifyServerPrize();
            },
            fail: function (res) {
                console.log(res);
            }
        });
    }
    //保存离线时间
    static saveOfflineTime() {
        let that = this;
        let storage = window.localStorage;
        let offlineServerTime = TimeUtil_1.default.serverTime();
        storage.setItem(that.s_offline_time, offlineServerTime.toString());
    }
    /** 移除缓存数据 */
    static clearLocalData() {
        let storage = window.localStorage;
        if (storage) {
            storage.removeItem(this.storage_user_old);
            storage.removeItem(this.storage_user);
        }
    }
}
StorageUtil.storage_user_old = 'user_data'; //保存本地v1.0
StorageUtil.storage_user = 'user_data_111'; //保存本地
StorageUtil.hero_store_key = "car_store_key"; //本地保存兵营车辆
StorageUtil.s_version_clear = 's_version_clear'; //版本清理
StorageUtil.s_offlinePrize_time = 's_offlinePrize_time'; //离线奖励时间
StorageUtil.s_offline_time = 's_offline_time'; //离线服务器时间
StorageUtil._isLoadStorage = false; //是否已加载本地数据
StorageUtil.carparkJsonRecord = ''; //防止提交相同数据给服务器
StorageUtil.carshopJsonRecord = ''; //防止提交相同数据给服务器
/** 保存缓存到本地 */
StorageUtil.guideStep = 0;
exports.default = StorageUtil;
},{"../../module/hall/HallControl":64,"../config/AppConfig":4,"../config/PathConfig":5,"../event/EventType":19,"../event/EventsMgr":20,"../guide/GuideMgr":22,"../msg/ShareMgr":30,"../net/HttpMgr":31,"../net/HttpRequestHelper":32,"../player/PlayerMgr":33,"./MathUtil":44,"./TimeUtil":49}],48:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
* 字典;
*/
class TSDictionary {
    constructor() {
        /**
          * 字典这个数据结构，其本质是一个个键值对<key,value>形成的数据集合，
          * 但为了能查找到正确的数据，key值必须保证唯一性。我们可以通过使用
          * Typescript中的两个数组来分别存储key值和value值来模拟实现这种结构。
          * 数据存储时把key和value分别存储在两个数组相同的索引位置，
          * 这样在查找数据时就可以通过这个索引把数据关联起来，找到对应的值。。
          *
          */
        this.keys = [];
        this.values = [];
        this._len = 0;
    }
    toJsonObject() {
        const result = {};
        result.keys = this.keys;
        result.values = this.values;
        return result;
    }
    fromJsonObject(obj) {
        this.keys = obj.keys;
        this.values = obj.values;
    }
    Add(key, value) {
        let self = this;
        self.keys.push(key);
        self.values.push(value);
        self._len++;
    }
    Remove(key) {
        let self = this;
        let index = self.keys.indexOf(key, 0);
        if (index != -1) {
            self.keys.splice(index, 1);
            self.values.splice(index, 1);
            self._len--;
        }
    }
    /**获取字典中对应key的值，不存在则返回null */
    TryGetValue(key) {
        let self = this;
        var index = self.keys.indexOf(key, 0);
        if (index != -1) {
            return self.values[index];
        }
        return null;
    }
    TryGetKey(value) {
        let self = this;
        var index = self.values.indexOf(value, 0);
        if (index != -1) {
            return self.keys[index];
        }
        return null;
    }
    /**
     * 通过判断条件获取相关列表
     * @param value 判断条件例如：
     * this.TryGetListByCondition(function(VT){
     *      if(VT.xx==xx){
     *          return true
     *
     *      return false;
     * });
     * cache.TryGetListByCondition((bean:Type)=>bean.xxx==xxx);
     * 获取列表全部cache.TryGetListByCondition((bean:Type)=>true);
     */
    TryGetListByCondition(value) {
        let self = this;
        let list = [];
        for (let o of self.values) {
            if (value(o)) {
                list[list.length] = o;
            }
        }
        return list;
    }
    TryGetAnyByCondition(value) {
        let self = this;
        let dic = {};
        for (let s of self.keys) {
            var index = self.keys.indexOf(s, 0);
            if (value(self.values[index])) {
                dic[s] = self.values[index];
            }
        }
        return dic;
    }
    /**
     * 通过判断条件获取相关列表
     * @param value 判断条件例如：
     * this.TryGetListByCondition(function(VT){
     *      if(VT.xx==xx){
     *          return true
     *
     *      return false;
     * });
     * cache.TryGetListByCondition((bean:Type)=>bean.xxx==xxx);
     * 获取列表全部cache.TryGetListByCondition((bean:Type)=>true);
     */
    TryGetKeyListByCondition(value) {
        let self = this;
        let list = [];
        for (let i = 0; i < self.keys.length; i++) {
            if (value(self.keys[i])) {
                list[list.length] = self.values[i];
            }
        }
        return list;
    }
    /**判断字典中是否存在对应key的值，返回boolean */
    ContainsKey(key) {
        let self = this;
        let ks = self.keys;
        for (let i = 0; i < ks.length; ++i) {
            if (ks[i] == key) {
                return true;
            }
        }
        return false;
    }
    /**虽然可以通过上面的TryGetValue()函数获取到字典里的引用数据，
     * 再对数据进行修改更新，但当数据是值类型时是无法实现修改保存的。
     * 为了更方便的修改字典里的数据，增加一个修改数据的函数:(并在返回值中返回是否修改成功) */
    SetDicValue(key, value) {
        var index = this.keys.indexOf(key, 0);
        if (index != -1) {
            this.keys[index] = key;
            this.values[index] = value;
            return true;
        }
        this.Add(key, value);
        return true;
    }
    /**key为number的，可以按从小到大的顺序重新排序 */
    SortByKey() {
        let self = this;
        for (let j = self.keys.length - 1; j > 0; j--) {
            for (let i = 0; i < j; i++) {
                if (Number(self.keys[i]) > Number(self.keys[i + 1])) {
                    let temKey = self.keys[i];
                    let temValue = self.values[i];
                    self.keys[i] = self.keys[i + 1];
                    self.values[i] = self.values[i + 1];
                    self.keys[i + 1] = temKey;
                    self.values[i + 1] = temValue;
                }
            }
        }
        return true;
    }
    GetLenght() {
        return this._len;
    }
    getValueByIndex(index) {
        let self = this;
        if (index < 0 || index >= self._len) {
            return;
        }
        let value = self.values[index];
        return value;
    }
    getKeyByIndex(index) {
        let self = this;
        if (index < 0 || index >= self._len) {
            return;
        }
        let value = self.keys[index];
        return value;
    }
    getValues() {
        return this.values;
    }
    getkeys() {
        return this.keys;
    }
    clear() {
        let self = this;
        while (self.keys.length > 0) {
            self.keys.pop();
        }
        while (self.values.length > 0) {
            let vt = self.values.pop();
            vt = null;
        }
        self.keys.length = 0;
        self.values.length = 0;
        self._len = 0;
    }
}
exports.default = TSDictionary;
},{}],49:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class TimeUtil {
    /** 00:00:00格式时间 */
    static timeFormatStr(_time, _isHour = false) {
        let hour = Math.floor(_time / 3600);
        let minute = Math.floor(_time / 60) % 60;
        let sec = _time % 60;
        if (_isHour) {
            return (hour < 10 ? ('0' + hour) : hour) + ':' + (minute < 10 ? ('0' + minute) : minute) + ':' + (sec < 10 ? ('0' + sec) : sec);
        }
        else {
            return (minute < 10 ? ('0' + minute) : minute) + ':' + (sec < 10 ? ('0' + sec) : sec);
        }
    }
    /** 获取本地与服务器时间差(s减c) */
    static csDiffTime() {
        let that = this;
        return that.cs_time_diff;
    }
    /** 获取服务器当前时间 */
    static serverTime() {
        let that = this;
        let cur_time = (new Date()).getTime() / 1000;
        return (cur_time + that.csDiffTime());
    }
}
TimeUtil.cs_time_diff = 0; //客户端与服务器时间差
exports.default = TimeUtil;
},{}],50:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SmallLoading_1 = require("../../module/loading/view/SmallLoading");
class ViewMgr {
    /** 构造函数 */
    constructor() {
        this._views = {};
        this._opens = [];
    }
    /**
  * 面板注册
  * @param key 面板唯一标识
  * @param view 面板
  */
    register(key, view) {
        if (view == null) {
            return;
        }
        if (this._views[key]) {
            return;
        }
        this._views[key] = view;
    }
    /**
     * 面板解除注册
     * @param key
     */
    unregister(key) {
        if (!this._views[key]) {
            return;
        }
        this._views[key] = null;
        delete this._views[key];
    }
    /**
     * 开启面板
     * @param key 面板唯一标识
     * @param param 参数
     */
    open(key, callback = null, ...param) {
        var view = this.getView(key);
        if (view == null) {
            return;
        }
        if (view.isShow()) {
            view.callback = callback;
            view.initUI();
            view.open.apply(view, param);
            view.initData();
            return view;
        }
        if (view.isInit()) {
            view.addToParent();
            view.callback = callback;
            view.initUI();
            view.addEvents();
            view.open.apply(view, param);
            view.initData();
        }
        else {
            SmallLoading_1.default.Ins.showLoading();
            view.loadResource(function () {
                view.setVisible(false);
                // view.initUIView();
                view.addToParent();
            }.bind(this), function () {
                view.callback = callback;
                view.initUI();
                view.addEvents();
                view.open.apply(view, param);
                view.initData();
                view.setVisible(true);
                SmallLoading_1.default.Ins.hideLoading();
            }.bind(this));
        }
        this._opens.push(key);
        return view;
    }
    /**
     * 根据唯一标识获取一个UI对象
     * @param key
     * @returns {any}
     */
    getView(key) {
        return this._views[key];
    }
    /**
     * 关闭面板
     * @param key 面板唯一标识
     * @param param 参数
     *
     */
    close(key, ...param) {
        if (!this.isShow(key)) {
            return;
        }
        var view = this.getView(key);
        if (view == null) {
            return;
        }
        var viewIndex = this._opens.indexOf(key);
        if (viewIndex >= 0) {
            this._opens.splice(viewIndex, 1);
        }
        view.removeFromParent();
        view.close.apply(view, param);
    }
    /**
     * 检测一个UI是否开启中
     * @param key
     * @returns {boolean}
     */
    isShow(key) {
        return this._opens.indexOf(key) != -1;
    }
    /** 当前ui打开数量 */
    currOpenNum() {
        return this._opens.length;
    }
    /** 清空处理 */
    clear() {
        this.closeAll();
        this._views = {};
    }
    /** 关闭所有开启中的UI */
    closeAll() {
        while (this._opens.length) {
            this.close(this._opens[0]);
        }
    }
    /**
     * 销毁一个面板
     * @param key 唯一标识
     * @param newView 新面板
     */
    destroy(key, newView = null) {
        var oldView = this.getView(key);
        if (oldView) {
            this.unregister(key);
            oldView.destroy();
            oldView = null;
        }
        this.register(key, newView);
    }
    static get Ins() {
        if (ViewMgr._instance == null) {
            ViewMgr._instance = new ViewMgr();
        }
        return ViewMgr._instance;
    }
}
exports.default = ViewMgr;
},{"../../module/loading/view/SmallLoading":76}],51:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ShopView_1 = require("../../module/shop/view/ShopView");
const ViewMgr_1 = require("./ViewMgr");
const ViewConst_1 = require("./const/ViewConst");
const DiamondBuyView_1 = require("../../module/common/view/DiamondBuyView");
const LuckPrizeView_1 = require("../../module/luckPrize/view/LuckPrizeView");
const DaySignView_1 = require("../../module/daySign/view/DaySignView");
const TaskView_1 = require("../../module/task/view/TaskView");
const FollowView_1 = require("../../module/follow/view/FollowView");
const RankView_1 = require("../../module/rank/view/RankView");
const GoldNotEnoughView_1 = require("../../module/common/view/GoldNotEnoughView");
const LevelRewardView_1 = require("../../module/common/view/LevelRewardView");
const OffLineRewardView_1 = require("../../module/common/view/OffLineRewardView");
const UserInfoView_1 = require("../../module/hall/view/UserInfoView");
const NewHeroView_1 = require("../../module/hall/view/NewHeroView");
const LuckPrizeRewardView_1 = require("../../module/luckPrize/view/LuckPrizeRewardView");
const LuckPrizeBoxView_1 = require("../../module/luckPrize/view/LuckPrizeBoxView");
/**
 * 界面注册类
 */
class ViewRegisterMgr {
    /** 初始化注册界面 */
    initRegisterView() {
        ViewMgr_1.default.Ins.register(ViewConst_1.default.ShopView, new ShopView_1.default());
        ViewMgr_1.default.Ins.register(ViewConst_1.default.DiamondBuyView, new DiamondBuyView_1.default());
        ViewMgr_1.default.Ins.register(ViewConst_1.default.LuckPrizeView, new LuckPrizeView_1.default());
        ViewMgr_1.default.Ins.register(ViewConst_1.default.DaySignView, new DaySignView_1.default());
        ViewMgr_1.default.Ins.register(ViewConst_1.default.TaskView, new TaskView_1.default());
        ViewMgr_1.default.Ins.register(ViewConst_1.default.FollowView, new FollowView_1.default());
        ViewMgr_1.default.Ins.register(ViewConst_1.default.RankView, new RankView_1.default());
        ViewMgr_1.default.Ins.register(ViewConst_1.default.GoldNotEnoughView, new GoldNotEnoughView_1.default());
        ViewMgr_1.default.Ins.register(ViewConst_1.default.LevelRewardView, new LevelRewardView_1.default());
        ViewMgr_1.default.Ins.register(ViewConst_1.default.OffLineRewardView, new OffLineRewardView_1.default());
        ViewMgr_1.default.Ins.register(ViewConst_1.default.UserInfoView, new UserInfoView_1.default());
        ViewMgr_1.default.Ins.register(ViewConst_1.default.NewHeroView, new NewHeroView_1.default());
        ViewMgr_1.default.Ins.register(ViewConst_1.default.LuckPrizeRewardView, new LuckPrizeRewardView_1.default());
        ViewMgr_1.default.Ins.register(ViewConst_1.default.LuckPrizeBoxView, new LuckPrizeBoxView_1.default());
    }
    static get Ins() {
        if (ViewRegisterMgr._instance == null) {
            ViewRegisterMgr._instance = new ViewRegisterMgr();
        }
        return ViewRegisterMgr._instance;
    }
}
exports.default = ViewRegisterMgr;
},{"../../module/common/view/DiamondBuyView":55,"../../module/common/view/GoldNotEnoughView":56,"../../module/common/view/LevelRewardView":57,"../../module/common/view/OffLineRewardView":59,"../../module/daySign/view/DaySignView":61,"../../module/follow/view/FollowView":62,"../../module/hall/view/NewHeroView":72,"../../module/hall/view/UserInfoView":73,"../../module/luckPrize/view/LuckPrizeBoxView":78,"../../module/luckPrize/view/LuckPrizeRewardView":79,"../../module/luckPrize/view/LuckPrizeView":80,"../../module/rank/view/RankView":83,"../../module/shop/view/ShopView":85,"../../module/task/view/TaskView":87,"./ViewMgr":50,"./const/ViewConst":53}],52:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MaskLayer_1 = require("../../layer/base/MaskLayer");
const AlignUtils_1 = require("../../utils/AlignUtils");
const ResUtils_1 = require("../../utils/ResUtils");
class BaseView extends Laya.View {
    /** 构造函数 */
    constructor($layer, $class, isShowMask = true) {
        super();
        this.isRemoveBanner = true;
        this._resources = null;
        this._myParent = $layer;
        this._isInit = false;
        this._isShowMask = isShowMask;
        this._ui = $class;
        this.initUIView();
    }
    /** 获取我的父级 */
    get myParent() {
        return this._myParent;
    }
    /** 添加到父级 */
    addToParent() {
        AlignUtils_1.default.setToScreenGoldenPos(this);
        if (this._isShowMask && this._myParent instanceof MaskLayer_1.default) {
            this._myParent.addChildWithMaskCall(this, () => {
                this.removeFromParent();
                this.close();
            });
        }
        else {
            this._myParent.addChild(this);
        }
    }
    /** 初始化UI界面 */
    initUIView() {
        try {
            this._ui = new this._ui();
        }
        catch (error) {
        }
        finally {
            this.addChild(this._ui);
            // this.size(this.ui.width, this.ui.height);
        }
    }
    /** 从父级移除 */
    removeFromParent() {
        this.removeSelf();
    }
    /** 对面板进行显示初始化，用于子类继承 */
    initUI() {
        this._isInit = true;
    }
    /** 对面板数据的初始化，用于子类继承 */
    initData() {
        this._isInit = true;
    }
    /** 添加监听事件 */
    addEvents() { }
    /** 移除监听事件 */
    removeEvents() { }
    /** 是否已经初始化 */
    isInit() {
        return this._isInit;
    }
    /** 面板是否显示 */
    isShow() {
        return this.stage != null && this.visible && this._myParent.contains(this);
    }
    /** 面板开启执行函数，用于子类继承 */
    open(...param) {
        this._datas = param;
    }
    /** 设置是否隐藏 */
    setVisible(value) {
        this.visible = value;
    }
    /** 设置初始加载资源 */
    setResources(resources) {
        this._resources = resources;
    }
    /** 加载面板所需资源 */
    loadResource(loadComplete, initComplete) {
        if (this._resources && this._resources.length > 0) {
            ResUtils_1.default.loadGroup(this._resources, () => {
                loadComplete && loadComplete();
                initComplete && initComplete();
            }, this);
        }
        else {
            loadComplete && loadComplete();
            initComplete && initComplete();
        }
    }
    /** 面板关闭执行函数，用于子类继承 */
    close(...param) {
        this.removeEvents();
        if (this.isRemoveBanner) {
            // SDKManager.Instance.closeBannerAd();
        }
    }
    /** 销毁 */
    destroy() {
        this.removeEvents();
        this._myParent = null;
        this._ui.removeSelf();
        this._ui = null;
        // SDKManager.Instance.closeBannerAd();
    }
    get ui() { return this._ui; }
    set ui(value) { this._ui = value; }
    get datas() { return this._datas; }
    set datas(value) { this._datas = value; }
}
exports.default = BaseView;
},{"../../layer/base/MaskLayer":25,"../../utils/AlignUtils":40,"../../utils/ResUtils":46}],53:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class ViewConst {
}
/** 商店 */
ViewConst.ShopView = 10000;
/** 钻石购买界面 */
ViewConst.DiamondBuyView = 10001;
/** 转盘抽奖界面 */
ViewConst.LuckPrizeView = 10002;
/** 转盘奖励界面 */
ViewConst.LuckPrizeRewardView = 10003;
/** 每日签到界面 */
ViewConst.DaySignView = 10004;
/** 任务界面 */
ViewConst.TaskView = 10005;
/** 关注有礼界面 */
ViewConst.FollowView = 10006;
/** 排行榜 */
ViewConst.RankView = 10007;
/** 金币不足 */
ViewConst.GoldNotEnoughView = 10008;
/** 等级礼包界面 */
ViewConst.LevelRewardView = 10009;
/** 离线奖励界面 */
ViewConst.OffLineRewardView = 10010;
/** 用户信息界面 */
ViewConst.UserInfoView = 10011;
/** 新武将界面 */
ViewConst.NewHeroView = 10012;
/** 转盘抽中倍率界面 */
ViewConst.LuckPrizeBoxView = 10013;
exports.default = ViewConst;
},{}],54:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ColorUtil_1 = require("../../../core_wq/utils/ColorUtil");
class ScaleAnimScript {
    constructor() {
        this.isMouseDown = false; //按下
        this.isMouseOut = false; //移除
    }
    set owner(value) {
        this.scaleBox = value;
        //自定义的脚本会有时序问题，所以在此添加一个延时
        this.scaleBox.frameOnce(2, this, this.onLoaded);
    }
    onLoaded() {
        this.scaleOrginValue = { x: this.scaleBox.scaleX, y: this.scaleBox.scaleY };
        this.scaleBox.on(Laya.Event.MOUSE_DOWN, this, this.mouseDown);
        this.scaleBox.on(Laya.Event.MOUSE_UP, this, this.mouseUp);
        this.scaleBox.on(Laya.Event.MOUSE_OUT, this, this.mouseOut);
    }
    mouseDown() {
        this.isMouseDown = true;
        this.isMouseOut = false;
        this.scaleSmall();
    }
    mouseUp() {
        if (this.isMouseDown) {
            this.scaleNormal();
        }
        this.isMouseDown = false;
    }
    mouseOut() {
        if (this.isMouseDown) {
            this.scaleNormal();
        }
        this.isMouseDown = false;
        this.isMouseOut = true;
    }
    mouseMove() {
        if (this.isMouseOut) {
            if (this.isHit(this.scaleBox)) {
                this.scaleSmall();
            }
            else {
                this.scaleNormal();
            }
        }
    }
    scaleSmall() {
        if (this.scaleBox) {
            this.scaleBox.scale(this.scaleOrginValue.x * 0.95, this.scaleOrginValue.y * 0.95);
            this.scaleBox.filters = ColorUtil_1.default.createColorFilter(1);
        }
    }
    scaleNormal() {
        if (this.scaleBox) {
            this.scaleBox.scale(this.scaleOrginValue.x, this.scaleOrginValue.y);
            this.scaleBox.filters = [];
        }
    }
    //点击检测
    isHit(_checkBox, _extW = 0, _extH = 0) {
        if (_checkBox) {
            let touchPos = _checkBox.getMousePoint();
            let touchArea = new Laya.Rectangle(0 - _extW / 2, 0 - _extH / 2, _checkBox.width + _extW, _checkBox.height + _extH);
            return touchArea.contains(touchPos.x, touchPos.y);
        }
        return false;
    }
}
exports.default = ScaleAnimScript;
},{"../../../core_wq/utils/ColorUtil":42}],55:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseView_1 = require("../../../core_wq/view/base/BaseView");
const LayerMgr_1 = require("../../../core_wq/layer/LayerMgr");
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
const HallControl_1 = require("../../hall/HallControl");
const MathUtil_1 = require("../../../core_wq/utils/MathUtil");
const PlayerMgr_1 = require("../../../core_wq/player/PlayerMgr");
const HttpMgr_1 = require("../../../core_wq/net/HttpMgr");
const MsgMgr_1 = require("../../../core_wq/msg/MsgMgr");
const GlobalData_1 = require("../../../core_wq/db/GlobalData");
class DiamondBuyView extends BaseView_1.default {
    constructor() {
        super(LayerMgr_1.default.Ins.subFrameLayer, layaMaxUI_1.ui.moduleView.common.DiamondBuyViewUI);
        this._price = 0;
    }
    initData() {
        super.initData();
        this._data = this.datas[0];
        if (this._data) {
            if (this._data.type == "hero") {
                this._heroConfig = GlobalData_1.default.getData(GlobalData_1.default.HeroConfigVO, this._data.value);
                this._price = HallControl_1.default.Ins.Model.getDiamondBuyHeroPrice(this._data.value, HallControl_1.default.Ins.Model.queryBuyHeroRecord(this._data.value, true));
                this.ui.txt_diamond.text = MathUtil_1.default.unitConversion(this._price);
                if (this._heroConfig) {
                    this.ui.txt_title.text = "购买" + this._heroConfig.name;
                }
            }
        }
    }
    addEvents() {
        this.ui.btn_buy.on(Laya.Event.CLICK, this, this.onBuyHandler);
    }
    removeEvents() {
        this.ui.btn_buy.off(Laya.Event.CLICK, this, this.onBuyHandler);
    }
    onBuyHandler() {
        if (this._data.type == "hero") {
            this.buyHeroHandler();
        }
    }
    buyHeroHandler() {
        let heroPriceInt = Math.floor(this._price);
        if (PlayerMgr_1.default.Ins.Info.userDiamond >= heroPriceInt) {
            HttpMgr_1.default.Ins.requestDiamondBuyOrder(heroPriceInt, (res) => {
                if (res) {
                    if (HallControl_1.default.Ins.createHero(this._data.value) == null)
                        return;
                    HttpMgr_1.default.Ins.requestDiamondBuy(res.order_id, (_res) => {
                        if (this._heroConfig) {
                            MsgMgr_1.default.Ins.showMsg("武将购买成功：" + this._heroConfig.name + "x1");
                        }
                        else {
                            MsgMgr_1.default.Ins.showMsg("武将购买成功");
                        }
                        HttpMgr_1.default.Ins.requestDiamondData();
                        //刷新消费记录
                        HallControl_1.default.Ins.Model.refreshBuyHeroRecord(this._data.value, true);
                    });
                }
                else {
                    MsgMgr_1.default.Ins.showMsg("购买失败");
                }
            });
        }
        else {
            MsgMgr_1.default.Ins.showMsg("元宝不足,做任务领元宝噢!");
        }
    }
}
exports.default = DiamondBuyView;
},{"../../../core_wq/db/GlobalData":7,"../../../core_wq/layer/LayerMgr":23,"../../../core_wq/msg/MsgMgr":27,"../../../core_wq/net/HttpMgr":31,"../../../core_wq/player/PlayerMgr":33,"../../../core_wq/utils/MathUtil":44,"../../../core_wq/view/base/BaseView":52,"../../../ui/layaMaxUI":88,"../../hall/HallControl":64}],56:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseView_1 = require("../../../core_wq/view/base/BaseView");
const LayerMgr_1 = require("../../../core_wq/layer/LayerMgr");
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
const HallControl_1 = require("../../hall/HallControl");
const MathUtil_1 = require("../../../core_wq/utils/MathUtil");
const ShareMgr_1 = require("../../../core_wq/msg/ShareMgr");
const MsgMgr_1 = require("../../../core_wq/msg/MsgMgr");
/**
 * 金币不足界面
 */
class GoldNotEnoughView extends BaseView_1.default {
    constructor() {
        super(LayerMgr_1.default.Ins.subFrameLayer, layaMaxUI_1.ui.moduleView.common.GoldNotEnoughViewUI);
        this._gold = 0;
    }
    initUI() {
        super.initUI();
        let vo = HallControl_1.default.Ins.Model.getPreNewHeroData(HallControl_1.default.Ins.Model.heroLevel);
        if (vo) {
            let price = HallControl_1.default.Ins.Model.getHeroBuyPrice(vo.buyPrice, HallControl_1.default.Ins.Model.queryBuyHeroRecordTop());
            this._gold = price * 5;
            this.ui.txt_price.text = MathUtil_1.default.unitConversion(this._gold);
        }
        let isAd = ShareMgr_1.default.Ins.isAdStage(12);
        if (isAd) {
            this.ui.txt_btn.text = "看视频领铜钱";
        }
        else {
            this.ui.txt_btn.text = "求助群友呀!";
        }
        this.ui.txt_lastTime.visible = !isAd;
        if (this.ui.txt_lastTime.visible) {
            this.ui.txt_lastTime.text = "今天剩余" + ShareMgr_1.default.Ins.getShareTimes(12) + "次";
        }
    }
    addEvents() {
        this.ui.btn_get.on(Laya.Event.CLICK, this, this.onGetReward);
    }
    removeEvents() {
        this.ui.btn_get.off(Laya.Event.CLICK, this, this.onGetReward);
    }
    onGetReward() {
        ShareMgr_1.default.Ins.showShareOrAdv((res) => {
            MsgMgr_1.default.Ins.showMsg("您获得铜钱：" + Number(this.ui.txt_price.text));
            HallControl_1.default.Ins.updateGold(this._gold, false);
        }, 12, false, true);
    }
}
exports.default = GoldNotEnoughView;
},{"../../../core_wq/layer/LayerMgr":23,"../../../core_wq/msg/MsgMgr":27,"../../../core_wq/msg/ShareMgr":30,"../../../core_wq/utils/MathUtil":44,"../../../core_wq/view/base/BaseView":52,"../../../ui/layaMaxUI":88,"../../hall/HallControl":64}],57:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseView_1 = require("../../../core_wq/view/base/BaseView");
const LayerMgr_1 = require("../../../core_wq/layer/LayerMgr");
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
const PlayerMgr_1 = require("../../../core_wq/player/PlayerMgr");
const MathUtil_1 = require("../../../core_wq/utils/MathUtil");
const HallControl_1 = require("../../hall/HallControl");
const EventsMgr_1 = require("../../../core_wq/event/EventsMgr");
const EventType_1 = require("../../../core_wq/event/EventType");
const ViewMgr_1 = require("../../../core_wq/view/ViewMgr");
const ViewConst_1 = require("../../../core_wq/view/const/ViewConst");
const ShareMgr_1 = require("../../../core_wq/msg/ShareMgr");
const HttpMgr_1 = require("../../../core_wq/net/HttpMgr");
/**
 * 等级礼包界面
 */
class LevelRewardView extends BaseView_1.default {
    constructor() {
        super(LayerMgr_1.default.Ins.subFrameLayer, layaMaxUI_1.ui.moduleView.common.LevelRewardViewUI);
        this._isGetAllReward = false;
    }
    initData() {
        super.initData();
        this._levelVO = this.datas[0];
        if (this._levelVO) {
        }
    }
    initView() {
        this._gold = Math.floor(this._levelVO.goldGift * PlayerMgr_1.default.Ins.Info.userIncomeSec);
        let diamond = Math.floor(this._levelVO.diamondsGift);
        let isAdvanced = diamond > 0;
        let shareItems = [];
        let isGetPrize = false; //是否已领取
        this.ui.txt_levelGift.text = this._levelVO.id + "";
        this.ui.txt_acc.text = Math.floor(this._levelVO.accSpeedTime) + "";
        this.ui.txt_gold.text = MathUtil_1.default.unitConversion(this._gold);
        this.ui.txt_diamond.text = Math.floor(this._levelVO.diamondsGift) + "";
        this.ui.btn_get.text.text = "领取";
        this.ui.btn_get.disabled = false;
        this.ui.btn_share.text.text = "炫耀";
        this.ui.btn_share.disabled = false;
    }
    addEvents() {
        this.ui.btn_get.on(Laya.Event.CLICK, this, this.onGetReward);
        this.ui.btn_share.on(Laya.Event.CLICK, this, this.onGetShareReward);
    }
    removeEvents() {
        this.ui.btn_get.off(Laya.Event.CLICK, this, this.onGetReward);
        this.ui.btn_share.off(Laya.Event.CLICK, this, this.onGetShareReward);
    }
    /** 普通礼包奖励 */
    onGetReward() {
        if (Math.floor(this._levelVO.accSpeedTime) > 0) {
            EventsMgr_1.default.Ins.dispatch(EventType_1.default.GAME_ACCE_START, Math.floor(this._levelVO.accSpeedTime));
        }
        if (this._gold > 0) {
            HallControl_1.default.Ins.updateGold(this._gold, false);
            this._gold = 0;
        }
        this.ui.btn_get.text.text = "已领取";
        this.ui.btn_get.disabled = true;
        this.closeView();
    }
    onGetShareReward() {
        // SDKMgr.Ins.showVideoAd((_res: any) => {
        //     if (_res && _res.isEnded || _res === undefined) {
        //         this.ui.btn_share.text.text = "已领取";
        //         this.ui.btn_share.disabled = true;
        //         HttpMgr.Ins.requestDiamondData();
        //         HttpMgr.Ins.requestShareAdFinish("levelReward", _res);
        //     }
        // }, () => {
        //无视频回调
        this.shareGetReward();
        // });
        this.closeView();
    }
    shareGetReward() {
        ShareMgr_1.default.Ins.showShareOrAdv((res) => {
            this.ui.btn_share.text.text = "已领取";
            this.ui.btn_share.disabled = true;
            HttpMgr_1.default.Ins.requestDiamondData();
        });
    }
    closeView() {
        if (this._isGetAllReward) {
            ViewMgr_1.default.Ins.close(ViewConst_1.default.LevelRewardView);
        }
        this._isGetAllReward = true;
    }
}
exports.default = LevelRewardView;
},{"../../../core_wq/event/EventType":19,"../../../core_wq/event/EventsMgr":20,"../../../core_wq/layer/LayerMgr":23,"../../../core_wq/msg/ShareMgr":30,"../../../core_wq/net/HttpMgr":31,"../../../core_wq/player/PlayerMgr":33,"../../../core_wq/utils/MathUtil":44,"../../../core_wq/view/ViewMgr":50,"../../../core_wq/view/base/BaseView":52,"../../../core_wq/view/const/ViewConst":53,"../../../ui/layaMaxUI":88,"../../hall/HallControl":64}],58:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
class MsgTipsView extends layaMaxUI_1.ui.moduleView.common.MsgTipsViewUI {
    constructor() {
        super();
        this._content = "";
    }
    onEnable() {
        this.txt_content.text = this._content;
        this.imgBg.width = this.txt_content.width + 80;
        this.width = this.imgBg.width;
    }
    set dataSource(value) {
        this._content = value;
    }
}
exports.default = MsgTipsView;
},{"../../../ui/layaMaxUI":88}],59:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseView_1 = require("../../../core_wq/view/base/BaseView");
const LayerMgr_1 = require("../../../core_wq/layer/LayerMgr");
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
const MathUtil_1 = require("../../../core_wq/utils/MathUtil");
const ShareMgr_1 = require("../../../core_wq/msg/ShareMgr");
const MsgMgr_1 = require("../../../core_wq/msg/MsgMgr");
const HallControl_1 = require("../../hall/HallControl");
/**
 * 离线奖励界面
 */
class OffLineRewardView extends BaseView_1.default {
    constructor() {
        super(LayerMgr_1.default.Ins.subFrameLayer, layaMaxUI_1.ui.moduleView.common.OffLineRewardViewUI);
        this._gold = 0;
    }
    initData() {
        super.initData();
        this._gold = this.datas[0];
        this.ui.txt_gold.text = MathUtil_1.default.unitConversion(this._gold);
    }
    addEvents() {
        this.ui.btn_get.on(Laya.Event.CLICK, this, this.onGetReward);
    }
    removeEvents() {
        this.ui.btn_get.off(Laya.Event.CLICK, this, this.onGetReward);
    }
    onGetReward() {
        ShareMgr_1.default.Ins.showShareOrAdv(() => {
            MsgMgr_1.default.Ins.showMsg("您获得铜钱：" + MathUtil_1.default.unitConversion(this._gold));
            HallControl_1.default.Ins.updateGold(this._gold, false);
        }, 1);
    }
}
exports.default = OffLineRewardView;
},{"../../../core_wq/layer/LayerMgr":23,"../../../core_wq/msg/MsgMgr":27,"../../../core_wq/msg/ShareMgr":30,"../../../core_wq/utils/MathUtil":44,"../../../core_wq/view/base/BaseView":52,"../../../ui/layaMaxUI":88,"../../hall/HallControl":64}],60:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
const DaySignView_1 = require("./DaySignView");
const HttpMgr_1 = require("../../../core_wq/net/HttpMgr");
const MsgMgr_1 = require("../../../core_wq/msg/MsgMgr");
const ViewMgr_1 = require("../../../core_wq/view/ViewMgr");
const ViewConst_1 = require("../../../core_wq/view/const/ViewConst");
const EventsMgr_1 = require("../../../core_wq/event/EventsMgr");
const EventType_1 = require("../../../core_wq/event/EventType");
class DaySignItem extends layaMaxUI_1.ui.moduleView.daySign.DaySignItemUI {
    constructor() {
        super();
        this._diamond = 0;
        this._day = 0;
    }
    set dataSource(value) {
        this._day = value;
        this._diamond = DaySignView_1.default.SignData.prize["day_" + this._day];
        this.txt_title.text = "第" + this._day + "天";
        this.txt_diamond.text = "x" + this._diamond;
        if (this._day <= DaySignView_1.default.SignData.sign.day) {
            this.btn_get.skin = "images/daySign/day_prize_item1.png";
            this.imgGet.skin = "images/daySign/day_prize_get.png";
            if (this._day == DaySignView_1.default.SignData.sign.day && DaySignView_1.default.SignData.sign.status == 0) {
                this.imgGet.skin = "images/daySign/day_prize_get_no.png";
                this.btn_get.on(Laya.Event.CLICK, this, this.onGetReward);
                EventsMgr_1.default.Ins.addListener(EventType_1.default.DAYSIGN_REWARD_COMPLETE, this.onRewardGetComplete, this);
            }
        }
    }
    onGetReward() {
        if (DaySignView_1.default.SignData && DaySignView_1.default.SignData.sign) {
            let day = DaySignView_1.default.SignData.sign.day;
            HttpMgr_1.default.Ins.requestDaySignPrize(day, (_res) => {
                if (_res) {
                    if (_res.code == 1) {
                        this.onRewardGetComplete();
                    }
                    else if (_res.code == 2) {
                        MsgMgr_1.default.Ins.showMsg("今日签到奖励已领取");
                    }
                    else {
                        MsgMgr_1.default.Ins.showMsg("签到奖励领取失败");
                    }
                }
            });
        }
    }
    onRewardGetComplete() {
        MsgMgr_1.default.Ins.showMsg("签到奖励领取成功：元宝x" + this._diamond);
        this.imgGet.skin = "images/daySign/day_prize_get.png";
        HttpMgr_1.default.Ins.requestDiamondData();
        ViewMgr_1.default.Ins.close(ViewConst_1.default.DaySignView);
    }
}
exports.default = DaySignItem;
},{"../../../core_wq/event/EventType":19,"../../../core_wq/event/EventsMgr":20,"../../../core_wq/msg/MsgMgr":27,"../../../core_wq/net/HttpMgr":31,"../../../core_wq/view/ViewMgr":50,"../../../core_wq/view/const/ViewConst":53,"../../../ui/layaMaxUI":88,"./DaySignView":61}],61:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseView_1 = require("../../../core_wq/view/base/BaseView");
const LayerMgr_1 = require("../../../core_wq/layer/LayerMgr");
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
const ViewMgr_1 = require("../../../core_wq/view/ViewMgr");
const ViewConst_1 = require("../../../core_wq/view/const/ViewConst");
const HttpMgr_1 = require("../../../core_wq/net/HttpMgr");
const MsgMgr_1 = require("../../../core_wq/msg/MsgMgr");
const EventsMgr_1 = require("../../../core_wq/event/EventsMgr");
const EventType_1 = require("../../../core_wq/event/EventType");
const RedPointMgr_1 = require("../../../core_wq/msg/RedPointMgr");
/**
 * 每日签到界面
 */
class DaySignView extends BaseView_1.default {
    constructor() {
        super(LayerMgr_1.default.Ins.frameLayer, layaMaxUI_1.ui.moduleView.daySign.DaySignViewUI);
        this.setResources(["daySign"]);
    }
    initUI() {
        super.initUI();
        HttpMgr_1.default.Ins.requestSignInfo((data) => {
            DaySignView.SignData = data;
            if (DaySignView.SignData) {
                this.ui.lists.array = [1, 2, 3, 4, 5, 6];
                this.ui.lists.renderHandler = Laya.Handler.create(this, this.onListRender, null, false);
                this.ui.txt_diamond.text = "x" + DaySignView.SignData.prize["day_7"];
                if (7 <= DaySignView.SignData.sign.day) {
                    this.ui.btn_lastGet.skin = "images/daySign/day_prize_item2.png";
                    this.ui.imgGet.skin = "images/daySign/day_prize_get.png";
                    if (7 == DaySignView.SignData.sign.day && DaySignView.SignData.sign.status == 0) {
                        this.ui.imgGet.visible = false;
                        this.ui.btn_lastGet.on(Laya.Event.CLICK, this, this.onGetReward);
                    }
                }
            }
        });
    }
    addEvents() {
        this.ui.btn_get.on(Laya.Event.CLICK, this, this.onGetReward);
        this.ui.btn_close.on(Laya.Event.CLICK, this, this.onCloseHandler);
    }
    removeEvents() {
        this.ui.btn_get.off(Laya.Event.CLICK, this, this.onGetReward);
        this.ui.btn_lastGet.off(Laya.Event.CLICK, this, this.onGetReward);
        this.ui.btn_close.off(Laya.Event.CLICK, this, this.onCloseHandler);
    }
    /** 领取奖励 */
    onGetReward() {
        if (DaySignView.SignData && DaySignView.SignData.sign) {
            let day = DaySignView.SignData.sign.day;
            HttpMgr_1.default.Ins.requestDaySignPrize(day, (_res) => {
                if (_res) {
                    if (_res.code == 1) {
                        if (day < 7) {
                            EventsMgr_1.default.Ins.dispatch(EventType_1.default.DAYSIGN_REWARD_COMPLETE);
                        }
                        else {
                            HttpMgr_1.default.Ins.requestDiamondData();
                            this.ui.imgGet.visible = true;
                            ViewMgr_1.default.Ins.close(ViewConst_1.default.DaySignView);
                            MsgMgr_1.default.Ins.showMsg("签到奖励领取成功：元宝x" + DaySignView.SignData.prize["day7"]);
                        }
                        if (RedPointMgr_1.default.Ins.isShowSignRedPoint) {
                            RedPointMgr_1.default.Ins.removeSignRedPoint();
                        }
                    }
                    else if (_res.code == 2) {
                        MsgMgr_1.default.Ins.showMsg("今日签到奖励已领取");
                    }
                    else {
                        MsgMgr_1.default.Ins.showMsg("签到奖励领取失败");
                    }
                }
            });
        }
    }
    onCloseHandler() {
        ViewMgr_1.default.Ins.close(ViewConst_1.default.DaySignView);
    }
    onListRender(cell, index) {
        if (index > this.ui.lists.array.length) {
            return;
        }
        let item = cell.getChildByName("item");
        if (item) {
            let info = this.ui.lists.array[index];
            item.dataSource = info;
        }
    }
}
DaySignView.SignData = null;
exports.default = DaySignView;
},{"../../../core_wq/event/EventType":19,"../../../core_wq/event/EventsMgr":20,"../../../core_wq/layer/LayerMgr":23,"../../../core_wq/msg/MsgMgr":27,"../../../core_wq/msg/RedPointMgr":29,"../../../core_wq/net/HttpMgr":31,"../../../core_wq/view/ViewMgr":50,"../../../core_wq/view/base/BaseView":52,"../../../core_wq/view/const/ViewConst":53,"../../../ui/layaMaxUI":88}],62:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseView_1 = require("../../../core_wq/view/base/BaseView");
const LayerMgr_1 = require("../../../core_wq/layer/LayerMgr");
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
const ViewMgr_1 = require("../../../core_wq/view/ViewMgr");
const ViewConst_1 = require("../../../core_wq/view/const/ViewConst");
const HttpMgr_1 = require("../../../core_wq/net/HttpMgr");
class FollowView extends BaseView_1.default {
    constructor() {
        super(LayerMgr_1.default.Ins.frameLayer, layaMaxUI_1.ui.moduleView.follow.FollowViewUI);
    }
    initUI() {
        super.initUI();
    }
    addEvents() {
        this.ui.btn_get.on(Laya.Event.CLICK, this, this.onGetReward);
        this.ui.btn_close.on(Laya.Event.CLICK, this, this.onCloseHandler);
    }
    removeEvents() {
        this.ui.btn_get.off(Laya.Event.CLICK, this, this.onGetReward);
        this.ui.btn_close.off(Laya.Event.CLICK, this, this.onCloseHandler);
    }
    onGetReward() {
        HttpMgr_1.default.Ins.requestAccountRewardPrize();
    }
    onCloseHandler() {
        ViewMgr_1.default.Ins.close(ViewConst_1.default.FollowView);
    }
}
exports.default = FollowView;
},{"../../../core_wq/layer/LayerMgr":23,"../../../core_wq/net/HttpMgr":31,"../../../core_wq/view/ViewMgr":50,"../../../core_wq/view/base/BaseView":52,"../../../core_wq/view/const/ViewConst":53,"../../../ui/layaMaxUI":88}],63:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
const EffectUtil_1 = require("../../../core_wq/utils/EffectUtil");
/**
 * 新手指引说话提示框
 */
class GuideSpeakView extends layaMaxUI_1.ui.moduleView.guide.GuideSpeakViewUI {
    constructor() {
        super();
    }
    onEnable() {
        EffectUtil_1.default.playTypewriterEffect(this.txt_content, this._content, 50, this._speakComplete);
    }
    /** 设置说话内容 */
    setSpeakContent(content, speakComplete = null) {
        this._content = content;
        this._speakComplete = speakComplete;
        if (this.txt_content) {
            EffectUtil_1.default.playTypewriterEffect(this.txt_content, this._content, 50, this._speakComplete);
        }
    }
}
exports.default = GuideSpeakView;
},{"../../../core_wq/utils/EffectUtil":43,"../../../ui/layaMaxUI":88}],64:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const HallModel_1 = require("./model/HallModel");
const GlobalData_1 = require("../../core_wq/db/GlobalData");
const PlayerMgr_1 = require("../../core_wq/player/PlayerMgr");
const EventsMgr_1 = require("../../core_wq/event/EventsMgr");
const EventType_1 = require("../../core_wq/event/EventType");
const PlayerInfo_1 = require("../../core_wq/player/data/PlayerInfo");
const MathUtil_1 = require("../../core_wq/utils/MathUtil");
const MsgMgr_1 = require("../../core_wq/msg/MsgMgr");
const StorageUtil_1 = require("../../core_wq/utils/StorageUtil");
const SoundMgr_1 = require("../../core_wq/sound/SoundMgr");
const SoundType_1 = require("../../core_wq/sound/SoundType");
const ShareMgr_1 = require("../../core_wq/msg/ShareMgr");
const ViewMgr_1 = require("../../core_wq/view/ViewMgr");
const ViewConst_1 = require("../../core_wq/view/const/ViewConst");
const EffectUtil_1 = require("../../core_wq/utils/EffectUtil");
const GuideMgr_1 = require("../../core_wq/guide/GuideMgr");
class HallControl extends Laya.Script {
    constructor() {
        super();
        /** 兵营满席动画 */
        this._battleHeroTimeLine = null;
        this._battleHeroIndex = 0;
        this.initModel();
    }
    onAwake() {
        this.initModel();
    }
    initModel() {
        if (this._model == null) {
            this._model = new HallModel_1.default();
        }
    }
    /** 购买英雄 */
    buyHero(heroInfo) {
        if (heroInfo) {
            let buyPrice = this._model.getHeroBuyPrice(heroInfo.buyPrice, this._model.queryBuyHeroRecord(heroInfo.id));
            if (PlayerMgr_1.default.Ins.Info.userGold >= buyPrice) {
                if (this.createHero(heroInfo.id) == null)
                    return;
                this.updateGold(PlayerMgr_1.default.Ins.Info.userGold - buyPrice);
                this._model.refreshBuyHeroRecord(heroInfo.id);
                buyPrice = this._model.getHeroBuyPrice(heroInfo.buyPrice, this._model.queryBuyHeroRecord(heroInfo.id));
                this.hallScene.txt_price.text = MathUtil_1.default.unitConversion(buyPrice);
                this.hallScene.frameOnce(1, this.hallScene, () => { this.sortHero(); }); //英雄排序
            }
            else {
                if (ShareMgr_1.default.Ins.isShareEnable && (ShareMgr_1.default.Ins.getAdTimes(12) > 0 || ShareMgr_1.default.Ins.getShareTimes(12) > 0)) {
                    ViewMgr_1.default.Ins.open(ViewConst_1.default.GoldNotEnoughView);
                }
                else {
                    MsgMgr_1.default.Ins.showMsg("很抱歉，铜钱不足");
                }
            }
        }
    }
    /** 创建英雄 */
    createHero(id, isBackward = false) {
        for (let index = 0; index < this._model.allHeroCount; index++) {
            let curIndex = index;
            if (isBackward) {
                curIndex = this._model.allHeroCount - index - 1;
            }
            let cell = this.hallScene.lists_head.getCell(index);
            if (cell) {
                let headItem = cell.getChildByName("hero");
                if (headItem && headItem.IsEmpty && !headItem.IsLock && !headItem.IsBox) {
                    headItem.Info.heroId = id;
                    headItem.updateHeadSkin(id, curIndex);
                    headItem.setStage(1);
                    //设置战斗中的英雄
                    this._battleHeroIndex++;
                    this._startPos = {
                        x: MathUtil_1.default.rangeInt(10, 50) + this.hallScene.width * 0.5 * Math.random(),
                        y: this.hallScene.beginEventView.y + MathUtil_1.default.rangeInt(-150, 200)
                    };
                    EffectUtil_1.default.playBoneEffect("ui_born", { x: this._startPos.x - 20, y: this._startPos.y + 200 });
                    if (this._battleHeroIndex >= this.hallScene.lists_head.array.length) {
                        this._battleHeroIndex = 0;
                    }
                    this._model.heroCount += 1;
                    this.hallScene.timerOnce(100, this.hallScene, () => {
                        this.createHeroBone(headItem, this._startPos);
                        this.setBattleHeroCount(PlayerMgr_1.default.Ins.Info.userRuncarCount + 1);
                        SoundMgr_1.default.Ins.playEffect(SoundType_1.default.SUMMON_HERO);
                        this.setSaveHeroData(headItem);
                        GuideMgr_1.default.Ins.onNextStep();
                    });
                    return headItem;
                }
            }
        }
        if (!isBackward) {
            MsgMgr_1.default.Ins.showMsg("兵营不足,快去合成武将哟!");
        }
        return null;
    }
    /** 创建英雄龙骨动画 */
    createHeroBone(headItem, startPos) {
        headItem.removeBattleHero();
        headItem.createBattleHero(this.hallScene, startPos);
        this._model.is_reset_zorder = true;
        if (this._model.userAcceValue > 1) {
            headItem.BattleHero.setMoveAccelerate(this._model.userAcceValue);
        }
    }
    /** 设置格子是否锁 */
    setCellIsLock(lockIndex) {
        for (let index = 0; index < this._model.allHeroCount; index++) {
            let cell = this.hallScene.lists_head.getCell(index);
            if (cell) {
                let headItem = cell.getChildByName("hero");
                if (headItem) {
                    headItem.setLock(index >= lockIndex);
                }
            }
        }
    }
    /** 设置用户等级 */
    setUserLevel(level) {
        PlayerMgr_1.default.Ins.Info.userLevel = level;
        EventsMgr_1.default.Ins.dispatch(EventType_1.default.UPDATE_USER_LEVEL);
        EventsMgr_1.default.Ins.dispatch(EventType_1.default.UPDATE_SYSTEM_BTN);
        this.refreshUserData();
    }
    /** 刷新用户相关数据 */
    refreshUserData() {
        let levelVO = GlobalData_1.default.getData(GlobalData_1.default.LevelVO, PlayerMgr_1.default.Ins.Info.userLevel);
        if (levelVO) {
            this.setCellIsLock(levelVO.openCellCount);
            this.setBattleHeroCountMax(levelVO.battleCount);
        }
    }
    /** 设置用户经验 */
    setUserExp(upExp) {
        PlayerMgr_1.default.Ins.Info.userExp = upExp;
        let upNeedexp = 0;
        let nextLevel = PlayerMgr_1.default.Ins.Info.userLevel + 1;
        let levelVO = GlobalData_1.default.getData(GlobalData_1.default.LevelVO, nextLevel);
        if (levelVO) {
            upNeedexp = levelVO.upNeedexp;
            let exp = PlayerMgr_1.default.Ins.Info.userExp - upNeedexp;
            if (exp >= 0) {
                this.setUserLevel(nextLevel);
                PlayerMgr_1.default.Ins.Info.userLevelExtraIncome = 1 + levelVO.extraProduce;
                if (levelVO.goldGift > 0) { //等级奖励
                    ViewMgr_1.default.Ins.open(ViewConst_1.default.LevelRewardView, null, levelVO);
                }
                else {
                    MsgMgr_1.default.Ins.showMsg("主人,恭喜您升级了!");
                    SoundMgr_1.default.Ins.playEffect(SoundType_1.default.UPGRADE_HERO);
                }
                this.setUserExp(exp);
                this.updateMapData(true);
            }
            EventsMgr_1.default.Ins.dispatch(EventType_1.default.UPDATE_USER_EXP, upNeedexp);
        }
    }
    /** 更新地图数据 */
    updateMapData(isUpLevel = false) {
        //更新城池名字
        let mapVO = GlobalData_1.default.getData(GlobalData_1.default.MapVO, PlayerMgr_1.default.Ins.Info.userLevel);
        if (mapVO) {
            this._hallScene.txt_mapName.text = mapVO.name;
        }
    }
    /** 刷新每秒金币收益 */
    refreshIncomeSec() {
        let incomePerSec = 0;
        for (let index = 0; index < this._model.allHeroCount; index++) {
            let cell = this.hallScene.lists_head.getCell(index);
            if (cell) {
                let headItem = cell.getChildByName("hero");
                if (headItem) {
                    incomePerSec += this.getHeroIncomeSecGold(headItem.Info.heroId) * PlayerMgr_1.default.Ins.Info.userExtraIncome * PlayerMgr_1.default.Ins.Info.userAcceValue * PlayerMgr_1.default.Ins.Info.userLevelExtraIncome;
                }
            }
        }
        EventsMgr_1.default.Ins.dispatch(EventType_1.default.UPDATE_INCOME, incomePerSec);
    }
    /**
     * 更新金币
     * @param gold 金币数量
     * @param isTotal true:是否直接替换金额  false:差额
     */
    updateGold(gold, isTotal = true) {
        EventsMgr_1.default.Ins.dispatch(EventType_1.default.UPDATE_CURRENCY, PlayerInfo_1.default.GOLD, gold, isTotal); //更新用户获得金币
        this.hallScene.updateRecruitData();
    }
    /** 更新英雄等级 */
    updateHeroLevel(level) {
        if (this._model.heroLevel < this._model.heroMaxLevel) {
            if (this._model.heroLevel < level) {
                this._model.heroLevel = level;
                Laya.timer.callLater(this, StorageUtil_1.default.saveStorageToLocal, [true]);
                return true;
            }
        }
        else {
            MsgMgr_1.default.Ins.showMsg("已达到最高级了耶!");
        }
        return false;
    }
    /** 获取英雄合成经验 */
    getHeroExp(heroId) {
        let heroConfig = GlobalData_1.default.getData(GlobalData_1.default.HeroConfigVO, heroId);
        if (heroConfig) {
            return heroConfig.syntheticExp;
        }
        return 0;
    }
    /** 获取英雄每秒产出金币 */
    getHeroIncomeSecGold(heroId) {
        let heroConfig = GlobalData_1.default.getData(GlobalData_1.default.HeroConfigVO, heroId);
        if (heroConfig) {
            return heroConfig.PerSecCoin;
        }
        return 0;
    }
    /** 获取英雄一共的收益金币 */
    getHeroIncomeTotalGold(heroId) {
        let heroConfig = GlobalData_1.default.getData(GlobalData_1.default.HeroConfigVO, heroId);
        if (heroConfig) {
            return heroConfig.totalCoin;
        }
        return 0;
    }
    /** 是否新手 */
    get IsGuide() {
        return this._model.heroLevel < 3;
    }
    /** 是否被点击 */
    isHit(checkObj, extW = 0, extH = 0) {
        if (checkObj) {
            let touchPos = checkObj.getMousePoint();
            let touchArea = new Laya.Rectangle(0 - extW / 2, 0 - extH / 2, checkObj.width + extW, checkObj.height + extH);
            return touchArea.contains(touchPos.x, touchPos.y);
        }
        return false;
    }
    /** 英雄按等级排序 */
    sortHero() {
        let heroSortList = [];
        for (var index = 0; index < this._model.allHeroCount; index++) {
            let cell = this.hallScene.lists_head.getCell(index);
            if (cell) {
                let headItem = cell.getChildByName("hero");
                if (headItem && !headItem.IsEmpty && !headItem.IsBox && !headItem.IsLock) {
                    let heroData = {
                        heroId: headItem.Info.heroId,
                        heroStage: headItem.HeroStage,
                        battleHero: headItem.BattleHero,
                        currHp: headItem.hpBar.value
                    };
                    if (index < 1) {
                        heroSortList.push(heroData);
                    }
                    else {
                        let maxCount = heroSortList.length;
                        let maxIndex = maxCount;
                        for (var j = 0; j < maxCount; j++) {
                            if (heroSortList[j] && heroSortList[j].heroId < headItem.Info.heroId) {
                                maxIndex = j;
                                break;
                            }
                        }
                        heroSortList.splice(maxIndex, 0, heroData);
                    }
                }
            }
        }
        let heroIndex = 0;
        for (var index = 0; index < this._model.allHeroCount; index++) {
            let cell = this.hallScene.lists_head.getCell(index);
            if (cell) {
                let headItem = cell.getChildByName("hero");
                if (headItem && !headItem.IsBox && !headItem.IsLock) {
                    if (heroIndex >= heroSortList.length) {
                        headItem.reset();
                    }
                    else {
                        let heroData = heroSortList[heroIndex];
                        headItem.updateHeadSkin(heroData.heroId);
                        headItem.setStage(heroData.heroStage);
                        if (headItem.BattleHero == null) {
                            headItem.BattleHero = heroData.battleHero;
                            headItem.hpBar.value = heroData.currHp;
                            headItem.hpBar.visible = true;
                        }
                        heroIndex++;
                    }
                    this.setSaveHeroData(headItem);
                }
            }
        }
    }
    /** 设置英雄数据并保存 */
    setSaveHeroData(headItemOne, headItemTwo = null) {
        for (let key in this._model.AllHeros) {
            let element = this._model.AllHeros[key];
            if (headItemOne) {
                if (element && element.id == headItemOne.heroIndex) {
                    element.heroId = headItemOne.Info.heroId;
                }
            }
            //交换车辆
            if (headItemTwo) {
                if (element && element.id == headItemTwo.heroIndex) {
                    element.heroId = headItemTwo.Info.heroId;
                }
            }
        }
        Laya.timer.callLater(this, StorageUtil_1.default.saveStorageToLocal, [true]);
    }
    /** 设置战斗英雄的数量 */
    setBattleHeroCount(value) {
        PlayerMgr_1.default.Ins.Info.userRuncarCount = value;
        this.refreshBattleHeroCount();
        this.refreshIncomeSec();
        SoundMgr_1.default.Ins.playEffect(SoundType_1.default.ENTER_GAME);
    }
    /** 设置战斗英雄的最大数量 */
    setBattleHeroCountMax(value) {
        PlayerMgr_1.default.Ins.Info.userRuncarCountMax = value;
        this.refreshBattleHeroCount();
    }
    /** 刷新战斗中英雄数量 */
    refreshBattleHeroCount() {
        if (PlayerMgr_1.default.Ins.Info.userRuncarCount < PlayerMgr_1.default.Ins.Info.userRuncarCountMax) {
            PlayerMgr_1.default.Ins.Info.userExtraIncome = 1;
            this.hallScene.txt_battleCount.text = PlayerMgr_1.default.Ins.Info.userRuncarCount + "/" + PlayerMgr_1.default.Ins.Info.userRuncarCountMax;
        }
        else {
            PlayerMgr_1.default.Ins.Info.userExtraIncome = 1.1;
            this.hallScene.txt_battleCount.text = "+10%";
        }
        //跑道已满效果
        if ((PlayerMgr_1.default.Ins.Info.userRuncarCount < PlayerMgr_1.default.Ins.Info.userRuncarCountMax)) {
            this.hallScene.imgBattleCount.skin = "images/hall/game_running_num1.png";
            this.hallScene.txt_battleCount.y = 3;
            this.hallScene.txt_battleCount.color = "#000000";
            //停止缩放
            if (this._battleHeroTimeLine) {
                this._battleHeroTimeLine.pause();
                this.hallScene.imgBattleCount.scale(1, 1);
            }
        }
        else {
            this.hallScene.imgBattleCount.skin = "images/hall/game_running_num2.png";
            this.hallScene.txt_battleCount.y = 25;
            this.hallScene.txt_battleCount.color = "#b11a1a";
            //开始缩放动画
            if (this._battleHeroTimeLine == null) {
                this._battleHeroTimeLine = new Laya.TimeLine();
                this._battleHeroTimeLine.addLabel("scale1", 0).to(this.hallScene.imgBattleCount, { scaleX: 0.9, scaleY: 0.9 }, 300)
                    .addLabel("scale2", 100).to(this.hallScene.imgBattleCount, { scaleX: 1, scaleY: 1 }, 300);
            }
            this._battleHeroTimeLine.play(0, true);
        }
        this.hallScene.imgBattleGold.visible = !(PlayerMgr_1.default.Ins.Info.userRuncarCount < PlayerMgr_1.default.Ins.Info.userRuncarCountMax);
        this.hallScene.imgBattleGold.x = 92;
        this.hallScene.imgBattleGold.y = 21;
        this.hallScene.imgBattleCount.alpha = 0.9;
    }
    /** 设置战斗英雄加速效果 */
    setBattleHeroAcce(accValue) {
        this._model.userAcceValue = accValue;
        for (var index = 0; index < this._model.allHeroCount; index++) {
            let cell = this.hallScene.lists_head.getCell(index);
            if (cell) {
                let headItem = cell.getChildByName("hero");
                if (headItem && headItem.HeroStage == 1) {
                    let battleHero = headItem.BattleHero;
                    if (battleHero) {
                        battleHero.setMoveAccelerate(this._model.userAcceValue);
                    }
                }
            }
        }
        this.refreshIncomeSec();
    }
    /** 获取功能开放列表 */
    getSystemBtnList() {
        let datas = GlobalData_1.default.getDataByCondition(GlobalData_1.default.SystemVO, (item) => {
            return PlayerMgr_1.default.Ins.Info.userLevel >= item.openLevel;
        });
        if (datas && datas.length > 0) {
            datas.sort((item1, item2) => item1.sort - item2.sort);
            return datas;
        }
        return null;
    }
    set Model(value) { this._model = value; }
    get Model() { return this._model; }
    set hallScene(value) {
        this._hallScene = value;
    }
    get hallScene() {
        return this._hallScene;
    }
    static get Ins() {
        if (HallControl._instance == null) {
            HallControl._instance = new HallControl();
        }
        return HallControl._instance;
    }
}
exports.default = HallControl;
},{"../../core_wq/db/GlobalData":7,"../../core_wq/event/EventType":19,"../../core_wq/event/EventsMgr":20,"../../core_wq/guide/GuideMgr":22,"../../core_wq/msg/MsgMgr":27,"../../core_wq/msg/ShareMgr":30,"../../core_wq/player/PlayerMgr":33,"../../core_wq/player/data/PlayerInfo":34,"../../core_wq/sound/SoundMgr":38,"../../core_wq/sound/SoundType":39,"../../core_wq/utils/EffectUtil":43,"../../core_wq/utils/MathUtil":44,"../../core_wq/utils/StorageUtil":47,"../../core_wq/view/ViewMgr":50,"../../core_wq/view/const/ViewConst":53,"./model/HallModel":68}],65:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class SystemConfig {
}
/** 签到 */
SystemConfig.SIGN = 10001;
/** 排行榜 */
SystemConfig.RANK = 10002;
/** 转盘 */
SystemConfig.LUCK_PRIZE = 10003;
/** 任务 */
SystemConfig.TASK = 10004;
/** 邀请有礼 */
SystemConfig.INVITE = 10005;
/** 关注 */
SystemConfig.FOLLOW = 10006;
/** 投诉建议 */
SystemConfig.FEEDBACK = 10006;
exports.default = SystemConfig;
},{}],66:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseCharacter_1 = require("./base/BaseCharacter");
const GlobalData_1 = require("../../../core_wq/db/GlobalData");
const PathConfig_1 = require("../../../core_wq/config/PathConfig");
const EffectUtil_1 = require("../../../core_wq/utils/EffectUtil");
const PointUtils_1 = require("../../../core_wq/utils/PointUtils");
const MathUtil_1 = require("../../../core_wq/utils/MathUtil");
const ItemExplode_1 = require("../../../core_wq/effect/ItemExplode");
class Hero extends BaseCharacter_1.default {
    constructor() {
        super();
        this.heroId = 0;
        this.hp = 6;
        this.maxHp = 6;
        /** 是否显示自白 */
        this._isShowDialogue = false;
        /** 自白列表 */
        this._dialogueList = [];
        /** 英雄模型路径 */
        this._heroPath = '';
        /** 坐骑模型路径 */
        this._horsePath = '';
        this._heroBone = null;
        this._horseBone = null;
        /** 攻击动画key */
        this._atkAnimKey = 'attack';
        this._walkKey = "walk";
        this._heroKey = "hero_key";
        this._horseKey = "horse_key";
        /** 骨骼动画模板 */
        this._spineFactory = [];
        this._enemyData = null;
        this._enemyModelUrlArray = [
            { id: "enemy_1", heroUrl: "images/boneAnim/enemy/bubinglv.sk", horseUrl: "" },
            { id: "enemy_2", heroUrl: "images/boneAnim/enemy/gongbinglv.sk", horseUrl: "" },
            { id: "enemy_3", heroUrl: "images/boneAnim/enemy/qibinglv.sk", horseUrl: "images/boneAnim/horse/shibingzuoqi.sk" },
        ]; //敌军模型
    }
    /** 设置人物龙骨 */
    setCharacterBone(id) {
        super.setCharacterBone(id);
        this.heroId = id;
        this._heroVO = GlobalData_1.default.getData(GlobalData_1.default.HeroVO, this.heroId);
        if (this._heroVO) {
            //设置独白
            this._dialogueList = [this._heroVO.dialogue];
            this._atkAnimKey = this._heroVO.atkAnimKey;
            //移除老模型
            this.removeChildByName(this._heroKey);
            this.removeChildByName(this._horseKey);
            this.state = -1;
            this.createHeroBone();
        }
    }
    /** 创建英雄龙骨动画 */
    createHeroBone() {
        this._heroPath = this._heroVO.modelImgUrl;
        if (this._heroPath && this._heroPath.length > 0) {
            this._heroPath = PathConfig_1.default.BONE_PATH.replace("{0}", this._heroPath);
        }
        this._heroBone = Laya.Pool.getItemByClass("bone" + this.heroId, Laya.Skeleton);
        if (this._heroBone.name != (this._heroKey + this.heroId)) {
            if (this._heroPath && this._heroPath.length > 0) {
                this.createSpineTemplate(this._heroPath, (spineFactory) => {
                    this._heroBone = spineFactory.buildArmature(0);
                    this._heroBone.name = this._heroKey + this.heroId;
                    this._heroBone.zOrder = 1;
                    this._heroBone.playbackRate(0.7);
                    this.addChild(this._heroBone);
                    this._heroBone.pos(50, 140);
                    if (this._horsePath == null || this._horsePath.length < 1) { //没坐骑,坐标下调
                        this._heroBone.y += 50;
                    }
                    this._heroBone.play(this._walkKey, true);
                });
            }
        }
        else {
            this.addChild(this._heroBone);
            this._heroBone.play(this._walkKey, true);
        }
    }
    /** 创建坐骑龙骨动画 */
    createHorseBone() {
        this._horsePath = this._heroVO.horse == "0" ? "" : this._heroVO.horse;
        if (this._horsePath && this._horsePath.length > 0) {
            this._horsePath = PathConfig_1.default.BONE_PATH.replace("{0}", this._horsePath);
        }
        this._horseBone = Laya.Pool.getItemByClass("horse_bone" + this.heroId, Laya.Skeleton);
        if (this._horseBone.name != (this._horseKey + this.heroId)) {
            if (this._horsePath && this._horsePath.length > 0) {
                this.createSpineTemplate(this._horsePath, (_spineFactory) => {
                    this._horseBone = _spineFactory.buildArmature(0);
                    this._horseBone.name = this._horseKey + this.heroId;
                    this._horseBone.playbackRate(0.7);
                    this.addChild(this._horseBone);
                    this._horseBone.pos(50, 140);
                    this._horseBone.play(this._walkKey, true);
                });
            }
        }
        else {
            this.addChild(this._horseBone);
            this._horseBone.play(this._walkKey, true);
        }
    }
    /** 动画播放状态 */
    playAnimation(state = 0, callback = null) {
        if (this.state == state)
            return;
        this.state = state;
        if (this.state == 1) {
            //自动切回步行
            this.timerOnce(180, this, () => {
                this.playAnimation(0);
            });
            if (this._heroBone && this._heroBone.name != "")
                this._heroBone.play(this._atkAnimKey, false);
        }
        else {
            if (this._heroBone && this._heroBone.name != "")
                this._heroBone.play(this._walkKey, true);
        }
    }
    /** 创建动画模版 */
    createSpineTemplate(url, parseComplete) {
        if (url == null)
            return;
        let spineFactory = this._spineFactory[url];
        if (spineFactory == null) {
            spineFactory = new Laya.Templet();
            spineFactory.on(Laya.Event.COMPLETE, this, () => {
                parseComplete && parseComplete(spineFactory);
                this._spineFactory[url] = spineFactory;
            });
            spineFactory.loadAni(url);
        }
        else {
            parseComplete && parseComplete(spineFactory);
        }
    }
    /** 刷新收益时间 */
    refreshIncomeTime(actCallback = null) {
        if (this.incomeTime > 0) {
            this.incomeTime -= 1 / this.moveAccelerate;
            //人物自白
            if (this._isShowDialogue == false && (this.incomeTime > 90 && this.incomeTime < 91)) {
                let dialogueIndex = Math.floor(Math.random() * 10) % (this._dialogueList.length);
                let dialogueText = this._dialogueList[dialogueIndex];
                if (Math.random() < 0.1 && dialogueText) {
                    this._isShowDialogue = true;
                    let isFlipX = this.x > Laya.stage.width * 0.8;
                    let txtPos = { x: this.width / 2, y: 50 };
                    //适配大将军
                    if (isFlipX == false) {
                        txtPos.x += 50;
                        if (this._horsePath == null || this._horsePath.length < 1) {
                            txtPos.y += 60;
                        }
                    }
                    EffectUtil_1.default.playDialogueEffect(this, "images/component/game_dialogue_frame.png", dialogueText, txtPos, 1, isFlipX);
                }
            }
        }
        else {
            this.delayMoveTime = 50; //停止动画
            this.setIncomeTime(); //重置收益
            this._isShowDialogue = false;
            Laya.Tween.to(this, { x: (this.orginalX + 180) }, 500, Laya.Ease.linearNone, Laya.Handler.create(this, () => {
                Laya.Tween.clearTween(this);
                this.playAnimation(1);
                actCallback && actCallback();
                Laya.Tween.to(this, { x: this.orginalX }, Math.abs(this.x - this.orginalX) * 15, Laya.Ease.linearNone, Laya.Handler.create(this, () => {
                    Laya.Tween.clearTween(this);
                }));
            }));
            return true;
        }
        return false;
    }
    /** 创建攻击对象 */
    createAttackTarget(parentNode, startPos) {
        if (this.attackSprite == null) {
            let hero = new Hero();
            hero.size(100, 100);
            hero.pivot(50, 50);
            hero.scaleX = -1;
            this._enemyData = this._enemyModelUrlArray[Math.floor(Math.random() * 10) % this._enemyModelUrlArray.length];
            let animName = 'walk';
            let isLoop = true;
            let frameRate = 0.7;
            let enemy = Laya.Pool.getItemByClass(this._enemyData.id, Laya.Skeleton);
            if (enemy.name != this._enemyData.id) {
                if (this._enemyData.heroUrl != "") {
                    this.createSpineTemplate(this._enemyData.heroUrl, (_spineFactory) => {
                        enemy = _spineFactory.buildArmature(0);
                        enemy.name = this._enemyData.id;
                        enemy.zOrder = 1;
                        enemy.playbackRate(frameRate);
                        hero.addChild(enemy);
                        enemy.pos(50, 200);
                        if (this._enemyData.horseUrl != "") { //有坐骑,坐标下调
                            enemy.y -= 50;
                        }
                        enemy.play(animName, isLoop);
                    });
                }
            }
            else {
                hero.addChild(enemy);
                enemy.play(animName, isLoop);
            }
            //敌人坐骑
            let enemyHorse = hero.getChildByName(this._horseKey);
            if (enemyHorse == null) {
                if (this._enemyData.horseUrl != "") {
                    this.createSpineTemplate(this._enemyData.horseUrl, (_spineFactory) => {
                        enemyHorse = _spineFactory.buildArmature(0);
                        enemyHorse.name = this._horseKey;
                        enemyHorse.playbackRate(frameRate);
                        hero.addChild(enemyHorse);
                        enemyHorse.pos(50, 150);
                        enemyHorse.play(animName, isLoop);
                    });
                }
            }
            else {
                enemyHorse.play(animName, isLoop);
            }
            if (parentNode) {
                parentNode.addChild(hero);
                hero.pos(startPos.x, startPos.y);
                let heroInfo = GlobalData_1.default.getData(GlobalData_1.default.HeroConfigVO, this.heroId);
                if (heroInfo) {
                    hero.setMoveSpeedRatio(heroInfo.speed);
                }
                hero.zOrder = Math.floor(hero.y);
            }
            this.attackSprite = hero;
        }
        return this.attackSprite;
    }
    /** 移除敌人 */
    removeEnemy(isKill = false) {
        if (this.attackSprite) {
            if (isKill) {
                let heroSp = this.attackSprite.getChildByName(this._enemyData.id);
                if (heroSp)
                    heroSp.stop();
                let horseSp = this.attackSprite.getChildByName(this._horseKey);
                if (horseSp)
                    horseSp.stop();
                //渐隐
                let targetPos = PointUtils_1.default.localToGlobal(this.attackSprite);
                EffectUtil_1.default.playBoneEffect("ui_hit_03", { x: targetPos.x, y: targetPos.y + 100 });
                let explode = new ItemExplode_1.default();
                if (this.attackSprite && this.attackSprite.parent && explode) {
                    this.attackSprite.parent.addChild(explode.play(this.attackSprite.x, this.attackSprite.y + 100).scale(0.8, 0.8));
                }
                this.frameLoop(1, this, this.onRemoveEnemyFly);
            }
            else {
                let enemy = this.attackSprite.getChildByName(this._enemyData.id);
                if (enemy)
                    Laya.Pool.recover(this._enemyData.id, enemy);
                this.attackSprite.removeSelf();
                this.attackSprite = null;
            }
        }
    }
    onRemoveEnemyFly() {
        if (this.attackSprite) {
            this.attackSprite.rotation += 7;
            this.attackSprite.x += MathUtil_1.default.rangeInt(5, 20);
            this.attackSprite.y -= MathUtil_1.default.rangeInt(5, 10);
            if (this.attackSprite.y <= -this.attackSprite.height) {
                this.clearTimer(this, this.onRemoveEnemyFly);
                this.attackSprite.removeSelf();
                let enemy = this.attackSprite.getChildByName(this._enemyData.id);
                if (enemy)
                    Laya.Pool.recover(this._enemyData.id, enemy);
                this.attackSprite = null;
            }
        }
    }
    get heroKey() {
        return this._heroKey;
    }
    get heroBone() {
        return this._heroBone;
    }
}
exports.default = Hero;
},{"../../../core_wq/config/PathConfig":5,"../../../core_wq/db/GlobalData":7,"../../../core_wq/effect/ItemExplode":18,"../../../core_wq/utils/EffectUtil":43,"../../../core_wq/utils/MathUtil":44,"../../../core_wq/utils/PointUtils":45,"./base/BaseCharacter":67}],67:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class BaseCharacter extends Laya.Sprite {
    constructor() {
        super();
        /** 移动方向(默认右,1为左) */
        this.moveDir = 0;
        /** 延迟移动时间 */
        this.delayMoveTime = 5;
        /** 移动速度倍率 */
        this.moveSpeedRatio = 1;
        /** 移动速度加速 */
        this.moveAccelerate = 1;
        /** 默认0步行，1为攻击 */
        this.state = -1;
        /** 攻击对象 */
        this.attackSprite = null;
        /** 初始位置x */
        this.orginalX = 0;
        /** 已经就位，可攻击 */
        this.isInPosition = false;
        /** 英雄模型路径 */
        this.heroPath = '';
        /** 坐骑模型路径 */
        this.horsePath = '';
        /** 攻击动画key */
        this.atkAnimKey = 'attack';
        /** 收益CD */
        this.incomeTime = 0;
    }
    /** 设置人物龙骨 */
    setCharacterBone(id) {
    }
    /** 动画播放状态 */
    playAnimation(state = 0, callback = null) {
    }
    /** 创建攻击对象 */
    createAttackTarget(parentNode, startPos) {
        return this;
    }
    /** 移除攻击对象 */
    removeEnemy(isKill = false) {
    }
    /** 移动 */
    playMoveAction() {
        this.orginalX = this.x;
        if (this.orginalX > Laya.stage.width / 2) {
            //后退
            let actionSp = this;
            this.orginalX = Laya.stage.width / 2 - Math.random() * 100;
            Laya.Tween.to(actionSp, { x: this.orginalX }, Math.abs(actionSp.x - this.orginalX) * 15, Laya.Ease.linearNone, Laya.Handler.create(this, () => {
                Laya.Tween.clearTween(actionSp);
                this.isInPosition = true;
            }));
        }
        else {
            this.isInPosition = true;
        }
    }
    /** 移动是否停止 */
    get isMoveStop() {
        return this.delayMoveTime > 0;
    }
    /** 收益倒计时 */
    setIncomeTime() {
        this.incomeTime = 60 * this.moveSpeedRatio;
    }
    /** 收益倒计时 */
    get IncomeTime() {
        return this.incomeTime;
    }
    //攻击对象
    get AttackTarget() {
        return this.attackSprite;
    }
    set AttackTarget(attackSp) {
        this.attackSprite = attackSp;
    }
    set IsInPosition(value) {
        this.isInPosition = value;
    }
    //是否攻击已就位
    get IsInPosition() {
        return this.isInPosition;
    }
    //获取初始位置x
    get OrginalX() {
        return this.orginalX;
    }
    setMoveSpeedRatio(value) {
        this.moveSpeedRatio = value;
    }
    setMoveAccelerate(value) {
        this.moveAccelerate = 1.0 / value;
    }
    //##贝塞尔曲线#################################
    // 以控制点cp计算曲线点
    CalculateBeizer(cp, numOfPoints) {
        var t = 1.0 / (numOfPoints - 1);
        var curve = [];
        for (var i = 0; i < numOfPoints; i++) {
            curve[i] = this.PointOnCubicBezier(cp, i * t);
        }
        return curve;
    }
    // 参数1: 4个点坐标(起点，控制点1，控制点2，终点)  
    // 参数2: 0 <= t <= 1   
    PointOnCubicBezier(cp, t) {
        var tPoint_x = this.MetaComputing(cp[0].x, cp[1].x, cp[2].x, cp[3].x, t);
        var tPoint_y = this.MetaComputing(cp[0].y, cp[1].y, cp[2].y, cp[3].y, t);
        return { x: tPoint_x, y: tPoint_y };
    }
    MetaComputing(p0, p1, p2, p3, t) {
        // 方法一:  
        var a, b, c;
        var tSquare, tCube;
        // 计算多项式系数
        c = 3.0 * (p1 - p0);
        b = 3.0 * (p2 - p1) - c;
        a = p3 - b - c - p0;
        // 计算t位置的点
        tSquare = t * t;
        tCube = t * tSquare;
        return (a * tCube) + (b * tSquare) + (c * t) + p0;
        // 方法二: 原始的三次方公式
        //  number n = 1.0 - t;
        //  return n*n*n*p0 + 3.0*p1*t*n*n + 3.0*p2*t*t*n + p3*t*t*t;
    }
}
exports.default = BaseCharacter;
},{}],68:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GlobalData_1 = require("../../../core_wq/db/GlobalData");
const StorageUtil_1 = require("../../../core_wq/utils/StorageUtil");
class HallModel extends Laya.Script {
    constructor() {
        super();
        /** 英雄最高等级 */
        this.heroMaxLevel = 30;
        /** 英雄合成数量 */
        this.heroCount = 0;
        /** 总英雄的数量 */
        this.allHeroCount = 15;
        /** 屏幕滚动速度 */
        this.viewRollSpeep = 2;
        /** 每屏 */
        this.foregroundIndex = 0;
        /** 前景每屏宽度 */
        this.foregroundWidth = 1991; //3034
        /** 每屏 */
        this.fargroundIndex = 0;
        /** 远景每屏宽度 */
        this.fargroundWidth = 1986; //2135
        /** 滚屏(最前景) */
        this.topForegroundIndex = 0;
        /** 每屏宽度 */
        this.topForegroundWidth = 750;
        /** 启动加速x2 */
        this.userAcceValue = 1;
        /** 加速时间 */
        this.userAcceTime = 0;
        /** 当前英雄最高等级 */
        this.heroLevel = 1;
        /** 分享广告可点击次数 */
        this.shareAdTimes = {};
        /** 广告 */
        this.advert = [];
        /** 是否有视频广告 */
        this.hasVideoAd = true;
        /** 每日元宝加速次数 */
        this.diamond_acce_num = 0;
        /** 加速剩余时间 */
        this.s_acceLeft_time = 's_acceLeft_time';
        /** 层次重拍 */
        this.is_reset_zorder = false;
        /************************红点系列 start************************/
        /** 分享礼包红点 */
        this.showShareGiftRedPoint = false;
        /** 每日签到红点 */
        this.showDailySignRedPoint = false;
        /** 任务红点 */
        this.showTaskRedPoint = false;
        /** 转盘红点 */
        this.showLuckPrizeRedPoint = false;
        /** 关注奖励红点 */
        this.showFollowRedPoint = false;
        /************************红点系列 end************************/
        /** 所有的英雄信息 { id: index, heroId: 0, isRunning: false } */
        this._allHeros = [];
        /** 购买英雄记录  {heroId: 1, buyTimes:0}*/
        this._buyHerosRecord = [];
        /**
         * 英雄初始消费价格
         * 1、一级英雄单个钻石定价为：36
         * 2、英雄成本递增为上一级的1.3，购买次数递增为上一级的一点1.18，车（钻石价）=36*1.3^（n-1）
         */
        this._heroBaseDiamondPrice = 36;
        this.initAllHeros();
    }
    /** 初始化英雄信息 */
    initAllHeros() {
        if (this._allHeros.length < 1) {
            for (let index = 0; index < this.allHeroCount; index++) {
                this._allHeros.push({ id: index, heroId: 0, isRunning: false });
            }
        }
    }
    /** 获取当前可以招募英雄的数据 */
    getRecruitHeroData() {
        let heroDatas = GlobalData_1.default.getDataByCondition(GlobalData_1.default.HeroConfigVO, (data) => {
            return this.heroLevel >= data.unlockNeedId;
        });
        if (heroDatas && heroDatas.length > 0) {
            return heroDatas[heroDatas.length - 1];
        }
        return null;
    }
    /** 获取最新开锁(可购买)的前n位英雄的配置 */
    getPreNewHeroData(unlockCarId, index = 0) {
        let heroData = GlobalData_1.default.getAllValue(GlobalData_1.default.HeroConfigVO);
        if (heroData) {
            for (var key in heroData) {
                if (heroData.hasOwnProperty(key)) {
                    var element = heroData[key];
                    if (unlockCarId < element.unlockNeedId) {
                        let heroId = parseInt(key) + index;
                        return GlobalData_1.default.getData(GlobalData_1.default.HeroConfigVO, heroId);
                    }
                }
            }
        }
        return null;
    }
    /** 购买单个英雄价格 */
    getHeroBuyPrice(price, buyTimes) {
        if (buyTimes > 0) {
            return price * Math.pow(1.15, buyTimes);
        }
        return price;
    }
    /** 查询购买英雄记录 */
    queryBuyHeroRecord(heroId, isDiamond = false) {
        for (let key in this._buyHerosRecord) {
            let element = this._buyHerosRecord[key];
            if (element) {
                if (element.heroId == heroId) {
                    if (isDiamond) {
                        return this._buyHerosRecord[key].diamondBuyTimes;
                    }
                    else {
                        return this._buyHerosRecord[key].buyTimes;
                    }
                }
            }
        }
        return 0;
    }
    /** 查询购买英雄最高记录 */
    queryBuyHeroRecordTop() {
        let buyTimes = 0;
        let index = 0;
        for (let key in this._buyHerosRecord) {
            let element = this._buyHerosRecord[key];
            if (element) {
                if (index > (this._buyHerosRecord.length - 4)) {
                    if (buyTimes < this._buyHerosRecord[key].buyTimes) {
                        buyTimes = this._buyHerosRecord[key].buyTimes;
                    }
                }
                index++;
            }
        }
        return buyTimes;
    }
    /** 刷新购买英雄记录 */
    refreshBuyHeroRecord(heroId, isDiamond = false) {
        let isNew = true;
        for (let key in this._buyHerosRecord) {
            let element = this._buyHerosRecord[key];
            if (element && element.heroId == heroId) {
                if (isDiamond) {
                    this._buyHerosRecord[key].diamondBuyTimes++;
                }
                else {
                    this._buyHerosRecord[key].buyTimes++;
                }
                isNew = false;
                return;
            }
        }
        if (isNew) {
            if (isDiamond) {
                this._buyHerosRecord.push({ heroId: heroId, buyTimes: 0, diamondBuyTimes: 1 });
            }
            else {
                this._buyHerosRecord.push({ heroId: heroId, buyTimes: 1, diamondBuyTimes: 0 });
            }
        }
        Laya.timer.callLater(this, StorageUtil_1.default.saveStorageToLocal, [true]);
    }
    /** 每日元宝加速次数 */
    diamondAcceTimes(isAdd = false) {
        let diamondAcceTimes = this.diamond_acce_num;
        if (isAdd) {
            this.diamond_acce_num++;
        }
        return diamondAcceTimes;
    }
    /** 钻石购买英雄的价格 */
    getDiamondBuyHeroPrice(heroId, buyTimes) {
        if (heroId < 1)
            return this._heroBaseDiamondPrice;
        var heroPrice = this._heroBaseDiamondPrice;
        var foreCarId = 20;
        if (heroId > foreCarId) {
            heroPrice = heroPrice * Math.pow(1.085, (foreCarId - 1)) * Math.pow(1.25, (heroId - foreCarId));
        }
        else {
            heroPrice = heroPrice * Math.pow(1.085, (heroId - 1));
        }
        if (buyTimes > 0) {
            heroPrice = heroPrice * Math.pow(1.2, buyTimes);
        }
        heroPrice = Math.ceil(heroPrice); //四舍五入
        return heroPrice;
    }
    /** 计算英雄总资产（基础价格） */
    heroAllAsset() {
        let allAsset = 0;
        if (this._allHeros && this._allHeros.length > 0) {
            this._allHeros.forEach(element => {
                if (element && element.heroId > 0) {
                    let vo = GlobalData_1.default.getData(GlobalData_1.default.HeroConfigVO, element.heroId);
                    if (vo) {
                        allAsset += this.getHeroBuyPrice(vo.buyPrice, this.queryBuyHeroRecord(vo.id));
                    }
                }
            });
        }
        return allAsset;
    }
    set AllHeros(value) { this._allHeros = value; }
    get AllHeros() { return this._allHeros; }
    set BuyHerosRecord(value) { this._buyHerosRecord = value; }
    /** 购买英雄记录  {heroId: 1, buyTimes:0} */
    get BuyHerosRecord() { return this._buyHerosRecord; }
}
exports.default = HallModel;
},{"../../../core_wq/db/GlobalData":7,"../../../core_wq/utils/StorageUtil":47}],69:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
const EventsMgr_1 = require("../../../core_wq/event/EventsMgr");
const EventType_1 = require("../../../core_wq/event/EventType");
const PlayerMgr_1 = require("../../../core_wq/player/PlayerMgr");
const PlayerInfo_1 = require("../../../core_wq/player/data/PlayerInfo");
const MathUtil_1 = require("../../../core_wq/utils/MathUtil");
const StorageUtil_1 = require("../../../core_wq/utils/StorageUtil");
const ViewMgr_1 = require("../../../core_wq/view/ViewMgr");
const ViewConst_1 = require("../../../core_wq/view/const/ViewConst");
/**
 * 货币界面
 */
class CurrencyView extends layaMaxUI_1.ui.moduleView.hall.CurrencyViewUI {
    constructor() { super(); }
    onAwake() {
        this.addEvents();
    }
    addEvents() {
        EventsMgr_1.default.Ins.addListener(EventType_1.default.UPDATE_USER_LEVEL, this.onUpdateUserLevel, this);
        EventsMgr_1.default.Ins.addListener(EventType_1.default.UPDATE_CURRENCY, this.onUpdateCurrency, this);
        EventsMgr_1.default.Ins.addListener(EventType_1.default.UPDATE_USER_EXP, this.onUpdateUserExp, this);
        EventsMgr_1.default.Ins.addListener(EventType_1.default.UPDATE_INCOME, this.onUpdateIncome, this);
        this.btn_user.on(Laya.Event.CLICK, this, this.onShowUserInfoView);
    }
    /** 更新用户等级 */
    onUpdateUserLevel() {
        this.txt_level.text = "Lv." + PlayerMgr_1.default.Ins.Info.userLevel;
        Laya.timer.callLater(this, StorageUtil_1.default.saveStorageToLocal);
    }
    /** 更新用户经验 */
    onUpdateUserExp(upNeedexp) {
        this.expBar.value = (1 * PlayerMgr_1.default.Ins.Info.userExp / upNeedexp);
        Laya.timer.callLater(this, StorageUtil_1.default.saveStorageToLocal);
    }
    /** 更新用户每秒收益 */
    onUpdateIncome(userIncomeSec) {
        PlayerMgr_1.default.Ins.Info.userIncomeSec = userIncomeSec;
        this.txt_Income.text = MathUtil_1.default.unitConversion(PlayerMgr_1.default.Ins.Info.userIncomeSec) + "/每秒";
    }
    /** 更新用户货币 */
    onUpdateCurrency(type, value, isTotal = true) {
        switch (type) {
            case PlayerInfo_1.default.GOLD:
                this.updateGold(value, isTotal);
                break;
            case PlayerInfo_1.default.DIAMOND:
                this.updateDiamond(value, isTotal);
                break;
        }
    }
    /** 显示用户信息界面 */
    onShowUserInfoView() {
        ViewMgr_1.default.Ins.open(ViewConst_1.default.UserInfoView);
    }
    updateGold(value, isTotal) {
        let isInitGold = (PlayerMgr_1.default.Ins.Info.userGold == 0);
        if (isTotal) {
            PlayerMgr_1.default.Ins.Info.userGold = value;
        }
        else {
            PlayerMgr_1.default.Ins.Info.userGold += value;
        }
        this.txt_gold.text = MathUtil_1.default.unitConversion(PlayerMgr_1.default.Ins.Info.userGold);
        if (!isInitGold) {
            Laya.Tween.from(this.imgGold, { scaleX: 1.2, scaleY: 1.2 }, 300, null, Laya.Handler.create(this, () => { Laya.Tween.clearTween(this.imgGold); }));
        }
        Laya.timer.callLater(this, StorageUtil_1.default.saveStorageToLocal);
    }
    updateDiamond(value, isTotal) {
        let isInitDiamond = (PlayerMgr_1.default.Ins.Info.userDiamond == 0);
        if (isTotal) {
            PlayerMgr_1.default.Ins.Info.userDiamond = value;
        }
        else {
            PlayerMgr_1.default.Ins.Info.userDiamond += value;
        }
        this.txt_diamond.text = PlayerMgr_1.default.Ins.Info.userDiamond + "";
        if (!isInitDiamond) {
            Laya.Tween.from(this.imgDiamond, { scaleX: 1.2, scaleY: 1.2 }, 300, null, Laya.Handler.create(this, () => { Laya.Tween.clearTween(this.imgDiamond); }));
        }
    }
}
exports.default = CurrencyView;
},{"../../../core_wq/event/EventType":19,"../../../core_wq/event/EventsMgr":20,"../../../core_wq/player/PlayerMgr":33,"../../../core_wq/player/data/PlayerInfo":34,"../../../core_wq/utils/MathUtil":44,"../../../core_wq/utils/StorageUtil":47,"../../../core_wq/view/ViewMgr":50,"../../../core_wq/view/const/ViewConst":53,"../../../ui/layaMaxUI":88}],70:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
const HallControl_1 = require("../HallControl");
const PlayerMgr_1 = require("../../../core_wq/player/PlayerMgr");
const EffectUtil_1 = require("../../../core_wq/utils/EffectUtil");
const EventsMgr_1 = require("../../../core_wq/event/EventsMgr");
const EventType_1 = require("../../../core_wq/event/EventType");
const PlayerInfo_1 = require("../../../core_wq/player/data/PlayerInfo");
const MathUtil_1 = require("../../../core_wq/utils/MathUtil");
const MsgMgr_1 = require("../../../core_wq/msg/MsgMgr");
const HttpMgr_1 = require("../../../core_wq/net/HttpMgr");
const ShareMgr_1 = require("../../../core_wq/msg/ShareMgr");
const LayerMgr_1 = require("../../../core_wq/layer/LayerMgr");
const GameConfig_1 = require("../../../GameConfig");
const StorageUtil_1 = require("../../../core_wq/utils/StorageUtil");
const SoundMgr_1 = require("../../../core_wq/sound/SoundMgr");
const SoundType_1 = require("../../../core_wq/sound/SoundType");
const ViewRegisterMgr_1 = require("../../../core_wq/view/ViewRegisterMgr");
const ViewMgr_1 = require("../../../core_wq/view/ViewMgr");
const ViewConst_1 = require("../../../core_wq/view/const/ViewConst");
const HeadItem_1 = require("./item/HeadItem");
const GuideMgr_1 = require("../../../core_wq/guide/GuideMgr");
const HeroTips_1 = require("./HeroTips");
const RedPointMgr_1 = require("../../../core_wq/msg/RedPointMgr");
const SystemConfig_1 = require("../config/SystemConfig");
const PointUtils_1 = require("../../../core_wq/utils/PointUtils");
class HallScene extends layaMaxUI_1.ui.moduleView.hall.HallSceneUI {
    constructor() {
        super();
        this._battleHeroIndex = 0;
    }
    onAwake() {
        // SDKMgr.Ins.wxShowUpdateVersionTips();
    }
    onEnable() {
        LayerMgr_1.default.Ins.initLayer(Laya.stage, GameConfig_1.default.width, GameConfig_1.default.height);
        this.scale(LayerMgr_1.default.adaptScaleX, LayerMgr_1.default.adaptScaleY);
        ViewRegisterMgr_1.default.Ins.initRegisterView();
        this.init();
        this.initUserData();
        this.haveStoreHero();
        this.showSurpassView();
        this.initSystemBtn();
        this.onUpdateShopRedPoint();
        this.addEvents();
    }
    init() {
        MsgMgr_1.default.Ins.showMsg("测试测试测试测试测试");
        this._control = HallControl_1.default.Ins;
        this._control.hallScene = this;
        this.lists_head.vScrollBarSkin = "";
        if (this._control.Model.AllHeros.length < 1) {
            this._control.Model.initAllHeros();
        }
        this.lists_head.array = this._control.Model.AllHeros;
        this.lists_head.renderHandler = Laya.Handler.create(this, this.onListRender, null, false);
        this.foregroundTwo.x = this._control.Model.foregroundWidth;
        this.fargroundTwo.x = this._control.Model.fargroundWidth;
        this.list_btn.renderHandler = Laya.Handler.create(this, this.onRenderSystem, null, false);
        SoundMgr_1.default.Ins.playBg(SoundType_1.default.BG_MUSIC);
        if (PlayerMgr_1.default.Ins.Info.wxUserInfo) {
            HttpMgr_1.default.Ins.requestSaveWxUserinfoData(PlayerMgr_1.default.Ins.Info.wxUserInfo.nickName, PlayerMgr_1.default.Ins.Info.wxUserInfo.avatarUrl, PlayerMgr_1.default.Ins.Info.wxUserInfo.city, PlayerMgr_1.default.Ins.Info.wxUserInfo.gender);
        }
    }
    /** 初始化用户数据 */
    initUserData() {
        if (PlayerMgr_1.default.Ins.Info.wxUserInfo) {
            this.imgHead.skin = PlayerMgr_1.default.Ins.Info.wxUserInfo.avatarUrl;
        }
        this._control.setUserLevel(PlayerMgr_1.default.Ins.Info.userLevel); //用户等级
        this._control.setUserExp(PlayerMgr_1.default.Ins.Info.userExp); //用户经验
        this._control.updateGold(PlayerMgr_1.default.Ins.Info.userGold);
        EventsMgr_1.default.Ins.dispatch(EventType_1.default.UPDATE_INCOME, PlayerMgr_1.default.Ins.Info.userIncomeSec); //用户每秒可获得的金币
        EventsMgr_1.default.Ins.dispatch(EventType_1.default.UPDATE_CURRENCY, PlayerInfo_1.default.DIAMOND, PlayerMgr_1.default.Ins.Info.userDiamond); //更新用户获得钻石
        this.updateRecruitData();
        this.frameLoop(1, this, this.onUpdateBattleView);
        StorageUtil_1.default.requestOfflinePrizeData();
        this._control.updateMapData();
        GuideMgr_1.default.Ins.setup();
        HttpMgr_1.default.Ins.requestDiamondData();
    }
    /** 初始化功能按钮 */
    initSystemBtn() {
        let datas = this._control.getSystemBtnList();
        if (datas && datas.length > 0 && (this.list_btn.array == null || datas.length > this.list_btn.array.length)) {
            this.list_btn.visible = true;
            this.list_btn.array = datas;
            this.timerOnce(1000, this, () => {
                RedPointMgr_1.default.Ins.updateRedPoint();
            });
        }
    }
    addEvents() {
        this.btn_recruit.on(Laya.Event.CLICK, this, this.onClickBtnHandler);
        this.btn_acc.on(Laya.Event.CLICK, this, this.onClickBtnHandler);
        this.btn_shop.on(Laya.Event.CLICK, this, this.onClickBtnHandler);
        this.btn_heroStore.on(Laya.Event.CLICK, this, this.onClickBtnHandler);
        this.lists_head.on(Laya.Event.MOUSE_DOWN, this, this.onHeroSelect);
        EventsMgr_1.default.Ins.addListener(EventType_1.default.HERO_BOX, this.onShowHeroBox, this);
        EventsMgr_1.default.Ins.addListener(EventType_1.default.GAME_ACCE_START, this.onGameAcce, this);
        EventsMgr_1.default.Ins.addListener(EventType_1.default.SHOW_OFFLINE_REWARD, this.onOffLineReward, this);
        EventsMgr_1.default.Ins.addListener(EventType_1.default.UPDATE_SYSTEM_BTN, this.onUpdateSystemBtn, this);
        EventsMgr_1.default.Ins.addListener(EventType_1.default.OPEN_VIEW, this.onOpenSystemView, this);
        EventsMgr_1.default.Ins.addListener(EventType_1.default.REMOVE_SHOP_REN_POINT, this.onUpdateShopRedPoint, this);
    }
    onOpenSystemView(id) {
        switch (id) {
            case SystemConfig_1.default.SIGN:
                ViewMgr_1.default.Ins.open(ViewConst_1.default.DaySignView);
                break;
            case SystemConfig_1.default.RANK:
                ViewMgr_1.default.Ins.open(ViewConst_1.default.RankView);
                break;
            case SystemConfig_1.default.LUCK_PRIZE:
                ViewMgr_1.default.Ins.open(ViewConst_1.default.LuckPrizeView);
                break;
            case SystemConfig_1.default.TASK:
                ViewMgr_1.default.Ins.open(ViewConst_1.default.TaskView);
                break;
            case SystemConfig_1.default.INVITE:
                break;
            case SystemConfig_1.default.FOLLOW:
                ViewMgr_1.default.Ins.open(ViewConst_1.default.FollowView);
                break;
        }
    }
    onClickBtnHandler(e) {
        if (e.target instanceof Laya.Button) {
            switch (e.target) {
                case this.btn_recruit: //招募英雄
                    this.recruitHero();
                    break;
                case this.btn_acc: //加速
                    this.openGameAcc();
                    break;
                case this.btn_shop: //商店
                    ViewMgr_1.default.Ins.open(ViewConst_1.default.ShopView);
                    break;
                case this.btn_heroStore: //英雄保存箱
                    this.popHeroStore();
                    break;
            }
        }
    }
    /** 招募英雄 */
    recruitHero() {
        this._currBuyHeroInfo = this._control.Model.getRecruitHeroData();
        if (this._currBuyHeroInfo) {
            this._control.buyHero(this._currBuyHeroInfo);
            this.updateRecruitData(this._currBuyHeroInfo);
        }
    }
    /** 更新招募英雄数据 */
    updateRecruitData(buyHeroInfo = null) {
        if (buyHeroInfo) {
            this._currBuyHeroInfo = buyHeroInfo;
        }
        else {
            this._currBuyHeroInfo = this._control.Model.getRecruitHeroData();
        }
        let buyPrice = this._control.Model.getHeroBuyPrice(this._currBuyHeroInfo.buyPrice, this._control.Model.queryBuyHeroRecord(this._currBuyHeroInfo.id));
        this.txt_price.text = MathUtil_1.default.unitConversion(buyPrice);
        if (PlayerMgr_1.default.Ins.Info.userGold < buyPrice) {
            this.txt_price.color = "#FF0000";
        }
        else {
            this.txt_price.color = "#FFF1BA";
        }
        this.txt_level.text = "Lv." + this._currBuyHeroInfo.id;
    }
    onHeroSelect(e) {
        if (this._copyHeadItem)
            return;
        for (let index = 0; index < this._control.Model.allHeroCount; index++) {
            let cell = this.lists_head.getCell(index);
            if (cell) {
                let headItem = cell.getChildByName("hero");
                if (headItem && headItem.IsBattle && !headItem.IsBox && this._control.isHit(headItem)) {
                    headItem.setStage(2);
                    this._currHeadItem = headItem;
                    this._currHeadItem.visible = false;
                    this._copyHeadItem = Laya.Pool.getItemByClass("copyHeadItem", HeadItem_1.default);
                    this._copyHeadItem.updateHeadSkin(headItem.Info.heroId, index);
                    this._copyHeadItem.pivot(126 / 2, 127 / 2);
                    this._copyHeadItem.zOrder = 999;
                    this.addChild(this._copyHeadItem);
                    this.showHeroTips();
                    this._copyHeadItem.pos(this.mouseX, this.mouseY);
                    this.imgDelete.alpha = 1.0;
                    this.on(Laya.Event.MOUSE_MOVE, this, this.onMouseHeadItemMove);
                    this.on(Laya.Event.MOUSE_UP, this, this.onMouseHeadItemUp);
                    break;
                }
            }
        }
    }
    onMouseHeadItemMove(e) {
        if (this._copyHeadItem) {
            this._copyHeadItem.pos(this.mouseX, this.mouseY);
        }
    }
    onMouseHeadItemUp(e) {
        this.imgDelete.alpha = 0.5;
        if (this._copyHeadItem) {
            this.off(Laya.Event.MOUSE_MOVE, this, this.onMouseHeadItemMove);
            this.off(Laya.Event.MOUSE_UP, this, this.onMouseHeadItemUp);
            if (this._control.isHit(this.imgDelete)) { //出售英雄
                let sellPrice = this._currHeadItem.getSellPrice();
                this._currHeadItem.reset();
                EffectUtil_1.default.playCoinEffect(this.imgDelete, 'images/common/star2.png');
                EffectUtil_1.default.playTextEffect(this.imgDelete, "金币+" + MathUtil_1.default.unitConversion(sellPrice));
                this._control.updateGold(PlayerMgr_1.default.Ins.Info.userGold + sellPrice);
                this._control.setSaveHeroData(this._currHeadItem);
                this._control.setBattleHeroCount(PlayerMgr_1.default.Ins.Info.userRuncarCount - 1);
            }
            else {
                this._currHeadItem.setStage(1);
                for (let index = 0; index < this._control.Model.allHeroCount; index++) {
                    let cell = this.lists_head.getCell(index);
                    if (cell) {
                        let headItem = cell.getChildByName("hero");
                        if (headItem && this._control.isHit(headItem) && headItem != this._currHeadItem && !headItem.IsBox && !headItem.IsLock) {
                            let heroId = headItem.Info.heroId;
                            if (heroId == this._currHeadItem.Info.heroId) {
                                if (heroId >= this._control.Model.heroMaxLevel) {
                                    MsgMgr_1.default.Ins.showMsg("已达最高级！");
                                }
                                else { //合并英雄
                                    let nextLevel = heroId + 1;
                                    let exp = this._control.getHeroExp(heroId);
                                    headItem.updateHeadSkin(nextLevel, index);
                                    headItem.removeBattleHero();
                                    let startPos = {
                                        x: 50 + this.width * 0.5 * Math.random(),
                                        y: this.beginEventView.y - 150 + (this.beginEventView.height - 30) / this.lists_head.array.length
                                    };
                                    headItem.createBattleHero(this, startPos);
                                    EffectUtil_1.default.playBoneEffect("ui_born", { x: startPos.x - 20, y: startPos.y + 200 });
                                    this._currHeadItem.reset();
                                    //合并效果
                                    EffectUtil_1.default.playHeroMergeEffect(this, heroId, headItem);
                                    //更新英雄等级
                                    if (this._control.updateHeroLevel(nextLevel)) {
                                        ViewMgr_1.default.Ins.open(ViewConst_1.default.NewHeroView, null, nextLevel);
                                        SoundMgr_1.default.Ins.playEffect(SoundType_1.default.UNLOCK);
                                    }
                                    else {
                                        SoundMgr_1.default.Ins.playEffect(SoundType_1.default.MAKE_HERO);
                                    }
                                    if (exp > 0) {
                                        this._control.setUserExp(PlayerMgr_1.default.Ins.Info.userExp + exp);
                                        let headItemPos = PointUtils_1.default.localToGlobal(headItem);
                                        let pos = { x: headItemPos.x + headItem.width * 0.5, y: headItemPos.y + 2 };
                                        EffectUtil_1.default.playTextEffect(this, "Exp+" + exp, pos);
                                        headItemPos = null;
                                    }
                                    this.updateRecruitData();
                                    this._control.refreshIncomeSec();
                                    this._control.setSaveHeroData(headItem, this._currHeadItem);
                                    //刷新战斗英雄的数量
                                    this._control.setBattleHeroCount(PlayerMgr_1.default.Ins.Info.userRuncarCount - 1);
                                    HttpMgr_1.default.Ins.requestDailyTaskData(1);
                                    GuideMgr_1.default.Ins.onNextStep();
                                }
                            }
                            else { //交换
                                let isEmpty = headItem.IsEmpty;
                                headItem.updateHeadSkin(this._currHeadItem.Info.heroId);
                                headItem.setStage(this._currHeadItem.HeroStage);
                                if (isEmpty) {
                                    this._control.createHeroBone(headItem, { x: this._currHeadItem.BattleHero.x, y: this._currHeadItem.BattleHero.y });
                                    this._currHeadItem.reset();
                                }
                                else {
                                    this._currHeadItem.updateHeadSkin(heroId);
                                    let oldBattleHero = this._currHeadItem.BattleHero;
                                    this._currHeadItem.BattleHero = headItem.BattleHero;
                                    headItem.BattleHero = oldBattleHero;
                                }
                                this._control.setSaveHeroData(headItem, this._currHeadItem);
                                SoundMgr_1.default.Ins.playEffect(SoundType_1.default.DRAW_HERO);
                            }
                            break;
                        }
                    }
                }
            }
            this.removeHeroTips();
            this._currHeadItem.visible = true;
            this._copyHeadItem.removeSelf();
            Laya.Pool.recover("copyHeadItem", this._copyHeadItem);
            this._copyHeadItem = null;
        }
    }
    /** 更新战斗界面 */
    onUpdateBattleView() {
        let isRollView = false;
        for (let index = 0; index < this._control.Model.allHeroCount; index++) {
            let cell = this.lists_head.getCell(index);
            if (cell) {
                let headItem = cell.getChildByName("hero");
                if (headItem && headItem.Info && headItem.Info.heroId > 0 && !headItem.isDie) {
                    isRollView = true;
                    let battleHero = headItem.BattleHero;
                    if (battleHero) {
                        if (this._control.Model.is_reset_zorder) {
                            battleHero.zOrder = Math.floor(battleHero.y);
                        }
                        //是否攻击就位
                        if (battleHero.IsInPosition) {
                            if (battleHero.AttackTarget == null) {
                                let posX = battleHero.OrginalX + battleHero.IncomeTime * this._control.Model.viewRollSpeep + 340;
                                battleHero.createAttackTarget(battleHero.parent, new Laya.Point(posX, battleHero.y));
                            }
                            else {
                                battleHero.AttackTarget.x -= this._control.Model.viewRollSpeep * this._control.Model.userAcceValue;
                            }
                            battleHero.refreshIncomeTime(() => {
                                let txtPos = { x: battleHero.x, y: battleHero.y - 30 };
                                //移除攻击对象
                                let attackSp = battleHero.AttackTarget;
                                if (attackSp) {
                                    headItem.updateHp();
                                    txtPos = { x: attackSp.x - 50, y: attackSp.y + 50 };
                                    battleHero.removeEnemy(true);
                                }
                                let obtainMoney = this._control.getHeroIncomeTotalGold(headItem.Info.heroId) * PlayerMgr_1.default.Ins.Info.userExtraIncome * PlayerMgr_1.default.Ins.Info.userLevelExtraIncome;
                                //飘数字
                                EffectUtil_1.default.playImageTextEffect(this, "images/common/coin.png", "+" + MathUtil_1.default.unitConversion(obtainMoney), txtPos, 1000);
                                this._control.updateGold(PlayerMgr_1.default.Ins.Info.userGold + obtainMoney);
                            });
                        }
                    }
                }
            }
        }
        this.doRollView(isRollView);
    }
    /** 滚动屏幕 */
    doRollView(isRollView) {
        if (isRollView) {
            //前景屏幕
            this.box_foreground.x -= this._control.Model.viewRollSpeep * this._control.Model.userAcceValue;
            let pageIndex = Math.floor(-this.box_foreground.x / this._control.Model.foregroundWidth);
            if (this._control.Model.foregroundIndex != pageIndex) {
                this._control.Model.foregroundIndex = pageIndex;
                this.viewMoveHandler(this.foregroundOne, this.foregroundTwo, this._control.Model.foregroundWidth, pageIndex);
            }
            //远景屏幕
            this.box_farground.x -= this._control.Model.viewRollSpeep * this._control.Model.userAcceValue * 0.5;
            let farPageIndex = Math.floor(-this.box_farground.x / this._control.Model.fargroundWidth);
            if (this._control.Model.fargroundIndex != farPageIndex) {
                this._control.Model.fargroundIndex = farPageIndex;
                this.viewMoveHandler(this.fargroundOne, this.fargroundTwo, this._control.Model.fargroundWidth, farPageIndex);
            }
            //最前景屏幕
            this.box_obstacle.x -= this._control.Model.viewRollSpeep * this._control.Model.userAcceValue * 1.2;
            let obstaclePageIndex = Math.floor(-this.box_obstacle.x / this._control.Model.topForegroundWidth);
            if (this._control.Model.topForegroundIndex != obstaclePageIndex) {
                this._control.Model.topForegroundIndex = obstaclePageIndex;
                this.viewMoveHandler(this.obstacleOne, this.obstacleTwo, this._control.Model.topForegroundWidth, obstaclePageIndex);
            }
        }
    }
    viewMoveHandler(rollViewOne, rollViewTwo, width, pageIndex) {
        if (this._control.Model.viewRollSpeep > 0) {
            //左移
            if (pageIndex % 2 == 0) {
                rollViewTwo.x = width * (pageIndex + 1);
            }
            else {
                rollViewOne.x = width * (pageIndex + 1);
            }
        }
        else {
            //右移
            if (pageIndex % 2 == 0) {
                rollViewOne.x = width * pageIndex;
            }
            else {
                rollViewTwo.x = width * pageIndex;
            }
        }
    }
    onListRender(cell, index) {
        if (index > this.lists_head.array.length) {
            return;
        }
        let headItem = cell.getChildByName("hero");
        if (headItem) {
            let info = this.lists_head.array[index];
            headItem.dataSource = info;
            if (info.heroId > 0) {
                Laya.timer.frameOnce(index + (Math.random() * 45), this, () => {
                    this._battleHeroIndex++;
                    let startPos = {
                        x: MathUtil_1.default.rangeInt(10, 50) + this.width * 0.5 * Math.random(),
                        y: this.beginEventView.y + MathUtil_1.default.rangeInt(-150, 200) //- 150 + (this.beginEventView.height - 30) / (this.lists_head.array.length) * this._battleHeroIndex
                    };
                    EffectUtil_1.default.playBoneEffect("ui_born", { x: startPos.x - 20, y: startPos.y + 200 });
                    this.timerOnce(100, this, () => {
                        headItem.createBattleHero(this, startPos); //汽车放入跑道
                        headItem.setStage(1);
                        this._control.Model.is_reset_zorder = true;
                        //刷新战斗英雄的数量
                        this._control.setBattleHeroCount(PlayerMgr_1.default.Ins.Info.userRuncarCount + 1);
                    });
                });
            }
        }
    }
    /** 打开游戏加速 */
    openGameAcc() {
        let stage = ShareMgr_1.default.Ins.showShareOrAdv(() => {
            this.playAccEffect();
            // let effect: AnimBone = new AnimBone();
            // effect.createBone("images/boneAnim/zhuque.sk", true);
            // effect.scale(0.5, 0.5);
            // effect.pos(197, 198);
            // effect.completeBack = (animName: string) => {
            //     if (animName == "attack") {
            //         effect.playAnimation("", true, 3);
            //     }
            // }
            // this.addChild(effect);
            // this.timerLoop(3000, this, () => {
            //     effect.playAnimation("", false, 1);
            // })
        }, 10, false, true);
    }
    /** 加速效果 */
    playAccEffect(_acceTime = 90, _isEffect = true) {
        if (this._control.Model.userAcceTime > 1) {
            this._control.Model.userAcceTime += _acceTime;
            return;
        }
        this.btn_acc.mouseEnabled = false;
        this.imgAcce.visible = true;
        this._control.Model.userAcceTime += _acceTime;
        if (_isEffect) {
            EffectUtil_1.default.playAccEffect(this);
        }
        this._control.setBattleHeroAcce(2);
        this.refreshAcceTime();
        this.timerLoop(1000, this, this.refreshAcceTime);
        SoundMgr_1.default.Ins.playEffect(SoundType_1.default.GAME_ACCE);
    }
    /** 刷新加速时间 */
    refreshAcceTime() {
        let minute = Math.floor(this._control.Model.userAcceTime / 60);
        let sec = this._control.Model.userAcceTime % 60;
        this.txt_accTimes.text = (minute < 10 ? ('0' + minute) : minute) + ':' + (sec < 10 ? ('0' + sec) : sec);
        if (this._control.Model.userAcceTime > 0) {
            this._control.Model.userAcceTime--;
            StorageUtil_1.default.saveAcceLeftTime(this._control.Model.userAcceTime);
        }
        else {
            this._control.setBattleHeroAcce(1);
            this.clearTimer(this, this.refreshAcceTime);
            this.imgAcce.visible = false;
            this.btn_acc.mouseEnabled = true;
        }
    }
    /** 显示英雄保存箱 */
    onShowHeroBox() {
        this.btn_heroStore.visible = true;
    }
    /** 取出英雄箱中的英雄 */
    popHeroStore() {
        let heroId = StorageUtil_1.default.popHeroStore();
        if (heroId > 0) {
            let hero = this._control.createHero(heroId);
            if (hero) {
                StorageUtil_1.default.popHeroStore(true);
                this.haveStoreHero();
            }
        }
    }
    /** 是否拥有缓存的英雄 */
    haveStoreHero() {
        this.btn_heroStore.visible = StorageUtil_1.default.popHeroStore() > 0;
    }
    /** 转盘奖励加速 */
    onGameAcce(time) {
        this.playAccEffect(time);
    }
    /** 离线奖励 */
    onOffLineReward() {
        let offlinePrize = StorageUtil_1.default.offlinePrize();
        if (offlinePrize > 10 * 60 && PlayerMgr_1.default.Ins.Info.userIncomeSec > 0 && this._control.IsGuide == false) {
            // 1) 离线0-8小时：100%收益
            // 2) 8-24小时：8小时100%收益+（X-8）*50%收益
            // 3) 24小时以上：8小时100%收益+16小时*50%收益（意思就是超出24小时后的部分不计算收益）
            // 20180726-离线奖励规则修改：8小时内100%调整为25%；8小时-24小时50%调整为10%。
            // 20180728-离线奖励再降低下，只计算8小时内的。8小时以外不给奖励。
            // 20180806-有收益的最长时间改为：2个小时
            let gold = 0;
            let secondForHour = 60 * 60;
            let secHourMax = 2 * secondForHour;
            if (offlinePrize > secHourMax) {
                gold = (secHourMax * PlayerMgr_1.default.Ins.Info.userIncomeSec) * 0.05;
            }
            else {
                gold = (offlinePrize * PlayerMgr_1.default.Ins.Info.userIncomeSec) * 0.05;
            }
            if (gold > 0) {
                gold = gold * 4;
                this._control.updateGold(gold, false);
                if (PlayerMgr_1.default.Ins.Info.userLevel > 8) {
                    ViewMgr_1.default.Ins.open(ViewConst_1.default.OffLineRewardView, null, gold);
                }
                else {
                    MsgMgr_1.default.Ins.showMsg("获得离线奖励:" + MathUtil_1.default.unitConversion(gold));
                }
            }
        }
    }
    onRenderSystem(cell, index) {
        if (index > this.list_btn.array.length) {
            return;
        }
        let btn = cell.getChildByName("item");
        if (btn) {
            btn.dataSource = this.list_btn.array[index];
        }
    }
    /** 更新系统功能按钮 */
    onUpdateSystemBtn() {
        this.initSystemBtn();
    }
    /** 商店红点 */
    onUpdateShopRedPoint() {
        this.imgFree.visible = RedPointMgr_1.default.Ins.isShowShopRedPoint;
    }
    /** 显示英雄信息Tips */
    showHeroTips() {
        if (this._heroTips == null) {
            this._heroTips = Laya.Pool.getItemByClass("HeroTips", HeroTips_1.default);
            this._heroTips.dataSource = this._currHeadItem;
            this._copyHeadItem.addChild(this._heroTips);
        }
    }
    /** 移除英雄信息Tips */
    removeHeroTips() {
        this.clearTimer(this, this.showHeroTips);
        if (this._heroTips) {
            this._heroTips.removeTips();
            Laya.Pool.recover("HeroTips", this._heroTips);
            this._heroTips = null;
        }
    }
    /** 显示超越好友 */
    showSurpassView() {
        // if (window["wx"]) {
        //     SDKMgr.Ins.wxSetUserCloudStorage();
        //     this.surpassView.postMsg({ message: "showSurpassFriend" });
        // }
    }
}
exports.default = HallScene;
},{"../../../GameConfig":1,"../../../core_wq/event/EventType":19,"../../../core_wq/event/EventsMgr":20,"../../../core_wq/guide/GuideMgr":22,"../../../core_wq/layer/LayerMgr":23,"../../../core_wq/msg/MsgMgr":27,"../../../core_wq/msg/RedPointMgr":29,"../../../core_wq/msg/ShareMgr":30,"../../../core_wq/net/HttpMgr":31,"../../../core_wq/player/PlayerMgr":33,"../../../core_wq/player/data/PlayerInfo":34,"../../../core_wq/sound/SoundMgr":38,"../../../core_wq/sound/SoundType":39,"../../../core_wq/utils/EffectUtil":43,"../../../core_wq/utils/MathUtil":44,"../../../core_wq/utils/PointUtils":45,"../../../core_wq/utils/StorageUtil":47,"../../../core_wq/view/ViewMgr":50,"../../../core_wq/view/ViewRegisterMgr":51,"../../../core_wq/view/const/ViewConst":53,"../../../ui/layaMaxUI":88,"../HallControl":64,"../config/SystemConfig":65,"./HeroTips":71,"./item/HeadItem":74}],71:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
const LayerMgr_1 = require("../../../core_wq/layer/LayerMgr");
const GlobalData_1 = require("../../../core_wq/db/GlobalData");
const BoneAnim_1 = require("../../../core_wq/bone/BoneAnim");
class HeroTips extends layaMaxUI_1.ui.moduleView.hall.HeroTipsUI {
    constructor() { super(); }
    onEnable() {
        if (this._data) {
            // let pos: Laya.Point = PointUtils.localToGlobal(this._data);
            // this.pos(pos.x, pos.y);
            this.pos(this._data.x, this._data.y);
            if (this.x < 0) {
                this.x = 0;
            }
            else if (this.x > LayerMgr_1.default.stageDesignWidth) {
                this.x = LayerMgr_1.default.stageDesignWidth - this.width;
            }
            let config = GlobalData_1.default.getData(GlobalData_1.default.HeroConfigVO, this._data.Info.heroId);
            if (config) {
                this.txt_name.text = config.name;
                this.txt_speed.text = config.speed + "";
                this.txt_secCoin.text = config.PerSecCoin + "";
                this.txt_sellPrice.text = config.sellPrice + "";
            }
            if (this._data && this._data.heroVO) {
                this._bone = new BoneAnim_1.default(this._data.heroVO.modelImgUrl, true, true);
                this.addChild(this._bone);
                this._bone.pos(174, 420);
            }
        }
    }
    removeTips() {
        if (this._bone)
            this._bone.destroy();
        this.removeSelf();
    }
    set dataSource(value) {
        this._data = value;
    }
}
exports.default = HeroTips;
},{"../../../core_wq/bone/BoneAnim":3,"../../../core_wq/db/GlobalData":7,"../../../core_wq/layer/LayerMgr":23,"../../../ui/layaMaxUI":88}],72:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseView_1 = require("../../../core_wq/view/base/BaseView");
const LayerMgr_1 = require("../../../core_wq/layer/LayerMgr");
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
const AppConfig_1 = require("../../../core_wq/config/AppConfig");
const GlobalData_1 = require("../../../core_wq/db/GlobalData");
const BoneAnim_1 = require("../../../core_wq/bone/BoneAnim");
const HallControl_1 = require("../HallControl");
const MathUtil_1 = require("../../../core_wq/utils/MathUtil");
const MsgMgr_1 = require("../../../core_wq/msg/MsgMgr");
const ShareMgr_1 = require("../../../core_wq/msg/ShareMgr");
const ViewMgr_1 = require("../../../core_wq/view/ViewMgr");
const ViewConst_1 = require("../../../core_wq/view/const/ViewConst");
/**
 * 新武将界面
 */
class NewHeroView extends BaseView_1.default {
    constructor() {
        super(LayerMgr_1.default.Ins.frameLayer, layaMaxUI_1.ui.moduleView.hall.NewHeroViewUI);
        this._money = 0;
    }
    initData() {
        super.initData();
        if (this.datas && this.datas.length > 0) {
            this._heroVO = GlobalData_1.default.getData(GlobalData_1.default.HeroVO, this.datas[0]);
            if (this._heroVO) {
                this.ui.txt_name.text = this._heroVO.name;
                this._bone = new BoneAnim_1.default(this._heroVO.modelImgUrl, true, true);
                this._bone.completeBack = () => {
                };
                this.addChild(this._bone);
                this._bone.scale(1.5, 1.5);
                this._bone.pos(238, 445);
            }
            this._heroInfo = GlobalData_1.default.getData(GlobalData_1.default.HeroConfigVO, HallControl_1.default.Ins.Model.heroLevel);
            if (this._heroInfo) {
                this.ui.txt_exp.text = "经验: +" + this._heroInfo.syntheticExp;
                this.ui.txt_income.text = "收益: +" + MathUtil_1.default.unitConversion(this._heroInfo.PerSecCoin) + "/秒";
                let curPrice = HallControl_1.default.Ins.Model.getHeroBuyPrice(this._heroInfo.buyPrice, HallControl_1.default.Ins.Model.queryBuyHeroRecord(this._heroInfo.id));
                this._money = curPrice * 0.6;
            }
            this.ui.txt_price.text = "+" + MathUtil_1.default.unitConversion(this._money);
        }
    }
    addEvents() {
        this.ui.btn_reward.on(Laya.Event.CLICK, this, this.onGetReward);
    }
    removeEvents() {
        this.ui.btn_reward.off(Laya.Event.CLICK, this, this.onGetReward);
    }
    onGetReward() {
        if (AppConfig_1.default.isDebug && Laya.Browser.onPC) {
            this.sendReward();
        }
        else {
            ShareMgr_1.default.Ins.showShareOrAdv(() => {
                this.sendReward();
            });
        }
    }
    sendReward() {
        MsgMgr_1.default.Ins.showMsg("您已获得铜钱:" + MathUtil_1.default.unitConversion(this._money));
        HallControl_1.default.Ins.updateGold(this._money, false);
        ViewMgr_1.default.Ins.close(ViewConst_1.default.NewHeroView);
    }
    close(...param) {
        super.close(param);
        this._heroVO = null;
        this._heroInfo = null;
        if (this._bone)
            this._bone.destroy();
    }
}
exports.default = NewHeroView;
},{"../../../core_wq/bone/BoneAnim":3,"../../../core_wq/config/AppConfig":4,"../../../core_wq/db/GlobalData":7,"../../../core_wq/layer/LayerMgr":23,"../../../core_wq/msg/MsgMgr":27,"../../../core_wq/msg/ShareMgr":30,"../../../core_wq/utils/MathUtil":44,"../../../core_wq/view/ViewMgr":50,"../../../core_wq/view/base/BaseView":52,"../../../core_wq/view/const/ViewConst":53,"../../../ui/layaMaxUI":88,"../HallControl":64}],73:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseView_1 = require("../../../core_wq/view/base/BaseView");
const LayerMgr_1 = require("../../../core_wq/layer/LayerMgr");
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
const GlobalData_1 = require("../../../core_wq/db/GlobalData");
const PlayerMgr_1 = require("../../../core_wq/player/PlayerMgr");
/**
 * 用户信息界面
 */
class UserInfoView extends BaseView_1.default {
    constructor() {
        super(LayerMgr_1.default.Ins.frameLayer, layaMaxUI_1.ui.moduleView.hall.UserInfoViewUI);
    }
    initData() {
        super.initData();
        this._levelVO = GlobalData_1.default.getData(GlobalData_1.default.LevelVO, PlayerMgr_1.default.Ins.Info.userLevel);
        this._nextLevelVO = GlobalData_1.default.getData(GlobalData_1.default.LevelVO, PlayerMgr_1.default.Ins.Info.userLevel + 1);
        this.ui.txt_userId.text = PlayerMgr_1.default.Ins.Info.userId + "";
        this.ui.expBar.value = (1.0 * PlayerMgr_1.default.Ins.Info.userExp / this._nextLevelVO.upNeedexp);
        this.ui.txt_exp.text = Math.floor(PlayerMgr_1.default.Ins.Info.userExp) + "/" + Math.floor(this._nextLevelVO.upNeedexp);
        this.ui.txt_price.text = Math.floor(100 * this._levelVO.extraProduce) + "%";
        this.ui.txt_heroCount.text = this._levelVO.openCellCount + "个";
        this.ui.txt_battleCount.text = this._levelVO.battleCount + "个";
    }
}
exports.default = UserInfoView;
},{"../../../core_wq/db/GlobalData":7,"../../../core_wq/layer/LayerMgr":23,"../../../core_wq/player/PlayerMgr":33,"../../../core_wq/view/base/BaseView":52,"../../../ui/layaMaxUI":88}],74:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const layaMaxUI_1 = require("../../../../ui/layaMaxUI");
const GlobalData_1 = require("../../../../core_wq/db/GlobalData");
const PathConfig_1 = require("../../../../core_wq/config/PathConfig");
const Hero_1 = require("../../hero/Hero");
const HallControl_1 = require("../../HallControl");
const PlayerMgr_1 = require("../../../../core_wq/player/PlayerMgr");
const GuideMgr_1 = require("../../../../core_wq/guide/GuideMgr");
const EffectUtil_1 = require("../../../../core_wq/utils/EffectUtil");
class HeadItem extends layaMaxUI_1.ui.moduleView.hall.item.HeadItemUI {
    constructor() {
        super();
        /** 战斗的英雄 */
        this._battleHero = null;
        /** 0空,1战斗中,2拖动,3宝箱 */
        this._stage = HEAD_ITEM_STAGE.IDLE;
        /** 是否上锁 */
        this._isLock = false;
        /** 英雄位置下标 */
        this.heroIndex = -1;
        this._reviveTime = 0;
        this.isDie = false;
    }
    set dataSource(value) {
        this._info = value;
        this.imgHead.visible = false;
        if (this._info && this._info.heroId > 0) {
            this.updateHeadSkin(this._info.heroId);
        }
    }
    /** 更新头像 */
    updateHeadSkin(heroId, index = -1) {
        this.boxLevel.visible = this.imgHead.visible = heroId > 0;
        this.imgLock.visible = heroId < 0;
        if (index >= 0) {
            this.heroIndex = index;
        }
        if (heroId > 0) {
            if (this._info)
                this._info.heroId = heroId;
            this._heroVO = GlobalData_1.default.getData(GlobalData_1.default.HeroVO, heroId);
            if (this._heroVO) {
                this.imgHead.skin = PathConfig_1.default.HEAD_PATH + this._heroVO.imgUrl;
                this.txt_level.text = this._heroVO.id + "";
            }
        }
    }
    /** 创建战斗中的英雄 */
    createBattleHero(parentNode, startPos) {
        if (this._battleHero == null) {
            let hero = new Hero_1.default();
            hero.setCharacterBone(this._info.heroId);
            hero.pivot(41, 35);
            if (parentNode) {
                parentNode.addChild(hero);
                hero.pos(startPos.x, startPos.y);
                let heroInfo = GlobalData_1.default.getData(GlobalData_1.default.HeroConfigVO, this._info.heroId);
                if (heroInfo) {
                    hero.setMoveSpeedRatio(heroInfo.speed);
                }
                this.timerOnce(500, this, () => {
                    hero.playMoveAction();
                });
            }
            this._battleHero = hero;
            this.hpBar.value = hero.hp / hero.maxHp;
            this.hpBar.visible = true;
            this.reviveBar.visible = false;
            this.reviveBar.value = 0;
        }
        return this._battleHero;
    }
    /** 更新血量 */
    updateHp(value = 1) {
        if (GuideMgr_1.default.Ins.isGuide || this._battleHero == null)
            return;
        EffectUtil_1.default.playBoneEffect("hit_01", { x: this._battleHero.x, y: this._battleHero.y + 100 });
        this._battleHero.hp = this._battleHero.hp - value;
        this.hpBar.value = this._battleHero.hp / this._battleHero.maxHp;
        if (this.hpBar.value <= 0) {
            this.isDie = true;
            this._battleHero.IsInPosition = false;
            this._battleHero.visible = false;
            HallControl_1.default.Ins.setBattleHeroCount(PlayerMgr_1.default.Ins.Info.userRuncarCount - 1);
            this.hpBar.visible = false;
            this.reviveBar.visible = true;
            this.timerLoop(1000, this, this.heroReviveTime);
        }
    }
    heroReviveTime() {
        this._reviveTime += 1;
        this.reviveBar.value = this._reviveTime / 6;
        if (this._reviveTime >= 6) {
            this.clearTimer(this, this.heroReviveTime);
            this.reviveBar.visible = false;
            this.reviveBar.value = 0;
            this._reviveTime = 0;
            if (this._battleHero) {
                EffectUtil_1.default.playBoneEffect("ui_born", { x: this._battleHero.x - 20, y: this._battleHero.y + 200 });
            }
            this.timerOnce(100, this, () => {
                if (this._battleHero) {
                    this._battleHero.hp = this._battleHero.maxHp;
                    this.hpBar.value = this._battleHero.maxHp;
                    this._battleHero.visible = true;
                    this._battleHero.IsInPosition = true;
                }
                this.hpBar.visible = true;
                HallControl_1.default.Ins.setBattleHeroCount(PlayerMgr_1.default.Ins.Info.userRuncarCount + 1);
                this.isDie = false;
            });
        }
    }
    /** 移除战斗中的英雄 */
    removeBattleHero() {
        if (this._battleHero) {
            this._battleHero.removeEnemy();
            this._battleHero.removeSelf();
            Laya.Pool.recover("bone" + this._battleHero.heroId, this._battleHero.heroBone);
            this._battleHero = null;
        }
    }
    /** 获取战斗中的英雄 */
    get BattleHero() {
        return this._battleHero;
    }
    /** 设置战斗中的英雄 */
    set BattleHero(battleHero) {
        this._battleHero = battleHero;
    }
    /** 英雄出售价格 */
    getSellPrice() {
        if (this._heroVO) {
            let heroConfigVO = GlobalData_1.default.getData(GlobalData_1.default.HeroConfigVO, this._heroVO.id);
            if (heroConfigVO)
                return heroConfigVO.buyPrice * 0.8;
        }
        return 0;
    }
    /** 重置 */
    reset() {
        if (this._info)
            this._info.heroId = 0;
        if (this._heroVO)
            this._heroVO = null;
        this.hpBar.visible = false;
        this.reviveBar.visible = false;
        this.hpBar.value = 1;
        this.reviveBar.value = 0;
        this.updateHeadSkin(0);
        this.setStage(0);
        this.removeBattleHero();
    }
    /** 设置锁 */
    setLock(isLock) {
        this._isLock = this.imgLock.visible = isLock;
    }
    /** 0空,1战斗中,2拖动,3宝箱 */
    setStage(stage) {
        if (this._isLock)
            return;
        this._stage = stage;
    }
    /** 是否在战斗中 */
    get IsBattle() {
        return this._stage == HEAD_ITEM_STAGE.BATTLE;
    }
    /** 是否闲置 */
    get IsEmpty() {
        return this._stage <= HEAD_ITEM_STAGE.IDLE;
    }
    /** 是否宝箱 */
    get IsBox() {
        return this._stage == HEAD_ITEM_STAGE.BOX;
    }
    /** 是否上锁 */
    get IsLock() {
        return this._isLock;
    }
    /** 0空,1战斗中,2拖动,3宝箱 */
    get HeroStage() { return this._stage; }
    get Info() { return this._info; }
    get heroVO() {
        return this._heroVO;
    }
}
exports.default = HeadItem;
var HEAD_ITEM_STAGE;
(function (HEAD_ITEM_STAGE) {
    /** 空闲 */
    HEAD_ITEM_STAGE[HEAD_ITEM_STAGE["IDLE"] = 0] = "IDLE";
    /** 战斗中 */
    HEAD_ITEM_STAGE[HEAD_ITEM_STAGE["BATTLE"] = 1] = "BATTLE";
    /** 拖动 */
    HEAD_ITEM_STAGE[HEAD_ITEM_STAGE["DROP"] = 2] = "DROP";
    /** 宝箱 */
    HEAD_ITEM_STAGE[HEAD_ITEM_STAGE["BOX"] = 3] = "BOX";
})(HEAD_ITEM_STAGE || (HEAD_ITEM_STAGE = {}));
},{"../../../../core_wq/config/PathConfig":5,"../../../../core_wq/db/GlobalData":7,"../../../../core_wq/guide/GuideMgr":22,"../../../../core_wq/player/PlayerMgr":33,"../../../../core_wq/utils/EffectUtil":43,"../../../../ui/layaMaxUI":88,"../../HallControl":64,"../../hero/Hero":66}],75:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const layaMaxUI_1 = require("../../../../ui/layaMaxUI");
const EventsMgr_1 = require("../../../../core_wq/event/EventsMgr");
const EventType_1 = require("../../../../core_wq/event/EventType");
const PathConfig_1 = require("../../../../core_wq/config/PathConfig");
const SystemConfig_1 = require("../../config/SystemConfig");
const PointUtils_1 = require("../../../../core_wq/utils/PointUtils");
class SystemBtn extends layaMaxUI_1.ui.moduleView.hall.item.SystemBtnUI {
    constructor() {
        super(...arguments);
        this._info = null;
    }
    set dataSource(value) {
        this._info = value;
        if (this._info) {
            this.init();
            this.addEvents();
        }
    }
    init() {
        this.imgRenPoint.visible = false;
        this.btn_system.skin = PathConfig_1.default.SYSTEM_BTN_PATH.replace("{0}", this._info.icon);
        //投诉建议特殊处理
        if (this._info.id == SystemConfig_1.default.FEEDBACK) {
            let pos = PointUtils_1.default.localToGlobal(this.btn_system);
            // SDKMgr.Ins.wxCreateFeedbackButton({
            //     x: pos.x, y: pos.y,
            //     width: this.btn_system.width, height: this.btn_system.height
            // });
        }
    }
    addEvents() {
        this.btn_system.on(Laya.Event.CLICK, this, this.onClickBtn);
        EventsMgr_1.default.Ins.addListener(EventType_1.default.UPDATE_SYSTEM_RED_POINT, this.onUpdateRedPoint, this);
    }
    onClickBtn() {
        if (this._info) {
            EventsMgr_1.default.Ins.dispatch(EventType_1.default.OPEN_VIEW, this._info.id);
        }
        else {
            console.log("@David 功能按钮点击错误,没有找到System表对应的字段!");
        }
    }
    onUpdateRedPoint(id, isShow) {
        if (this._info && this._info.id == id) {
            this.imgRenPoint.visible = isShow;
        }
    }
}
exports.default = SystemBtn;
},{"../../../../core_wq/config/PathConfig":5,"../../../../core_wq/event/EventType":19,"../../../../core_wq/event/EventsMgr":20,"../../../../core_wq/utils/PointUtils":45,"../../../../ui/layaMaxUI":88,"../../config/SystemConfig":65}],76:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const LayerMgr_1 = require("../../../core_wq/layer/LayerMgr");
const AverageUtils_1 = require("../../../core_wq/utils/AverageUtils");
class SmallLoading extends Laya.Sprite {
    constructor() {
        super();
        this._content = null;
        this._speed = 0;
        this.init();
    }
    init() {
        this._averageUtils = new AverageUtils_1.default();
        this._speed = 10 / (1000 / 60);
        this._content = Laya.Pool.getItemByClass("Sprite", Laya.Sprite);
        this._content.graphics.drawRect(0, 0, LayerMgr_1.default.stageDesignWidth, LayerMgr_1.default.stageDesignHeight, "#000000");
        this._content.mouseEnabled = true;
        this._uiContainer = Laya.Pool.getItemByClass("Sprite", Laya.Sprite);
        let url = "images/common/load_Reel.png";
        Laya.loader.load([{ url: url, type: Laya.Loader.IMAGE }], Laya.Handler.create(this, (texture) => {
            let img = Laya.Pool.getItemByClass("Image", Laya.Image);
            img.texture = Laya.loader.getRes(url);
            img.x = -img.width * 0.5;
            img.y = -img.height * 0.5;
            this._uiContainer.addChild(img);
        }));
    }
    showLoading() {
        LayerMgr_1.default.Ins.smallLoadingLayer.addChild(this._content);
        this.frameLoop(1, this, this.enterFrame);
    }
    hideLoading() {
        if (this._content && this._content.parent) {
            this._uiContainer.rotation = 0;
            this._uiContainer.removeChildren();
            this._uiContainer.removeSelf();
            this._content.removeChildren();
            this._content.removeSelf();
            Laya.Pool.recover("Sprite", this._uiContainer);
            Laya.Pool.recover("Sprite", this._content);
        }
        this.clearTimer(this, this.enterFrame);
    }
    enterFrame(time) {
        this._averageUtils.push(this._speed * time);
        this._uiContainer.rotation += this._averageUtils.getValue();
    }
    static get Ins() {
        if (SmallLoading._instance == null) {
            SmallLoading._instance = new SmallLoading();
        }
        return SmallLoading._instance;
    }
}
exports.default = SmallLoading;
},{"../../../core_wq/layer/LayerMgr":23,"../../../core_wq/utils/AverageUtils":41}],77:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
const GlobalData_1 = require("../../../core_wq/db/GlobalData");
const AppConfig_1 = require("../../../core_wq/config/AppConfig");
const StorageUtil_1 = require("../../../core_wq/utils/StorageUtil");
const MathUtil_1 = require("../../../core_wq/utils/MathUtil");
class LoginScene extends layaMaxUI_1.ui.moduleView.login.LoginSceneUI {
    constructor() {
        super();
        this._authorityState = 3;
        this.tipsArr = [
            "等待时间越久离线金币越多哟",
            "正在召集英雄上阵",
            "别忘每天的免费转盘抽奖哟",
            "签到天数越久奖励越丰盛~",
            "邀请好友召唤英雄，获取超多奖励",
            "每天登陆都有大量离线金币领取"
        ];
    }
    onEnable() {
        this.showStartuplogo();
        this.initData();
    }
    initData() {
        this.txt_tips.visible = true;
        StorageUtil_1.default.versionCheck(() => {
            GlobalData_1.default.Ins.setup(() => {
                StorageUtil_1.default.loadStorage((isOK) => {
                    if (isOK) {
                        this.checkAuthority();
                    }
                });
            });
        });
    }
    /** 检查是否用户授权 */
    checkAuthority() {
        // if (Laya.Browser.onWeiXin) {
        //     SDKMgr.Ins.wxLogin((state: number) => {
        //         this._authorityState = state;
        //         switch (state) {
        //             case 1://已经授权
        //                 this.txt_tips.text = this.tipsArr[MathUtil.rangeInt(0, this.tipsArr.length - 1)];
        //                 break;
        //             case 2://授权成功进入大厅
        //                 SDKMgr.Ins.initWX();
        //                 this.enterHallScene();
        //                 break;
        //             case 3://没有授权
        //                 this.txt_tips.text = "点击任意位置进入游戏";
        //                 break;
        //         }
        //         this.onShowBreathEffect();
        //         this.timerLoop(1500, this, this.onShowBreathEffect);
        //     });
        // } else {
        this.enterHallScene();
        // }
    }
    /** 进入大厅 */
    enterHallScene() {
        this.removeImgStartTween();
        this.clearTimer(this, this.onShowBreathEffect);
        AppConfig_1.default.HallScene && Laya.Scene.open(AppConfig_1.default.HallScene);
    }
    /** 显示开机图 */
    showStartuplogo() {
        // let timeLine = new Laya.TimeLine();
        // timeLine.addLabel("tl1", 0).to(this.imgStart, { alpha: 1 }, 2000, Laya.Ease.linearNone)
        //     .addLabel("tl2", 2000).to(this.imgStart, { alpha: 0 }, 200, Laya.Ease.linearNone);
        // timeLine.on(Laya.Event.COMPLETE, this.imgStart, () => {
        //     timeLine.destroy();
        //     timeLine = null;
        //     this.imgStart.removeSelf();
        // });
        // timeLine.play(0, false);
        Laya.Tween.to(this.imgStart, { alpha: 1 }, 2000);
        Laya.Tween.to(this.imgStart, { alpha: 0, delay: 2000 }, 200, null, Laya.Handler.create(this, () => {
            this.removeImgStartTween();
        }));
    }
    removeImgStartTween() {
        Laya.Tween.clearTween(this.imgStart);
        this.imgStart.removeSelf();
    }
    onShowBreathEffect() {
        if (this._authorityState != 3) {
            this.txt_tips.text = this.tipsArr[MathUtil_1.default.rangeInt(0, this.tipsArr.length - 1)];
        }
        Laya.Tween.clearTween(this.txt_tips);
        Laya.Tween.to(this.txt_tips, { scaleX: 0.9, scaleY: 0.9 }, 900, null, Laya.Handler.create(this, () => {
            Laya.Tween.to(this.txt_tips, { scaleX: 1, scaleY: 1 }, 900);
        }));
    }
}
exports.default = LoginScene;
},{"../../../core_wq/config/AppConfig":4,"../../../core_wq/db/GlobalData":7,"../../../core_wq/utils/MathUtil":44,"../../../core_wq/utils/StorageUtil":47,"../../../ui/layaMaxUI":88}],78:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
const BaseView_1 = require("../../../core_wq/view/base/BaseView");
const LayerMgr_1 = require("../../../core_wq/layer/LayerMgr");
const ViewMgr_1 = require("../../../core_wq/view/ViewMgr");
const ViewConst_1 = require("../../../core_wq/view/const/ViewConst");
const LuckPrizeView_1 = require("./LuckPrizeView");
const AppConfig_1 = require("../../../core_wq/config/AppConfig");
/**
 * 转盘抽中倍率界面
 */
class LuckPrizeBoxView extends BaseView_1.default {
    constructor() {
        super(LayerMgr_1.default.Ins.subFrameLayer, layaMaxUI_1.ui.moduleView.luckPrize.LuckPrizeBoxViewUI);
        this.isLookAdv = false;
    }
    initData() {
        super.initData();
        this.isLookAdv = false;
        if (this.datas[0]) {
            switch (this.datas[0]) {
                case 3: //2倍奖励
                    if (LuckPrizeView_1.default.magnification < 2) {
                        LuckPrizeView_1.default.magnification = 2;
                    }
                    break;
                case 5: //8倍奖励
                    if (LuckPrizeView_1.default.magnification < 8) {
                        LuckPrizeView_1.default.magnification = 8;
                    }
                    break;
            }
            this.ui.imgTitle.skin = "images/luckPrize/luck_item_title_" + LuckPrizeView_1.default.magnification + ".png";
        }
    }
    addEvents() {
        this.ui.btn_adv.on(Laya.Event.CLICK, this, this.onShowAdv);
    }
    removeEvents() {
        this.ui.btn_adv.off(Laya.Event.CLICK, this, this.onShowAdv);
    }
    onShowAdv() {
        if (AppConfig_1.default.isDebug) {
            this.isLookAdv = true;
            ViewMgr_1.default.Ins.close(ViewConst_1.default.LuckPrizeBoxView);
        }
        else {
            // SDKMgr.Ins.showVideoAd((res) => {
            //     if (res && res.isEnded || res === undefined) {
            //         // 正常播放结束，可以下发游戏奖励
            //         this.isLookAdv = true;
            //         ViewMgr.Ins.close(ViewConst.LuckPrizeBoxView);
            //     }
            // }, () => {
            // })
        }
    }
    close(...param) {
        super.close(param);
        this.callback && this.callback(this.isLookAdv);
    }
}
exports.default = LuckPrizeBoxView;
},{"../../../core_wq/config/AppConfig":4,"../../../core_wq/layer/LayerMgr":23,"../../../core_wq/view/ViewMgr":50,"../../../core_wq/view/base/BaseView":52,"../../../core_wq/view/const/ViewConst":53,"../../../ui/layaMaxUI":88,"./LuckPrizeView":80}],79:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseView_1 = require("../../../core_wq/view/base/BaseView");
const LayerMgr_1 = require("../../../core_wq/layer/LayerMgr");
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
const HallControl_1 = require("../../hall/HallControl");
const GlobalData_1 = require("../../../core_wq/db/GlobalData");
const MathUtil_1 = require("../../../core_wq/utils/MathUtil");
const HttpMgr_1 = require("../../../core_wq/net/HttpMgr");
const PathConfig_1 = require("../../../core_wq/config/PathConfig");
const StorageUtil_1 = require("../../../core_wq/utils/StorageUtil");
const MsgMgr_1 = require("../../../core_wq/msg/MsgMgr");
const LuckPrizeView_1 = require("./LuckPrizeView");
class LuckPrizeRewardView extends BaseView_1.default {
    constructor() {
        super(LayerMgr_1.default.Ins.subFrameLayer, layaMaxUI_1.ui.moduleView.luckPrize.LuckPrizeRewardViewUI);
        this.rewards = [
            { id: 1, name: "少量铜钱", num: 1, imgUrl: "images/luckPrize/luck_prize_4.png" },
            { id: 2, name: "大量元宝", num: 488, imgUrl: "images/luckPrize/luck_prize_6.png" },
            { id: 3, name: "双倍奖励", num: 2, imgUrl: "images/luckPrize/luck_prize_5.png" },
            { id: 4, name: "黄金宝箱", num: 1, imgUrl: "images/luckPrize/luck_prize_3.png" },
            { id: 5, name: "八倍奖励", num: 8, imgUrl: "images/luckPrize/luck_prize_7.png" },
            { id: 6, name: "少量元宝", num: 88, imgUrl: "images/luckPrize/luck_prize_6.png" },
            { id: 7, name: "大量铜钱", num: 1, imgUrl: "images/luckPrize/luck_prize_1.png" },
            { id: 8, name: "白银宝箱", num: 1, imgUrl: "images/luckPrize/luck_prize_8.png" }
        ]; //奖励物品列表
        this._itemId = 0;
    }
    initData() {
        super.initData();
        this._itemId = this.datas[0];
        if (this._itemId > 0) {
            let itemData = this.rewards[this._itemId - 1];
            this.ui.imgIcon.skin = itemData.imgUrl;
            if (this._itemId == 1 || this._itemId == 7) { //金币
                let vo = GlobalData_1.default.getData(GlobalData_1.default.HeroConfigVO, HallControl_1.default.Ins.Model.heroLevel);
                let heroPrice = 0;
                if (vo) {
                    heroPrice = HallControl_1.default.Ins.Model.getHeroBuyPrice(vo.buyPrice, HallControl_1.default.Ins.Model.queryBuyHeroRecord(vo.id));
                    if (this._itemId == 7) { //超多铜钱
                        heroPrice = heroPrice * 0.6;
                    }
                    else { //大量铜钱
                        heroPrice = heroPrice * 0.2;
                    }
                }
                this.ui.txt_name.text = "获得：" + itemData.name + "x" + MathUtil_1.default.unitConversion(heroPrice * LuckPrizeView_1.default.magnification);
                HallControl_1.default.Ins.updateGold(heroPrice, false);
            }
            else if (this._itemId == 2 || this._itemId == 6) { //钻石
                this.ui.txt_name.text = "获得：" + itemData.name + "x" + itemData.num * LuckPrizeView_1.default.magnification;
                HttpMgr_1.default.Ins.requestDiamondData();
            }
            else if (this._itemId == 4) { //黄金宝箱 获得英雄
                let heroVO = HallControl_1.default.Ins.Model.getPreNewHeroData(HallControl_1.default.Ins.Model.heroLevel, 1);
                if (heroVO) {
                    let vo = GlobalData_1.default.getData(GlobalData_1.default.HeroVO, heroVO.id);
                    if (vo) {
                        this.ui.imgIcon.skin = PathConfig_1.default.HEAD_PATH + vo.imgUrl;
                        this.ui.txt_name.text = "获得：" + heroVO.name + "x" + itemData.num * LuckPrizeView_1.default.magnification;
                        for (let index = 0; index < LuckPrizeView_1.default.magnification; index++) {
                            let hero = HallControl_1.default.Ins.createHero(heroVO.id, true);
                            if (hero == null) {
                                StorageUtil_1.default.saveHeroStore(heroVO.id);
                                MsgMgr_1.default.Ins.showMsg("主人,武将已打包到箱子里了哦~记得点击箱子喲!");
                            }
                        }
                    }
                }
            }
            else if (this._itemId == 8) { //白银宝箱 获得英雄
                let dropData = GlobalData_1.default.getData(GlobalData_1.default.DropVO, HallControl_1.default.Ins.Model.heroLevel);
                if (dropData) {
                    let vo = GlobalData_1.default.getData(GlobalData_1.default.HeroVO, dropData.dropHeroLevel);
                    if (vo) {
                        this.ui.imgIcon.skin = PathConfig_1.default.HEAD_PATH + vo.imgUrl;
                        this.ui.txt_name.text = "获得：" + vo.name + "x" + itemData.num * LuckPrizeView_1.default.magnification;
                        for (let index = 0; index < LuckPrizeView_1.default.magnification; index++) {
                            let hero = HallControl_1.default.Ins.createHero(vo.id, true);
                            if (hero == null) {
                                StorageUtil_1.default.saveHeroStore(vo.id);
                                MsgMgr_1.default.Ins.showMsg("主人,武将已打包到箱子里了哦~记得点击箱子喲!");
                            }
                        }
                    }
                }
            }
        }
    }
    close(...param) {
        super.close(param);
        this.callback && this.callback();
    }
}
exports.default = LuckPrizeRewardView;
},{"../../../core_wq/config/PathConfig":5,"../../../core_wq/db/GlobalData":7,"../../../core_wq/layer/LayerMgr":23,"../../../core_wq/msg/MsgMgr":27,"../../../core_wq/net/HttpMgr":31,"../../../core_wq/utils/MathUtil":44,"../../../core_wq/utils/StorageUtil":47,"../../../core_wq/view/base/BaseView":52,"../../../ui/layaMaxUI":88,"../../hall/HallControl":64,"./LuckPrizeView":80}],80:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseView_1 = require("../../../core_wq/view/base/BaseView");
const LayerMgr_1 = require("../../../core_wq/layer/LayerMgr");
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
const HttpMgr_1 = require("../../../core_wq/net/HttpMgr");
const MathUtil_1 = require("../../../core_wq/utils/MathUtil");
const PlayerMgr_1 = require("../../../core_wq/player/PlayerMgr");
const MsgMgr_1 = require("../../../core_wq/msg/MsgMgr");
const ViewMgr_1 = require("../../../core_wq/view/ViewMgr");
const ViewConst_1 = require("../../../core_wq/view/const/ViewConst");
const EventsMgr_1 = require("../../../core_wq/event/EventsMgr");
const EventType_1 = require("../../../core_wq/event/EventType");
const PlayerInfo_1 = require("../../../core_wq/player/data/PlayerInfo");
const RollNameItem_1 = require("./item/RollNameItem");
const GlobalData_1 = require("../../../core_wq/db/GlobalData");
const AppConfig_1 = require("../../../core_wq/config/AppConfig");
const RedPointMgr_1 = require("../../../core_wq/msg/RedPointMgr");
class LuckPrizeView extends BaseView_1.default {
    constructor() {
        super(LayerMgr_1.default.Ins.frameLayer, layaMaxUI_1.ui.moduleView.luckPrize.LuckPrizeViewUI);
        this.costDiamond = 80;
        /** 视频抽奖次数 */
        this._videoCount = 0;
        this._freeCount = 0;
    }
    initUI() {
        super.initUI();
        this.initLuckPrizeData();
    }
    /** 初始化转盘数据 */
    initLuckPrizeData() {
        HttpMgr_1.default.Ins.requestPrizeInfo((_res) => {
            if (_res) {
                this._freeCount = _res.roulette_free_num;
                this._videoCount = _res.roulette_ad_num;
                LuckPrizeView.magnification = _res.reward_x;
                console.log("@David 转盘的次数：", this._freeCount, " 视频免费次数--", this._videoCount, " 倍率--", LuckPrizeView.magnification);
                this.ui.imgMagnification.skin = "images/luckPrize/luck_" + LuckPrizeView.magnification + ".png";
                this.refreshDiamondText();
                this.onUpdateDiamond();
                this.onUpdateRollName();
            }
        });
    }
    refreshDiamondText() {
        this.ui.imgDiamond.skin = "images/common/game_diamondIcon.png";
        if (this._freeCount > 0 || this._videoCount > 0) {
            this.ui.txt_diamond.text = "免费";
            if (this._freeCount <= 0 && this._videoCount > 0) {
                this.ui.imgDiamond.skin = "images/common/video_icon.png";
            }
        }
        else {
            this.ui.txt_diamond.changeText('' + this.costDiamond);
            if (RedPointMgr_1.default.Ins.isShowLuckPrizeRedPoint) {
                RedPointMgr_1.default.Ins.removeLuckPrizeRedPoint();
            }
        }
    }
    addEvents() {
        this.ui.btn_start.on(Laya.Event.CLICK, this, this.onStartHandler);
        EventsMgr_1.default.Ins.addListener(EventType_1.default.UPDATE_CURRENCY, this.onUpdateCurrency, this);
    }
    removeEvents() {
        this.ui.btn_start.off(Laya.Event.CLICK, this, this.onStartHandler);
        EventsMgr_1.default.Ins.addListener(EventType_1.default.UPDATE_CURRENCY, this.onUpdateCurrency, this);
    }
    /** 开始抽奖 */
    onStartHandler() {
        let that = this;
        that.startBtnEnabled(false);
        if (this._freeCount > 0) { //免费抽奖
            this.doLotteryByType(LOTTERY_TYPE.FREE);
        }
        else if (this._videoCount > 0) { //看视频抽奖
            this.handlerLookVideoLottery();
        }
        else if (PlayerMgr_1.default.Ins.Info.userDiamond >= this.costDiamond) { //钻石抽奖
            this.doLotteryByType(LOTTERY_TYPE.DIAMOND);
        }
        else {
            MsgMgr_1.default.Ins.showMsg("主人,元宝不足噢~");
            this.startBtnEnabled();
        }
    }
    doLotteryByType(type) {
        HttpMgr_1.default.Ins.requestDrawPrize(type, (data) => {
            if (!data || data.id == null) {
                console.log("@David 无法正常抽奖 type:", type);
                this.startBtnEnabled();
                return;
            }
            console.log("@David 转盘的抽奖：", data.id, "--", type);
            let itemId = data.id;
            let rotation = (8 - itemId) * 360 / 8 + 360 / 16;
            this.onRotation(360 * 3 + rotation, itemId);
            switch (type) {
                case LOTTERY_TYPE.FREE:
                    this._freeCount--;
                    this.refreshView();
                    break;
                case LOTTERY_TYPE.VIDEO:
                    this._videoCount--;
                    this.refreshView();
                    break;
                case LOTTERY_TYPE.DIAMOND:
                    HttpMgr_1.default.Ins.requestDiamondData();
                    break;
            }
        });
    }
    /** 看视频抽奖 */
    handlerLookVideoLottery() {
        if (AppConfig_1.default.isDebug) {
            this.doLotteryByType(LOTTERY_TYPE.VIDEO);
        }
        else {
            // SDKMgr.Ins.showVideoAd((res) => {
            //     if (res && res.isEnded || res === undefined) {
            //         // 正常播放结束，可以下发游戏奖励
            //         this.doLotteryByType(LOTTERY_TYPE.VIDEO);
            //     }
            //     else {
            //         // 播放中途退出，不下发游戏奖励
            //         this.startBtnEnabled();
            //     }
            // }, () => {
            this.startBtnEnabled();
            // });
        }
    }
    refreshView() {
        this.refreshDiamondText();
    }
    /** 转盘 */
    onRotation(rotation, itemId) {
        let fAdd = 0.2;
        this.ui.imgBg.rotation = this.ui.imgBg.rotation % 360;
        if (this.ui.imgBg.rotation > rotation) {
            fAdd = -fAdd;
        }
        let fAddLength = 0;
        let fTotalLength = Math.abs(rotation - this.ui.imgBg.rotation);
        let animFun = () => {
            if (fAdd > 0) {
                if (this.ui.imgBg.rotation < rotation) {
                    let progress = fAddLength / fTotalLength;
                    //加速
                    if (progress < 0.2) {
                        fAdd += 0.2;
                    }
                    else if (progress > 0.6) {
                        fAdd -= 0.1;
                    }
                    if (fAdd < 0.2) {
                        fAdd = 0.2;
                    }
                    fAddLength += fAdd;
                    this.ui.imgBg.rotation += fAdd;
                }
                else {
                    this.ui.imgBg.rotation = rotation;
                    this.ui.imgBg.clearTimer(this, animFun);
                    this.startBtnEnabled();
                    //显示奖励物品
                    this.showRewardView(itemId);
                }
            }
            else if (fAdd < 0) {
                if (this.ui.imgBg.rotation > rotation) {
                    this.ui.imgBg.rotation += fAdd;
                }
                else {
                    this.ui.imgBg.rotation = rotation;
                    this.ui.imgBg.clearTimer(this, animFun);
                    this.startBtnEnabled();
                }
            }
        };
        this.ui.imgBg.timerLoop(10, this, animFun);
    }
    /** 显示奖励界面 */
    showRewardView(itemId) {
        if (itemId != 3 && itemId != 5) {
            ViewMgr_1.default.Ins.open(ViewConst_1.default.LuckPrizeRewardView, () => {
                LuckPrizeView.magnification = 1;
                this.ui.imgMagnification.skin = "images/luckPrize/luck_" + LuckPrizeView.magnification + ".png";
            }, itemId);
        }
        else { //倍率界面
            ViewMgr_1.default.Ins.open(ViewConst_1.default.LuckPrizeBoxView, (flag) => {
                this.ui.imgMagnification.skin = "images/luckPrize/luck_" + LuckPrizeView.magnification + ".png";
                if (flag)
                    this.freeLottery();
            }, itemId);
        }
    }
    freeLottery() {
        console.log("@David 转盘抽中物品后关闭界面：", LuckPrizeView.magnification);
        if (LuckPrizeView.magnification > 1) {
            this.startBtnEnabled();
            this.doLotteryByType(LOTTERY_TYPE.FREE_VIDEO);
            console.log("@David 转盘抽中多倍后再一次免费抽奖");
        }
    }
    /** 更新用户货币 */
    onUpdateCurrency(type, diamond, isTotal = true) {
        if (type == PlayerInfo_1.default.DIAMOND) {
            this.onUpdateDiamond(diamond);
        }
    }
    /** 更新钻石数量 */
    onUpdateDiamond(diamond = -1) {
        if (diamond > -1) {
            this.ui.txt_myDiamond.text = diamond + "";
        }
        else {
            this.ui.txt_myDiamond.text = PlayerMgr_1.default.Ins.Info.userDiamond + "";
        }
    }
    /** 更新滚动的名字 */
    onUpdateRollName() {
        this.ui.rollBox.scrollRect = new Laya.Rectangle(0, 0, this.ui.rollBox.width, this.ui.rollBox.height);
        this.timerLoop(600, this, this.timeLoopRollName);
    }
    timeLoopRollName() {
        let vo = GlobalData_1.default.getData(GlobalData_1.default.LotteryRosterVO, MathUtil_1.default.rangeInt(1, 100));
        let rollName = Laya.Pool.getItemByClass("RollNameItem", RollNameItem_1.default);
        rollName.dataSource = vo;
        if (rollName.txt_name) {
            this.ui.rollBox.addChild(rollName);
            rollName.x = 63;
            rollName.y = this.ui.rollBox.height + rollName.height;
            Laya.Tween.to(rollName, { y: -rollName.height }, 2500, Laya.Ease.linearNone, Laya.Handler.create(this, () => {
                Laya.Tween.clearTween(rollName);
                rollName.removeSelf();
                Laya.Pool.recover("RollNameItem", rollName);
            }));
        }
    }
    startBtnEnabled(_isEnabled = true) {
        this.ui.btn_start.mouseEnabled = _isEnabled;
    }
}
LuckPrizeView.magnification = 1;
exports.default = LuckPrizeView;
var LOTTERY_TYPE;
(function (LOTTERY_TYPE) {
    /** 免费抽奖 */
    LOTTERY_TYPE[LOTTERY_TYPE["FREE"] = 0] = "FREE";
    /** 钻石抽奖 */
    LOTTERY_TYPE[LOTTERY_TYPE["DIAMOND"] = 1] = "DIAMOND";
    /** 免费抽奖的看视频 */
    LOTTERY_TYPE[LOTTERY_TYPE["VIDEO"] = 2] = "VIDEO";
    /** 这个是比较特殊的，只有抽中多倍后观看视频就免费赠送一次抽奖 */
    LOTTERY_TYPE[LOTTERY_TYPE["FREE_VIDEO"] = 3] = "FREE_VIDEO";
})(LOTTERY_TYPE || (LOTTERY_TYPE = {}));
},{"../../../core_wq/config/AppConfig":4,"../../../core_wq/db/GlobalData":7,"../../../core_wq/event/EventType":19,"../../../core_wq/event/EventsMgr":20,"../../../core_wq/layer/LayerMgr":23,"../../../core_wq/msg/MsgMgr":27,"../../../core_wq/msg/RedPointMgr":29,"../../../core_wq/net/HttpMgr":31,"../../../core_wq/player/PlayerMgr":33,"../../../core_wq/player/data/PlayerInfo":34,"../../../core_wq/utils/MathUtil":44,"../../../core_wq/view/ViewMgr":50,"../../../core_wq/view/base/BaseView":52,"../../../core_wq/view/const/ViewConst":53,"../../../ui/layaMaxUI":88,"./item/RollNameItem":81}],81:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const layaMaxUI_1 = require("../../../../ui/layaMaxUI");
class RollNameItem extends layaMaxUI_1.ui.moduleView.luckPrize.item.RollNameItemUI {
    constructor() { super(); }
    set dataSource(value) {
        this._data = value;
        this.updateView();
    }
    updateView() {
        if (this._data && this.txt_name) {
            this.txt_name.text = this._data.lotteryName;
            this.txt_reward.text = this._data.lotterydata;
            this.hbox.refresh();
        }
    }
}
exports.default = RollNameItem;
},{"../../../../ui/layaMaxUI":88}],82:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
class RankItem extends layaMaxUI_1.ui.moduleView.rank.RankItemUI {
    constructor() { super(); }
    set dataSource(value) {
        if (value) {
            this.txt_name.text = value.nick_name;
            this.txt_position.text = value.city == null ? "火星" : value.city;
            this.imgHead.skin = value.avatar_url;
        }
    }
}
exports.default = RankItem;
},{"../../../ui/layaMaxUI":88}],83:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseView_1 = require("../../../core_wq/view/base/BaseView");
const LayerMgr_1 = require("../../../core_wq/layer/LayerMgr");
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
const HttpMgr_1 = require("../../../core_wq/net/HttpMgr");
const MathUtil_1 = require("../../../core_wq/utils/MathUtil");
const PathConfig_1 = require("../../../core_wq/config/PathConfig");
const BoneAnim_1 = require("../../../core_wq/bone/BoneAnim");
const GlobalData_1 = require("../../../core_wq/db/GlobalData");
/**
 * 排行榜
 */
class RankView extends BaseView_1.default {
    constructor() {
        super(LayerMgr_1.default.Ins.frameLayer, layaMaxUI_1.ui.moduleView.rank.RankViewUI);
        this.curSelectedIndex = -1;
        this.isWorldRanking = true;
    }
    initUI() {
        super.initUI();
        this.ui.lists.renderHandler = Laya.Handler.create(this, this.onListRender, null, false);
        this.initWorldRank();
    }
    /** 初始化世界榜 */
    initWorldRank() {
        this.ui.imgBase.visible = false;
        HttpMgr_1.default.Ins.requestWorldRankingData((data) => {
            this._worldRankData = data;
            if (this._worldRankData) {
                this.updateRankList(this._worldRankData);
                this.ui.imgBase.visible = true;
                if (this._worldRankData.length > 0 && RankView.isInitWorlHero == false) {
                    this.showBaseHero(this._worldRankData);
                }
            }
            this.showMyWorldRank();
        });
    }
    /** 显示我的世界榜排名 */
    showMyWorldRank() {
        HttpMgr_1.default.Ins.requestMyWorldRankData((rankNum) => {
            if (rankNum) {
                this.ui.txt_myRank.text = rankNum + "";
            }
        });
    }
    /** 初始化收益排行榜 */
    initIncomeRank() {
        HttpMgr_1.default.Ins.requestIncomeRankingData((data) => {
            this._incomeRankData = data;
            if (this._incomeRankData) {
                if (this._incomeRankData && this._incomeRankData.length > 0) {
                    this._incomeRankData.forEach(element => {
                        let asset = MathUtil_1.default.parseStringNum(element.week_output);
                        if (asset < 0)
                            element.week_output = 0;
                    });
                }
                this.updateRankList(this._incomeRankData);
            }
            this.showMyIncomeRank();
        });
    }
    /** 显示我的收益榜排名 */
    showMyIncomeRank() {
        HttpMgr_1.default.Ins.requestMyIncomeRankData((rankNum) => {
            if (rankNum) {
                this.ui.txt_myRank.text = rankNum + "";
            }
        });
    }
    updateRankList(rankData) {
        this.ui.txt_noRank.visible = true;
        this.ui.lists.visible = false;
        this.ui.imgMyRank.visible = false;
        if (rankData && rankData.length > 0) {
            this.ui.txt_noRank.visible = false;
            this.ui.lists.visible = true;
            this.ui.imgMyRank.visible = true;
            this.ui.lists.array = rankData;
        }
    }
    /** 显示底座上的英雄 */
    showBaseHero(rankData) {
        let count = rankData.length <= 3 ? rankData.length : 3;
        RankView.isInitWorlHero = true;
        for (let index = 0; index < count; index++) {
            const data = rankData[index];
            if (data) {
                let vo = GlobalData_1.default.getData(GlobalData_1.default.HeroVO, data.car_level);
                if (vo) {
                    let heroBone = new BoneAnim_1.default(vo.modelImgUrl, true, true);
                    this.ui.imgBase.addChild(heroBone);
                    heroBone.pos(this.ui["pos_" + index].x, this.ui["pos_" + index].y);
                    this.ui["txt_name" + index].text = data.nick_name;
                    this.ui["txt_name" + index].visible = true;
                }
            }
        }
    }
    addEvents() {
        this.ui.tab_rank.on(Laya.Event.CLICK, this, this.onRankTab);
    }
    removeEvents() {
        this.ui.tab_rank.off(Laya.Event.CLICK, this, this.onRankTab);
    }
    /** tab选择 0世界榜/1收益榜 */
    onRankTab() {
        if (this.curSelectedIndex == this.ui.tab_rank.selectedIndex)
            return;
        this.curSelectedIndex = this.ui.tab_rank.selectedIndex;
        this.isWorldRanking = (0 == this.ui.tab_rank.selectedIndex);
        if (this.isWorldRanking) { //世界榜
            this.ui.lists.height = 465;
            this.ui.lists.y = 454;
            this.ui.imgBase.visible = true;
            this._worldRankData != null ? this.updateRankList(this._worldRankData) : this.initWorldRank();
        }
        else { //收益榜
            this.ui.lists.height = 735;
            this.ui.lists.y = 185;
            this.ui.imgBase.visible = false;
            this._incomeRankData != null ? this.updateRankList(this._incomeRankData) : this.initIncomeRank();
        }
    }
    onListRender(cell, index) {
        if (index > this.ui.lists.array.length)
            return;
        let item = cell.getChildByName("item");
        if (item) {
            let data = this.ui.lists.array[index];
            item.dataSource = data;
            item.box_title.visible = this.isWorldRanking;
            item.box_price.visible = !this.isWorldRanking;
            item.imgRank.visible = index < 3;
            item.txt_rank.visible = !item.imgRank.visible;
            if (item.imgRank.visible) {
                item.imgRank.skin = PathConfig_1.default.RANK_PATH.replace("{0}", (index + 1) + "");
            }
            else {
                item.txt_rank.text = (index + 1) + "";
            }
            if (this.isWorldRanking) {
                let vo = GlobalData_1.default.getData(GlobalData_1.default.HeroVO, data.car_level);
                if (vo)
                    item.txt_title.text = vo.name;
            }
            else {
                item.txt_score.text = data.week_output;
            }
        }
    }
}
RankView.isInitWorlHero = false;
exports.default = RankView;
},{"../../../core_wq/bone/BoneAnim":3,"../../../core_wq/config/PathConfig":5,"../../../core_wq/db/GlobalData":7,"../../../core_wq/layer/LayerMgr":23,"../../../core_wq/net/HttpMgr":31,"../../../core_wq/utils/MathUtil":44,"../../../core_wq/view/base/BaseView":52,"../../../ui/layaMaxUI":88}],84:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
const GlobalData_1 = require("../../../core_wq/db/GlobalData");
const PathConfig_1 = require("../../../core_wq/config/PathConfig");
const HallControl_1 = require("../../hall/HallControl");
const ShareMgr_1 = require("../../../core_wq/msg/ShareMgr");
const MathUtil_1 = require("../../../core_wq/utils/MathUtil");
const PlayerMgr_1 = require("../../../core_wq/player/PlayerMgr");
const MsgMgr_1 = require("../../../core_wq/msg/MsgMgr");
const StorageUtil_1 = require("../../../core_wq/utils/StorageUtil");
const ViewMgr_1 = require("../../../core_wq/view/ViewMgr");
const ViewConst_1 = require("../../../core_wq/view/const/ViewConst");
class ShopItem extends layaMaxUI_1.ui.moduleView.shop.ShopItemUI {
    constructor() {
        super();
        this._firstLockId = 0;
        this._buyPrice = 0;
    }
    set dataSource(value) {
        if (value) {
            this._config = value;
            this.init();
            this.addEvents();
        }
    }
    init() {
        this._vo = GlobalData_1.default.getData(GlobalData_1.default.HeroVO, this._config.id);
        if (this._vo) {
            this.imgIcon.skin = PathConfig_1.default.HEAD_PATH + this._vo.imgUrl;
            if (HallControl_1.default.Ins.Model.heroLevel < this._config.id) {
                this.imgIcon.gray = true;
                this.boxName.visible = false;
            }
            else {
                this.imgIcon.gray = false;
                this.boxName.visible = true;
                this.txt_level.text = this._config.id + "";
                let strNewName = '';
                for (var index = 0; index < this._config.name.length; index++) {
                    var element = this._config.name[index];
                    if (element) {
                        strNewName += element + '\n';
                    }
                }
                this.txt_name.text = strNewName;
            }
            this.btn_buyLock.visible = HallControl_1.default.Ins.Model.heroLevel < this._config.unlockNeedId;
            this.btn_buy.visible = !this.btn_buyLock.visible;
            if (this.btn_buy.visible && HallControl_1.default.Ins.Model.heroLevel < this._config.unlockNeedId && this._firstLockId < 1) {
                this._firstLockId = this._config.unlockNeedId;
            }
            if (this._firstLockId > 0) {
                this.btn_buyDiamond.visible = this._firstLockId == this._config.unlockNeedId;
                if (this.btn_buyDiamond.visible) {
                    this.updateAdvBtn();
                }
            }
            else {
                this.btn_buyDiamond.visible = false;
            }
            this.updateBuyPrice();
            this.updateLockHeroBtn();
        }
    }
    updateBuyPrice() {
        if (this.btn_buy.visible) {
            this._buyPrice = HallControl_1.default.Ins.Model.getHeroBuyPrice(this._config.buyPrice, HallControl_1.default.Ins.Model.queryBuyHeroRecord(this._config.id));
            this.txt_price.text = MathUtil_1.default.unitConversion(this._buyPrice);
        }
    }
    addEvents() {
        this.btn_buy.on(Laya.Event.CLICK, this, this.onBuyHero);
        this.btn_adv.on(Laya.Event.CLICK, this, this.onLookAdv);
        this.btn_buyDiamond.on(Laya.Event.CLICK, this, this.onBuyDiamondHero);
    }
    removeEvents() {
        this.btn_buy.off(Laya.Event.CLICK, this, this.onBuyHero);
        this.btn_adv.off(Laya.Event.CLICK, this, this.onLookAdv);
        this.btn_buyDiamond.off(Laya.Event.CLICK, this, this.onBuyDiamondHero);
    }
    /** 购买英雄 */
    onBuyHero() {
        if (PlayerMgr_1.default.Ins.Info.userGold >= this._buyPrice) {
            HallControl_1.default.Ins.buyHero(this._config);
            this.updateBuyPrice();
        }
        else {
            MsgMgr_1.default.Ins.showMsg("主人,铜钱不够喔~快去做任务吧...");
        }
    }
    /** 看视频 */
    onLookAdv() {
        ShareMgr_1.default.Ins.showShareOrAdv(() => {
            let hero = HallControl_1.default.Ins.createHero(this._config.id, true);
            if (hero == null) {
                StorageUtil_1.default.saveHeroStore(this._config.id);
                MsgMgr_1.default.Ins.showMsg("主人,武将已打包到箱子里了哦~记得点击箱子喲!");
            }
            this.updateAdvBtn();
        }, 11, false, true);
    }
    /** 钻石购买英雄 */
    onBuyDiamondHero() {
        ViewMgr_1.default.Ins.open(ViewConst_1.default.DiamondBuyView, null, { type: "hero", value: this._config.id });
    }
    /** 未解锁按钮处理 */
    updateLockHeroBtn() {
        if (!this.btn_buyLock.visible)
            return;
        let lockConfig = GlobalData_1.default.getData(GlobalData_1.default.HeroVO, this._config.unlockNeedId);
        if (lockConfig) {
            this.imgHero.skin = PathConfig_1.default.HEAD_PATH + lockConfig.imgUrl;
            // if (!this.imgHero.filters) {
            //     this.imgHero.filters = ColorUtil.createColorFilter(2);
            // }
            // this.imgHero.alpha = 0.6;
            this.txt_unlockLevel.text = this._config.unlockNeedId + "";
            if (this._config.unlockNeedId >= 1000) {
                this.txt_unlockLevel.text = "?";
            }
        }
    }
    updateAdvBtn() {
        if (ShareMgr_1.default.Ins.getAdTimes(11) < 1 && ShareMgr_1.default.Ins.getShareTimes(11) < 1) {
            this.btn_adv.visible = false;
        }
        else {
            if (ShareMgr_1.default.Ins.isAdStage(11)) {
                this.btn_adv.skin = "images/shop/shop_free_video.png";
            }
            else {
                this.btn_adv.skin = "images/shop/shop_free_share.png";
            }
        }
    }
}
exports.default = ShopItem;
},{"../../../core_wq/config/PathConfig":5,"../../../core_wq/db/GlobalData":7,"../../../core_wq/msg/MsgMgr":27,"../../../core_wq/msg/ShareMgr":30,"../../../core_wq/player/PlayerMgr":33,"../../../core_wq/utils/MathUtil":44,"../../../core_wq/utils/StorageUtil":47,"../../../core_wq/view/ViewMgr":50,"../../../core_wq/view/const/ViewConst":53,"../../../ui/layaMaxUI":88,"../../hall/HallControl":64}],85:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseView_1 = require("../../../core_wq/view/base/BaseView");
const LayerMgr_1 = require("../../../core_wq/layer/LayerMgr");
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
const GlobalData_1 = require("../../../core_wq/db/GlobalData");
const ViewMgr_1 = require("../../../core_wq/view/ViewMgr");
const ViewConst_1 = require("../../../core_wq/view/const/ViewConst");
/**
 * 商店界面
 */
class ShopView extends BaseView_1.default {
    constructor() {
        super(LayerMgr_1.default.Ins.frameLayer, layaMaxUI_1.ui.moduleView.shop.ShopViewUI);
        this._curBuyIndex = 0;
        this.setResources(["shop"]);
    }
    //初始化
    initUI() {
        super.initUI();
        let listDatas = GlobalData_1.default.getAllValue(GlobalData_1.default.HeroConfigVO);
        if (listDatas) {
            this.ui.lists.vScrollBarSkin = "";
            this.ui.lists.array = listDatas;
            this.ui.lists.renderHandler = Laya.Handler.create(this, this.onListRender, null, false);
            this.frameOnce(5, this, () => {
                if (this._curBuyIndex > 0) {
                    this.ui.lists.scrollTo(this._curBuyIndex);
                }
            });
        }
    }
    /** 添加监听事件 */
    addEvents() {
        this.ui.btn_close.on(Laya.Event.CLICK, this, this.onCloseHandler);
    }
    /** 移除监听事件 */
    removeEvents() {
        this.ui.btn_close.off(Laya.Event.CLICK, this, this.onCloseHandler);
    }
    onListRender(cell, index) {
        if (index > this.ui.lists.array.length) {
            return;
        }
        let item = cell.getChildByName("shopItem");
        if (item) {
            item.dataSource = this.ui.lists.array[index];
            if (item.btn_buy.visible && index < this.ui.lists.array.length - 3) {
                this._curBuyIndex = index - 2;
            }
        }
    }
    onCloseHandler() {
        ViewMgr_1.default.Ins.close(ViewConst_1.default.ShopView);
    }
}
exports.default = ShopView;
},{"../../../core_wq/db/GlobalData":7,"../../../core_wq/layer/LayerMgr":23,"../../../core_wq/view/ViewMgr":50,"../../../core_wq/view/base/BaseView":52,"../../../core_wq/view/const/ViewConst":53,"../../../ui/layaMaxUI":88}],86:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
const HttpMgr_1 = require("../../../core_wq/net/HttpMgr");
const MsgMgr_1 = require("../../../core_wq/msg/MsgMgr");
const TaskView_1 = require("./TaskView");
const RedPointMgr_1 = require("../../../core_wq/msg/RedPointMgr");
class TaskItem extends layaMaxUI_1.ui.moduleView.task.TaskItemUI {
    constructor() { super(); }
    set dataSource(value) {
        this._info = value;
        if (this._info) {
            let finishNum = this._info.task_num || 0;
            if (finishNum > this._info.num) {
                finishNum = this._info.num;
            }
            this.txt_title.text = this._info.title + "(" + finishNum + "/" + this._info.num + ")";
            this.txt_diamond.text = "+" + this._info.reward;
            if (this._info.task_status > 0) {
                if (this._info.task_status > 1) { //已领取
                    this.updateGetBtnState(STATE.HaveReceived);
                }
                else { //可领取
                    this.updateGetBtnState(STATE.Receive);
                }
            }
            else {
                this.updateGetBtnState(STATE.Uncollected);
            }
            this.addEvents();
        }
    }
    updateGetBtnState(state) {
        switch (state) {
            case STATE.Uncollected:
                this.btn_get.label = "未领取";
                this.btn_get.disabled = true;
                break;
            case STATE.Receive:
                this.btn_get.label = "可领取";
                this.btn_get.disabled = false;
                break;
            case STATE.HaveReceived:
                this.btn_get.label = "已领取";
                this.btn_get.disabled = true;
                break;
        }
    }
    addEvents() {
        this.btn_get.on(Laya.Event.CLICK, this, this.onGetReward);
        this.btn_go.on(Laya.Event.CLICK, this, this.onGotoView);
    }
    onGetReward() {
        HttpMgr_1.default.Ins.requestTaskPrize(this._info.id, (res) => {
            if (res) {
                this._info.status = 2;
                this.updateGetBtnState(STATE.HaveReceived);
                MsgMgr_1.default.Ins.showMsg("任务奖励领取成功!");
                TaskView_1.default.redPointNum--;
                if (TaskView_1.default.redPointNum < 1) {
                    TaskView_1.default.redPointNum = 0;
                    RedPointMgr_1.default.Ins.removeTaskRedPoint();
                }
                HttpMgr_1.default.Ins.requestDiamondData();
            }
        });
    }
    onGotoView() {
    }
}
exports.default = TaskItem;
var STATE;
(function (STATE) {
    /** 未领取 */
    STATE[STATE["Uncollected"] = 0] = "Uncollected";
    /** 可领取 */
    STATE[STATE["Receive"] = 1] = "Receive";
    /** 已领取 */
    STATE[STATE["HaveReceived"] = 2] = "HaveReceived";
})(STATE || (STATE = {}));
},{"../../../core_wq/msg/MsgMgr":27,"../../../core_wq/msg/RedPointMgr":29,"../../../core_wq/net/HttpMgr":31,"../../../ui/layaMaxUI":88,"./TaskView":87}],87:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BaseView_1 = require("../../../core_wq/view/base/BaseView");
const LayerMgr_1 = require("../../../core_wq/layer/LayerMgr");
const layaMaxUI_1 = require("../../../ui/layaMaxUI");
const HttpMgr_1 = require("../../../core_wq/net/HttpMgr");
/**
 * 任务界面
 */
class TaskView extends BaseView_1.default {
    constructor() {
        super(LayerMgr_1.default.Ins.frameLayer, layaMaxUI_1.ui.moduleView.task.TaskViewUI);
        this.setResources(["task"]);
    }
    initUI() {
        super.initUI();
        this.ui.txt_noTask.visible = true;
        this.ui.lists.visible = false;
        HttpMgr_1.default.Ins.requestTaskInfo((data) => {
            if (data && data.length > 0) {
                for (let index = 0; index < data.length; index++) {
                    const element = data[index];
                    if (element.task_status == 1) {
                        TaskView.redPointNum++;
                    }
                }
                this.ui.txt_noTask.visible = false;
                this.ui.lists.array = data;
                this.ui.lists.renderHandler = Laya.Handler.create(this, this.onListRender, null, false);
                this.ui.lists.visible = true;
            }
        });
    }
    onListRender(cell, index) {
        if (index > this.ui.lists.array.length) {
            return;
        }
        let item = cell.getChildByName("item");
        if (item) {
            item.dataSource = this.ui.lists.array[index];
        }
    }
}
TaskView.redPointNum = 0;
exports.default = TaskView;
},{"../../../core_wq/layer/LayerMgr":23,"../../../core_wq/net/HttpMgr":31,"../../../core_wq/view/base/BaseView":52,"../../../ui/layaMaxUI":88}],88:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var View = Laya.View;
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var moduleView;
    (function (moduleView) {
        var common;
        (function (common) {
            class DiamondBuyViewUI extends View {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("moduleView/common/DiamondBuyView");
                }
            }
            common.DiamondBuyViewUI = DiamondBuyViewUI;
            REG("ui.moduleView.common.DiamondBuyViewUI", DiamondBuyViewUI);
            class GoldNotEnoughViewUI extends View {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("moduleView/common/GoldNotEnoughView");
                }
            }
            common.GoldNotEnoughViewUI = GoldNotEnoughViewUI;
            REG("ui.moduleView.common.GoldNotEnoughViewUI", GoldNotEnoughViewUI);
            class LevelRewardViewUI extends View {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("moduleView/common/LevelRewardView");
                }
            }
            common.LevelRewardViewUI = LevelRewardViewUI;
            REG("ui.moduleView.common.LevelRewardViewUI", LevelRewardViewUI);
            class MsgTipsViewUI extends View {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("moduleView/common/MsgTipsView");
                }
            }
            common.MsgTipsViewUI = MsgTipsViewUI;
            REG("ui.moduleView.common.MsgTipsViewUI", MsgTipsViewUI);
            class OffLineRewardViewUI extends View {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("moduleView/common/OffLineRewardView");
                }
            }
            common.OffLineRewardViewUI = OffLineRewardViewUI;
            REG("ui.moduleView.common.OffLineRewardViewUI", OffLineRewardViewUI);
        })(common = moduleView.common || (moduleView.common = {}));
    })(moduleView = ui.moduleView || (ui.moduleView = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var moduleView;
    (function (moduleView) {
        var daySign;
        (function (daySign) {
            class DaySignItemUI extends View {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("moduleView/daySign/DaySignItem");
                }
            }
            daySign.DaySignItemUI = DaySignItemUI;
            REG("ui.moduleView.daySign.DaySignItemUI", DaySignItemUI);
            class DaySignViewUI extends View {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("moduleView/daySign/DaySignView");
                }
            }
            daySign.DaySignViewUI = DaySignViewUI;
            REG("ui.moduleView.daySign.DaySignViewUI", DaySignViewUI);
        })(daySign = moduleView.daySign || (moduleView.daySign = {}));
    })(moduleView = ui.moduleView || (ui.moduleView = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var moduleView;
    (function (moduleView) {
        var follow;
        (function (follow) {
            class FollowViewUI extends Scene {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("moduleView/follow/FollowView");
                }
            }
            follow.FollowViewUI = FollowViewUI;
            REG("ui.moduleView.follow.FollowViewUI", FollowViewUI);
        })(follow = moduleView.follow || (moduleView.follow = {}));
    })(moduleView = ui.moduleView || (ui.moduleView = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var moduleView;
    (function (moduleView) {
        var guide;
        (function (guide) {
            class GuideSpeakViewUI extends View {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("moduleView/guide/GuideSpeakView");
                }
            }
            guide.GuideSpeakViewUI = GuideSpeakViewUI;
            REG("ui.moduleView.guide.GuideSpeakViewUI", GuideSpeakViewUI);
        })(guide = moduleView.guide || (moduleView.guide = {}));
    })(moduleView = ui.moduleView || (ui.moduleView = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var moduleView;
    (function (moduleView) {
        var hall;
        (function (hall) {
            class CurrencyViewUI extends View {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("moduleView/hall/CurrencyView");
                }
            }
            hall.CurrencyViewUI = CurrencyViewUI;
            REG("ui.moduleView.hall.CurrencyViewUI", CurrencyViewUI);
            class HallSceneUI extends Scene {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("moduleView/hall/HallScene");
                }
            }
            hall.HallSceneUI = HallSceneUI;
            REG("ui.moduleView.hall.HallSceneUI", HallSceneUI);
            class HeroTipsUI extends View {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("moduleView/hall/HeroTips");
                }
            }
            hall.HeroTipsUI = HeroTipsUI;
            REG("ui.moduleView.hall.HeroTipsUI", HeroTipsUI);
            class NewHeroViewUI extends View {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("moduleView/hall/NewHeroView");
                }
            }
            hall.NewHeroViewUI = NewHeroViewUI;
            REG("ui.moduleView.hall.NewHeroViewUI", NewHeroViewUI);
            class UserInfoViewUI extends View {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("moduleView/hall/UserInfoView");
                }
            }
            hall.UserInfoViewUI = UserInfoViewUI;
            REG("ui.moduleView.hall.UserInfoViewUI", UserInfoViewUI);
        })(hall = moduleView.hall || (moduleView.hall = {}));
    })(moduleView = ui.moduleView || (ui.moduleView = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var moduleView;
    (function (moduleView) {
        var hall;
        (function (hall) {
            var item;
            (function (item) {
                class HeadItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("moduleView/hall/item/HeadItem");
                    }
                }
                item.HeadItemUI = HeadItemUI;
                REG("ui.moduleView.hall.item.HeadItemUI", HeadItemUI);
                class SystemBtnUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("moduleView/hall/item/SystemBtn");
                    }
                }
                item.SystemBtnUI = SystemBtnUI;
                REG("ui.moduleView.hall.item.SystemBtnUI", SystemBtnUI);
            })(item = hall.item || (hall.item = {}));
        })(hall = moduleView.hall || (moduleView.hall = {}));
    })(moduleView = ui.moduleView || (ui.moduleView = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var moduleView;
    (function (moduleView) {
        var login;
        (function (login) {
            class LoginSceneUI extends Scene {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("moduleView/login/LoginScene");
                }
            }
            login.LoginSceneUI = LoginSceneUI;
            REG("ui.moduleView.login.LoginSceneUI", LoginSceneUI);
        })(login = moduleView.login || (moduleView.login = {}));
    })(moduleView = ui.moduleView || (ui.moduleView = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var moduleView;
    (function (moduleView) {
        var luckPrize;
        (function (luckPrize) {
            var item;
            (function (item) {
                class RollNameItemUI extends View {
                    constructor() { super(); }
                    createChildren() {
                        super.createChildren();
                        this.loadScene("moduleView/luckPrize/item/RollNameItem");
                    }
                }
                item.RollNameItemUI = RollNameItemUI;
                REG("ui.moduleView.luckPrize.item.RollNameItemUI", RollNameItemUI);
            })(item = luckPrize.item || (luckPrize.item = {}));
        })(luckPrize = moduleView.luckPrize || (moduleView.luckPrize = {}));
    })(moduleView = ui.moduleView || (ui.moduleView = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var moduleView;
    (function (moduleView) {
        var luckPrize;
        (function (luckPrize) {
            class LuckPrizeBoxViewUI extends Scene {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("moduleView/luckPrize/LuckPrizeBoxView");
                }
            }
            luckPrize.LuckPrizeBoxViewUI = LuckPrizeBoxViewUI;
            REG("ui.moduleView.luckPrize.LuckPrizeBoxViewUI", LuckPrizeBoxViewUI);
            class LuckPrizeRewardViewUI extends View {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("moduleView/luckPrize/LuckPrizeRewardView");
                }
            }
            luckPrize.LuckPrizeRewardViewUI = LuckPrizeRewardViewUI;
            REG("ui.moduleView.luckPrize.LuckPrizeRewardViewUI", LuckPrizeRewardViewUI);
            class LuckPrizeViewUI extends View {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("moduleView/luckPrize/LuckPrizeView");
                }
            }
            luckPrize.LuckPrizeViewUI = LuckPrizeViewUI;
            REG("ui.moduleView.luckPrize.LuckPrizeViewUI", LuckPrizeViewUI);
        })(luckPrize = moduleView.luckPrize || (moduleView.luckPrize = {}));
    })(moduleView = ui.moduleView || (ui.moduleView = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var moduleView;
    (function (moduleView) {
        var rank;
        (function (rank) {
            class RankItemUI extends View {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("moduleView/rank/RankItem");
                }
            }
            rank.RankItemUI = RankItemUI;
            REG("ui.moduleView.rank.RankItemUI", RankItemUI);
            class RankViewUI extends View {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("moduleView/rank/RankView");
                }
            }
            rank.RankViewUI = RankViewUI;
            REG("ui.moduleView.rank.RankViewUI", RankViewUI);
        })(rank = moduleView.rank || (moduleView.rank = {}));
    })(moduleView = ui.moduleView || (ui.moduleView = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var moduleView;
    (function (moduleView) {
        var shop;
        (function (shop) {
            class ShopItemUI extends View {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("moduleView/shop/ShopItem");
                }
            }
            shop.ShopItemUI = ShopItemUI;
            REG("ui.moduleView.shop.ShopItemUI", ShopItemUI);
            class ShopViewUI extends View {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("moduleView/shop/ShopView");
                }
            }
            shop.ShopViewUI = ShopViewUI;
            REG("ui.moduleView.shop.ShopViewUI", ShopViewUI);
        })(shop = moduleView.shop || (moduleView.shop = {}));
    })(moduleView = ui.moduleView || (ui.moduleView = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var moduleView;
    (function (moduleView) {
        var task;
        (function (task) {
            class TaskItemUI extends View {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("moduleView/task/TaskItem");
                }
            }
            task.TaskItemUI = TaskItemUI;
            REG("ui.moduleView.task.TaskItemUI", TaskItemUI);
            class TaskViewUI extends View {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("moduleView/task/TaskView");
                }
            }
            task.TaskViewUI = TaskViewUI;
            REG("ui.moduleView.task.TaskViewUI", TaskViewUI);
        })(task = moduleView.task || (moduleView.task = {}));
    })(moduleView = ui.moduleView || (ui.moduleView = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
